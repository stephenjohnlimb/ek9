package org.ek9tooling;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Used to denote a parameterised Class or Function construct.
 * These are not really full declarations of the new type, but are just a
 * simple declaration that can be output as part of the 'defines type' block.
 * <p>
 * Normally, these are not really required, but when taking Java based libraries
 * and extracting the EK9 interface they can be declared. More importantly the
 * actual Java class does need to exist.
 * </p>
 * <p>
 * So the Java class (byte-code), could be hand developed as in the case of an extern library
 * or, it could have been generated by the EK9 compiler when generating parameterised classes/functions.
 * </p>
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)

public @interface Ek9ParameterisedType {
  String value();
}
