#!ek9
defines module com.customer.justcat

  defines function
    SomeNames()
      @Resolved: SYMBOL_DEFINITION: TYPE: "List of (String)"
      <- rtn as List of String: ["Some", "Words", "From", "Function"]

    OutputFormatSeparated()
      ->
        firstPart String
        secondPart String
      <-
        rtn as String: firstPart? and secondPart? <- firstPart + ", " + secondPart : String()


    someAbstractImpl as abstract
      <- rtn as Integer?

  //Some examples of the new parser grammar to enable return values from stream pipelines over multiple lines.
  defines class
    @Resolved: SYMBOL_DEFINITION: TYPE: "NameProvider"
    NameProvider
      someNames()
        <- rtn as List of String: ["Some", "Words", "From", "Class", "Method"]

      cattyCat1()
        <- rtn as String: cat ["Some", "Words", "From", "Class", "Method"] | join with OutputFormatSeparated | collect as String
        
      cattyCat2()
        <- rtn as String: cat someNames() | join with OutputFormatSeparated | collect as String
      
      cattyCat3()
        <- rtn as String: cat ["Some", "Words", "From", "Class", "Method"]
          | join with OutputFormatSeparated
          | collect as String
        
      cattyCat4()
        <- rtn as String: cat someNames()
          | join with OutputFormatSeparated
          | collect as String    
        
  defines program

    CatList()
      stdout <- Stdout()

      cat "Steve" > stdout

      cat 0b01100011100 > stdout

      //Just using the list
      theList <- ["Some", "Words", "For", "Listing"]
      cat theList > stdout

      //Using an iterator variable from the list
      iterator <- theList.iterator()
      cat iterator > stdout

      //But now it also possible to do this
      cat ["Some", "Words", "For", "Listing"] > stdout

      //Fails in two ways type of _vFirst_1 and ._init(...not fully qualified function call)
      cat SomeNames() > stdout

      //This fails at generation - source symbol null
      cat NameProvider().someNames() > stdout

      //This fails at generation - source symbol null
      cat theList.iterator() > stdout
//EOF