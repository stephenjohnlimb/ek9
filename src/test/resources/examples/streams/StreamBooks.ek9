#!ek9
defines module com.customer.books

  defines type

    @Resolved: SYMBOL_DEFINITION: TYPE: "AuthorId"
    AuthorId as Integer constrain
      > 0

    @Resolved: SYMBOL_DEFINITION: TYPE: "Age"
    Age as Integer constrain
      > 0

    @Resolved: SYMBOL_DEFINITION: TYPE: "Name"
    Name as String constrain as
      matches /^[a-zA-Z -]+$/

    @Resolved: SYMBOL_DEFINITION: TYPE: "BookTitle"
    BookTitle as String constrain as
      matches /^[a-zA-Z0-9 -+]+$/

    <?-
      Simple enumeration for controlling filtering
    -?>
    @Resolved: SYMBOL_DEFINITION: TYPE: "BookFilterSelection"
    BookFilterSelection
      SkipTwo
      JustFirst
      JustLast
      
  defines class

    <?-
      Models the author of books.
    -?>
    @Resolved: SYMBOL_DEFINITION: TYPE: "Author"
    Author
      id as AuthorId?
      age as Age?
      firstname as Name?
      surname as Name?

      Author() as pure
        ->
          id as AuthorId
          age as Age
          firstname as Name
          surname as Name
        assert id? and age? and firstname? and surname?
        this.id: AuthorId(id)
        this.age: Age(age)
        this.firstname: Name(firstname)
        this.surname: Name(surname)

      Author() as pure
        -> author as Author
        this(author.id(), author.age(), author.firstname(), author.surname())

      <?-
        Stop creation of empty Author.
      -?>
      default private Author()

      id() as pure
        <- rtn as AuthorId: id

      age() as pure
        <- rtn as Age: age

      firstname() as pure
        <- rtn as Name: firstname

      surname() as pure
        <- rtn as Name: surname

      operator #? as pure
        <- rtn as Integer: #?id

      operator $ as pure
        <- rtn as String: `Author: ${firstname} ${surname}, Age: ${age}`

      operator ? as pure
        <- rtn as Boolean: age? and firstname? and surname?

      operator :=:
        -> author as Author
        id :=: author.id()
        age :=: author.age()
        firstname :=: author.firstname()
        surname :=: author.surname()

    @Resolved: SYMBOL_DEFINITION: TYPE: "Book"
    Book
      title as BookTitle?
      author as Author?
      published as Date?

      Book() as pure
        ->
          title as BookTitle
          author as Author
          published as Date
        assert title? and author? and published?
        this.title: BookTitle(title)
        this.author: Author(author)
        this.published: Date(published)

      author() as pure
        <- rtn as Author: author

      published() as pure
        <- rtn as Date: published

      operator $ as pure
        <- rtn as String: `Title: ${title}, ${author}, Published: ${published}`

      operator #? as pure
        <- rtn as Integer: #? $this

      operator #^ as pure
        <- rtn as String: $this

      operator <=> as pure
        -> book as Book
        <- rtn as Integer: published() <=> book.published()

    <?-
      Model the concept of a library, just an in-memory map for now
    -?>
    @Resolved: SYMBOL_DEFINITION: TYPE: "Library"
    Library
      //These are made up books and Age is when the author wrote the book
      //There are no books on EK9 yet!
      @Resolved: SYMBOL_DEFINITION: TYPE: "List of (Book)"
      books as List of Book: [
        Book(BookTitle("Java"), Author(AuthorId(1), Age(50), Name("John"), Name("Doe")), 1998-01-01),
        Book(BookTitle("C++"), Author(AuthorId(1), Age(42), Name("John"), Name("Doe")), 1990-01-07),
        Book(BookTitle("Scala"), Author(AuthorId(1), Age(67), Name("John"), Name("Doe")), 2015-03-02),
        Book(BookTitle("Python"), Author(AuthorId(1), Age(62), Name("John"), Name("Doe")), 2010-12-02),
        Book(BookTitle("HTML"), Author(AuthorId(2),Age(58), Name("Mark"), Name("Pickford")), 2008-07-02),
        Book(BookTitle("CSS"), Author(AuthorId(4), Age(51), Name("Mark"), Name("Keely")), 2008-04-02),
        Book(BookTitle("ADA"), Author(AuthorId(5), Age(44), Name("Ada"), Name("Lovelace")), 1988-01-02),
        Book(BookTitle("Dart"), Author(AuthorId(6), Age(47), Name("Peter"), Name("Dove")), 2020-01-02),
        Book(BookTitle("C#"), Author(AuthorId(7), Age(60), Name("William"), Name("Fence")), 2012-10-02),
        Book(BookTitle("Javascript"), Author(AuthorId(3), Age(52), Name("James"), Name("Pickford")), 2008-03-02),
        Book(BookTitle("C"), Author(AuthorId(1), Age(42), Name("John"), Name("Doe")), 1990-01-07),
        Book(BookTitle("C++"), Author(AuthorId(7), Age(38), Name("William"), Name("Fence")), 1990-04-02),
        Book(BookTitle("C"), Author(AuthorId(7), Age(38), Name("William"), Name("Fence")), 1990-04-14),
        Book(BookTitle("Haskell"), Author(AuthorId(7), Age(30), Name("William"), Name("Fence")), 1982-04-14),
        Book(BookTitle("Lisp"), Author(AuthorId(7), Age(25), Name("William"), Name("Fence")), 1977-09-24)
        ]

      <?-
      Provide access to the books in the library.
      -?>
      books() as pure
        //Just check that 'List' is resolvable in actually is template/generic type
        @Resolved: SYMBOL_DEFINITION: TEMPLATE_TYPE: "List"
        <- rtn as List of Book: books

  defines function

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "differentAuthor"
    differentAuthor() as pure abstract
      -> book as Book
      <- rtn as Boolean?

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "bookNumberFilter"
    bookNumberFilter() as pure abstract
      -> books as List of Book
      <- rtn as List of Book?

    <?-
      Higher order function, that uses the switch/given expression.
      Demonstrates intialising the switch return with the default value, so default can be omitted.
      With 'pure' methods, the returning value can be reset/overwritten as required.
      Also shows the simple lambda-like one line functions.
    -?>
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "suitableBookFilter"
    suitableBookFilter() as pure
      -> selection as BookFilterSelection
      <- bookFilter as bookNumberFilter: given selection
        <- theFilter as bookNumberFilter: () is bookNumberFilter pure (rtn: books) //i.e. nothing filtered
        when BookFilterSelection.SkipTwo
          theFilter: () is bookNumberFilter pure (rtn: cat books | skip 2 | collect as List of Book)
        when BookFilterSelection.JustFirst
          theFilter: () is bookNumberFilter pure (rtn: cat books | head 1 | collect as List of Book)
        when BookFilterSelection.JustLast
          theFilter: () is bookNumberFilter pure (rtn: cat books | tail 1 | collect as List of Book)

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "filterBooksToOutput"
    filterBooksToOutput()
      ->
        books as List of Book
        filterSelection as BookFilterSelection
        output as StringOutput
        
      authorId <- getAuthorChange()  
      theBookFilter <- suitableBookFilter(filterSelection)
      cat books
        | sort by comparingAuthor
        | split by authorId
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with theBookFilter
        | flatten
        > output

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "getAuthorChange"
    getAuthorChange() as pure
      <- authorChanged as differentAuthor?
      byId <- AuthorId()
      authorChanged: (byId) is differentAuthor()
        rtn: byId? and byId != book.author().id()        
        byId: book.author().id()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "bookAuthor"
    bookAuthor() as pure
      -> book as Book
      <- author as Author: book.author()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "acceptableAuthorAge"
    acceptableAuthorAge() as pure
      -> author as Author
      <- rtn as Boolean: author.age() >= Age(50)

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "authorName"
    authorName() as pure
      -> author as Author
      <- rtn as Name: `${author.firstname()} ${author.surname()}`

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "theAuthorId"
    theAuthorId() as pure
      -> author as Author
      <- rtn as AuthorId: author.id()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "comparingAuthor"
    comparingAuthor() as pure
      ->
        book1 as Book
        book2 as Book
      <-
        rtn as Integer: book1.author().id() <=> book2.author().id()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "comparingAuthorName"
    comparingAuthorName() as pure
      ->
        author1 as Author
        author2 as Author
      <-
        rtn as Integer: author1.surname() <=> author2.surname()
      if rtn == 0
        rtn: author1.firstname() <=> author2.firstname()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "compareDatePublished"
    compareDatePublished() as pure
      ->
        book1 as Book
        book2 as Book
      <-
        rtn as Integer: book1.published() <=> book2.published()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "dateBookPublished"
    dateBookPublished() as pure
      -> book as Book
      <- rtn as Date: book.published()

    <?-
      Note that as book has a comparator on the published date it is possible to just
      use cat books | sort | collect as List of Book
    -?>
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "orderOnPublishedDate"
    orderOnPublishedDate() as pure
      -> books as List of Book
      <- rtn as List of Book: cat books | sort by compareDatePublished | collect as List of Book

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "sufficientBooks"
    sufficientBooks() as pure
      -> books as List of Book
      <- rtn as Boolean: length books >= 3

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "bookSigningEvent"
    bookSigningEvent() as pure
      -> book as Book
      <- rtn as String: `Date: ${book.published()}`

  defines program

    JustCatBooks()
      stdout <- Stdout()
      library <- Library()

      cat library.books() > stdout

    SortBooksByAuthor()
      stdout <- Stdout()
      library <- Library()

      cat library.books() | sort by comparingAuthor > stdout

    SortBooksByNaturalOrder()
      stdout <- Stdout()
      library <- Library()

      //Just use the natural sort (compare) operator of Book
      //This will be the published date
      cat library.books() | sort > stdout

    CheckUniqueByAddingDuplicate()
      stdout <- Stdout()
      library <- Library()

      //Now you can layout like this and use naming.
      //If you like this format. A bit like Dart.
      duplicateBook <- Book(
        title: BookTitle("Lisp"),
        author: Author(
          id: AuthorId(7),
          age: Age(25),
          firstname: Name("William"),
          surname: Name("Fence")
          ),
        published: 1977-09-24
        )

      //Make a library with this additional Book in
      myLibrary <- library + duplicateBook

      //list my library should show two 'Lisp' books
      cat myLibrary > stdout

      //Now check uniq works on the hashcode of the book
      //Note unique can also be used with a function.
      cat myLibrary | uniq > stdout

    GroupBooksByPublishedDate()
      stdout <- Stdout()
      books <- Library().books()
      cat books | sort by comparingAuthor | group by dateBookPublished > stdout

    ProcessByAuthor()
      stdout <- Stdout()
      books <- Library().books()

      cat books | sort by comparingAuthor | split by getAuthorChange() | map by orderOnPublishedDate | flatten > stdout

    ProcessByAuthorWithThreeOrMoreBooks()
      stdout <- Stdout()
      books <- Library().books()

      authorId <- getAuthorChange()

      cat books | sort by comparingAuthor | split by authorId | select with sufficientBooks | map by orderOnPublishedDate | flatten > stdout

    ProcessByAuthorWithThreeOrMoreBooksIgnoreFirstTwo()
      stdout <- Stdout()
      books <- Library().books()

      excludingFirstTwoBooks <- () is bookNumberFilter as pure function
        rtn: cat books | skip 2 | collect as List of Book

      //Just trying out a single inline dynamic function
      //See how much harder it is to read than just using the above.
      cat books
        | sort by comparingAuthor
        | split by getAuthorChange()
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map by () is bookNumberFilter as pure (rtn: cat books | skip 2 | collect as List of Book)
        | flatten
        > stdout

    ProcessByAuthorWithThreeOrMoreBooksJustFirst()
      stdout <- Stdout()
      books <- Library().books()

      //Note rather than say head 1 - it is possible to just use 'head' by itself.
      authorId <- getAuthorChange()
      firstBook <- () is bookNumberFilter as pure function
        rtn: cat books | head | collect as List of Book

      cat books
        | sort by comparingAuthor
        | split by authorId
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with firstBook
        | flatten
        > stdout

    ProcessByAuthorWithThreeOrMoreBooksJustLast()
      stdout <- Stdout()
      books <- Library().books()

      //As with 'head' if you only want the last one - just use 'tail' without any number.
      authorId <- getAuthorChange()
      lastBook <- () is bookNumberFilter as pure function
        rtn:  cat books | tail | collect as List of Book

      cat books
        | sort by comparingAuthor
        | split by authorId
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with lastBook
        | flatten
        > stdout

    ProcessByAuthorUsingHigherOrderFunction()
      stdout <- Stdout()
      library <- Library()
      
      stdout.println("Omit first two books where author has three or more books")
      excludingFirstTwoBooks <- suitableBookFilter(BookFilterSelection.SkipTwo)
      cat library.books()
        | sort by comparingAuthor
        | split by getAuthorChange()
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with excludingFirstTwoBooks
        | flatten
        > stdout
      
      stdout.println("First book where author has three or more books")

      cat library.books()
        | sort by comparingAuthor
        | split by getAuthorChange()
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with suitableBookFilter(BookFilterSelection.JustFirst)
        | flatten
        > stdout
      
      stdout.println("Last book where author has three or more books")
      lastBook <- suitableBookFilter(BookFilterSelection.JustLast)
      cat library.books()
        | sort by comparingAuthor
        | split by getAuthorChange()
        | select with sufficientBooks
        | map by orderOnPublishedDate
        | map with lastBook
        | flatten
        > stdout
        
    ProcessByAuthorUsingParameterisedFunction()
      stdout <- Stdout()
              
      stdout.println("Omit first two books where author has three or more books")
      filterBooksToOutput(Library().books(), BookFilterSelection.SkipTwo, stdout)
      
      stdout.println("First book where author has three or more books")
      filterBooksToOutput(Library().books(), BookFilterSelection.JustFirst, stdout)
           
      stdout.println("Last book where author has three or more books")      
      filterBooksToOutput(Library().books(), BookFilterSelection.JustLast, stdout)      
      
    UniquePublishingDatesFromAuthorWithThreeOrMoreBooks()
      stdout <- Stdout()
      library <- Library()

      authorId <- getAuthorChange()
      authorsBooks as List of Book: List()

      booksByEachAuthor as List of List of Book: List()

      stdout.println("Unique signing events on day of publication by authors with three or more books.")

      cat library.books()
        | sort by comparingAuthor
        | split by authorId        
        | tee in booksByEachAuthor
        | filter by sufficientBooks
        | map by orderOnPublishedDate
        | flatten
        | tee in authorsBooks
        | uniq by dateBookPublished
        | sort by compareDatePublished
        | map with bookSigningEvent
        > stdout

      stdout.println("Books From author with three or more books")
      cat authorsBooks > stdout

      stdout.println("There are " + $ length booksByEachAuthor + " authors in total with any number of books")

    LibraryExample()
      stdout <- Stdout()
      books <- Library().books()

      cat books
        | map with bookAuthor
        | select by acceptableAuthorAge
        | uniq by theAuthorId
        | sort by comparingAuthorName
        | map with authorName
        > stdout
    
    ImperativeLibraryExample()
      stdout <- Stdout()
      library <- Library()
      
      uniqueAuthors as Dict of (AuthorId, Author): Dict()
      
      for book in library.books()
        author <- book.author()
        if author.age() >= 50
          if uniqueAuthors not contains author.id()
            uniqueAuthors += DictEntry(author.id(), author)
      
      for author in uniqueAuthors.values()
        stdout.println(author.firstname() + " " + author.surname())
//EOF