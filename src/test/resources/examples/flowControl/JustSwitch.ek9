#!ek9
defines module com.customer.just.switches

  defines function
    currentTemperature() as pure
      -> country as String
      <- temp as Integer: Integer()
      
      if country == "GB"
        temp: 20
      else if country == "DE"
        temp = 41
        
  defines program
    simpleSwitch()
      stdout <- Stdout()
      multiplier <- 5
      //This is what we will use to 'switch on'
      conditionVariable <- 21
      //This is what we will vary based on the condition variable
      resultText <- String()

      switch conditionVariable
        case < 12
          resultText: "Moderate"
        case > 10*multiplier
          resultText: "Very High"
        case 25, 26, 27
          resultText: "Slightly High"
        case currentTemperature("GB"), 21, 22, 23, 24
          resultText: "Perfect"
        default
          resultText: "Not Suitable"

      stdout.println(resultText)

      //The same switch could have been written using given and when
      given conditionVariable
        when < 12
          resultText: "Moderate"
        when > 10*multiplier
          resultText: "Very High"
        when 25, 26, 27
          resultText: "Slightly High"
        when currentTemperature("GB"), 21, 22, 23, 24
          resultText: "Perfect"
        default
          resultText: "Not Suitable"

      stdout.println(resultText)

    returningSwitch()
      stdout <- Stdout()
      //This is what we will use to 'switch on'
      conditionVariable <- "Name"
      //This is what we will vary based on the condition variable

      resultText <- switch conditionVariable
        <- result String: String()
        case 'D'
          result: "Inappropriate"
        case matches /[nN]ame/
          result: "Perfect"
        case > "Gandalf"
          result: "Moderate"
        case < "Charlie"
          result: "Very High"
        default
          result: "Suitable"

      stdout.println(resultText)

    <?-
      Example of declaring a variable and then using a guard.
      If the guard resulted in 'not set' then resultText would also be not set
      and the switch would not have even been executed (nor any case functions).
      Note you can use either 'with' or 'then' to join the guard to the switch variable.
    -?>
    switchWithGuard()
      stdout <- Stdout()
      temperature <- Integer()
      resultText <- switch temperature ?= currentTemperature("GB") with temperature
        <- result String: String()
        case 'D'
          result: "Inappropriate"
        case matches /[nN]ame/
          result: `Perfect at ${temperature}`
        case > "Gandalf"
          result: "Moderate"
        case < "Charlie"
          result: "Very High"
        default
          result: "Suitable"

      stdout.println(resultText)

    <?-
      In this case an assignment is used, this means that 'temperature' could still be unset.
      But unlike the guard above, the switch still executes, but now the code must be able to deal with unset.
      This is the 'default' case.
      Note you can use either 'with' or 'then' to join the assignment to the switch variable.
    -?>
    switchWithAssignment()
      stdout <- Stdout()
      temperature <- Integer()
      resultText <- switch temperature := currentTemperature("GB") with temperature
        <- result String: String()
        case 'D'
          result: "Inappropriate"
        case matches /[nN]ame/
          result: `Perfect at ${temperature}`
        case > "Gandalf"
          result: "Moderate"
        case < "Charlie"
          result: "Very High"
        default
          result: "No idea"

      stdout.println(resultText)

    <?-
      Now in this case, rather than use a guard, it uses a declaration of the new variable.
      'temperature' is only visible within the switch block.
      Note you can use either 'with' or 'then' to join the declaration to the switch variable.
    -?>
    switchWithDeclaration()
      stdout <- Stdout()
      resultText <- switch temperature <- currentTemperature("GB") with temperature
        <- result String: String()
        case 'D'
          result: "Inappropriate"
        case matches /[nN]ame/
          result: `Perfect at ${temperature}`
        case > "Gandalf"
          result: "Moderate"
        case < "Charlie"
          result: "Very High"
        default
          result: "Suitable"

      stdout.println(resultText)

      //So this means the 'temperature' defined above is now out of scope and so
      //can be redeclared and used here
      temperature <- "Some other value"
      assert temperature?
//EOF
