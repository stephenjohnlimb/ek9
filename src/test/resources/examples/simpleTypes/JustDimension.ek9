#!ek9
defines module com.customer.just
  defines program
    ShowDimensionType()
      stdout <- Stdout()

      dimension1 <- 1cm
      dimension2 <- 10px
      dimension3 <- 4.5em
      dimension4 <- 1.5em

      //some mathematics with dimensions
      calc1 <- dimension1 * 2
      calc2 <- dimension2 / 5
      calc3 <- dimension3 + 0.6
      calc4 <- dimension3 + dimension4

      assert calc1 == 2cm
      assert calc2 == 2px
      assert calc3 == 5.1em
      assert calc4 == 6em

      //But if we divide a dimension by another dimension we get just a number
      calc5 <- dimension3 / dimension4
      assert calc5 == 3

      stdout.println($dimension1 + " " + $dimension2 + " " + $dimension3 + " " + $dimension4)

      stdout.println($calc1 + " " + $calc2 + " " + $calc3 + " " + $calc4 + " " + $calc5)

      stdout.println($calc3 + " < " + $calc4)
      assert calc3 < calc4

      lesser <- calc3 <? calc4
      stdout.println($lesser + " <- " + $calc3 + " <? " + $calc4)
      assert lesser == calc3
      
      calc3 += 0.9
      stdout.println($calc3 + " == " + $calc4)
      assert calc3 == calc4

      calc3++
      stdout.println($calc3 + " > " + $calc4)
      assert calc3 > calc4

      //Checking the calculation is not actually valid
      //different types of dimension calc1 is cm and calc2 is px
      assert not (calc1 <> calc2)?

      //This is a test that the comparison was valid, not the result of the comparison
      assert (calc3 < calc4)?

      calc6 <- sqrt calc4
      stdout.println($calc6)
      assert calc6 == 2.449489742783178em

      //You could define this as a constant if you wished
      numberOfKmInMiles <- 1.609344km

      eightMiles <- 8mile
      inKM <- eightMiles.convert(numberOfKmInMiles)
      stdout.println($eightMiles + " in km is " + $inKM)
      assert inKM == 12.874752km

      assert #< inKM == 12.874752
      returnJourney <- -eightMiles
      assert abs returnJourney == eightMiles

      squared <- inKM ^ 2
      stdout.println($squared)

      invalidResult <- eightMiles + inKM
      assert not invalidResult?

//EOF
