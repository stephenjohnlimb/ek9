#!ek9
defines module com.customer.just.functions

  defines function

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "mathOperation"
    mathOperation() as pure abstract
      ->
        x as Float
        y as Float
      <-
        result as Float?

    add() is mathOperation as pure
      ->
        x as Float
        y as Float
      <-
        result as Float: x + y

    subtract() is mathOperation as pure
      ->
        x as Float
        y as Float
      <-
        result as Float: x - y

    divide() is mathOperation as pure
      ->
        x as Float
        y as Float
      <-
        result as Float: x / y

    multiply() is mathOperation as pure
      ->
        x as Float
        y as Float
      <-
        result as Float: x * y

  defines program

    MathExample()
      stdout <- Stdout()
      stdout.println("Math Operation Example")      

      for op in [add, subtract, divide, multiply]
        stdout.println(`Result: ${op(21, 7)}`)
        
    DynamicMathExample1()
      stdout <- Stdout()
      stdout.println("Math Dynamic Operation Example1")
      fixedValue <- 9.8

      addFunction <- () is mathOperation as pure function
        result:=? x+y

      subtractFunction <- () extends mathOperation as pure
        result:=? x-y
        
      divideFunction <- () is mathOperation pure
        result:=? x/y

      multiplyFunction <- () is mathOperation pure
        result:=? x*y
      
      specialFunction <- (fixedValue) is mathOperation pure
        result:=? (x+fixedValue) * y^fixedValue
          
      ops <- [addFunction, subtractFunction, divideFunction, multiplyFunction, specialFunction]

      for op in ops
        stdout.println(`Result: ${op(21, 7)}`)

    DynamicMathExample2()
      stdout <- Stdout()
      stdout.println("Math Dynamic Operation Example2")
      fixedValue <- 9.8

      //Nearest EK9 gets to a lambda - wrap in parenthesis on single line.
      ops <- [
        () is mathOperation as pure (result:=? x+y),
        () is mathOperation as pure (result:=? x-y),
        () is mathOperation as pure (result:=? x/y),
        () is mathOperation as pure (result:=? x*y),
        (fixedValue) is mathOperation pure (result:=? (x+fixedValue) * y^fixedValue)
        ]

      for op in ops
        stdout.println(`Result: ${op(21, 7)}`)
        
    DynamicMathExample3()
      stdout <- Stdout()
      stdout.println("Math Dynamic Operation Example3")
      fixedValue <- 9.8
                     
      for op in [
        () is mathOperation as pure (result:=? x+y),
        () is mathOperation as pure (result:=? x-y),
        () is mathOperation as pure (result:=? x/y),
        () is mathOperation as pure (result:=? x*y),
        (fixedValue) is mathOperation pure (result:=? (x+fixedValue) * y^fixedValue)
        ]
        stdout.println(`Result: ${op(21, 7)}`)                 
//EOF