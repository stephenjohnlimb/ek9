#!ek9
defines module com.customer.just

  defines function
  
    mathOperation() as pure abstract
      -> value as Float
      <- result as Float?
      
    multiply() is mathOperation as pure
      -> value as Float
      <- result as Float: value * 5.6

    heavyMultiply() is mathOperation as pure
      -> value as Float
      <- result as Float: value * 7.99    
      
    suitableMathOperation()
      -> value as Float
      <- op as mathOperation: value < 21 <- heavyMultiply else multiply

  defines program
    SimpleFunction()
      stdout <- Stdout()
      
      value <- 9
      mathOp <- suitableMathOperation(value)
      calculatedResult <- mathOp(value)
      stdout.println("The result is " + $ calculatedResult)

      //Experiment with many parameters, so we need to employ multiple lines.
      //Note that now it is possible to used named parameters in a capture.
      inlineFunction <- (
        v1: 12,
        v2: 64,
        v3: 90
        ) is mathOperation as (result: v1 + v2 + v3 * value)

      additionalCalculation <- inlineFunction(value)
      // 12 + 64 + 90*9
      stdout.println("The additional result is " + $ additionalCalculation)
//EOF