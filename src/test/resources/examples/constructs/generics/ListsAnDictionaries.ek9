#!ek9
defines module lists.and.dictionaries

  <?-
    A demonstration of lists and dictionaries.
    How they can be written in a fairly free format.
    Also how named values on parameters can be employed so that the
    use of the parameters is a lot easy to understand as first look.

    With the addition of the '@' directives it is now possible to check if
    types are resolvable at different compilation phases.
  -?>
  defines function

    function1()
      ->
        focus as Integer
        name as String
        @Resolved: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "Dict of (Integer, String)"
        values as Dict of (Integer, String)
      <-
        rtn as Float: 0.0

    functionCall1()
      //Here we are using the inferred Dict of (Integer, String)
      values <- {1: "quick", 2: "brown", 3: "fox"}
      result <- function1(1, "Steve", values)
      assert result?

    functionCall2()
      result <- function1(1, "Steve", {1: "quick", 2: "brown", 3: "fox"})
      assert result?

    <?-
      Use of named parameters makes this code a bit more verbose,
      but much more obvious.
    -?>
    functionCall3()
      result <- function1(
        focus: 1,
        name: "Steve",
        values: {
          1: "quick",
          2: "brown",
          3: "fox"
          }
        )
      assert result?

    justCheckInferredDict()
      @Resolved: FULL_RESOLUTION: TYPE: "Dict of (Character, String)"
      someDictionary <- { 'A': "Steve", 'B': "Stephen", 'C': "Steven" }

      assert someDictionary?

    justCheckInferredLists()
      @Resolved: FULL_RESOLUTION: TYPE: "List of (String)"
      listOfString <- [ "Steve", "Stephen", "Steven"]
      assert listOfString?

      @Resolved: FULL_RESOLUTION: TYPE: "List of (Date)"
      someDates <- [ 2018-01-01, 2020-01-01, 2023-08-12]
      assert someDates?

//EOF