#!ek9
defines module com.customer.just.switches

  defines type

    <?-
      This is the enumeration that is used in the example below.
      It is finite in the number of values it can hold.
    -?>
    LimitedEnum
      A,
      B,
      C,
      D

  defines function

    SimpleExhaustiveEnumerationExpressionSwitch()
      -> val as LimitedEnum

      result <- switch val
        <- rtn as String?
        case LimitedEnum.A
          rtn: "Just A"
        case LimitedEnum.B
          rtn: "Just B"
        case LimitedEnum.C
          rtn: "Just C"
        case LimitedEnum.D
          rtn: "Just D"
        default
          rtn: "Val is not set"

      assert result?

    SimpleNonExhaustiveEnumerationExpressionSwitch()
      -> val as LimitedEnum

      result <- switch val
        <- rtn as String?
        case == LimitedEnum.A
          rtn: "Just A"
        default
          rtn: "Val is anything but A"

      assert result?

    <?-
      Function to be used later in switch statements.
      Also an example of a pure function that has strict assignment rules
      this also demonstrates how the 'if/else' check for all paths resulting
      in values being initialised.
    -?>
    currentTemperature() as pure
      -> country as String
      <- temp as Integer: Integer()

      if country == "GB"
        temp :=? 20
      else if country == "DE"
        temp :=? 41

    ABooleanSwitchExample()
      conditionVariable <- true

      //This is the reason that an 'if' expression is not needed.
      //You get the same effect with this mechanism
      resultValue <- given conditionVariable
        <- result String: String()
        when true
          result: "Steve"
        default
          //Some statements in here to demo block use.
          var1 <- "something"
          var2 <- "somethingElse"
          assert var1? and var2?
          result: "Stephen"

      assert resultValue?

    SimpleSwitchExampleWithTernaryAsAnAlternative()
      -> conditionVariable as Boolean

      //This is the reason that an ifExpression is not needed.
      resultValue <- given conditionVariable
        <- result String?
        when true
          result: "Steve"
        default
          result: "Not Steve"

      assert resultValue?

      //But above could just have been a ternary
      resultValue2 <- conditionVariable <- "Steve" else "Not Steve"
      assert resultValue2?

    ASimpleSwitchStatement() as pure
      -> conditionVariable as Integer
      multiplier <- 5

      //This is what we will vary based on the condition variable
      resultText1 <- String()

      switch conditionVariable
        case < 12
          resultText1 :=? "Moderate"
        case > 10*multiplier
          resultText1 :=? "Very High"
        case 25, 26, 27
          resultText1 :=? "Slightly High"
        case currentTemperature("GB"), 21, 22, 23, 24
          resultText1 :=? "Perfect"
        default
          resultText1 :=? "Not Suitable"

      assert resultText1?

      resultText2 <- String()
      //The same switch could have been written using given and when
      given conditionVariable
        when < 12
          resultText2 :=? "Moderate"
        when > 10*multiplier
          resultText2 :=? "Very High"
        when 25, 26, 27
          resultText2 :=? "Slightly High"
        when currentTemperature("GB"), 21, 22, 23, 24
          resultText2 :=? "Perfect"
        default
          resultText2 :=? "Not Suitable"

      assert resultText2?

    ASwitchAsExpression() as pure
      -> conditionVariable as String

      //This is more like a chained if/else with expressions in the 'case'
      resultText <- switch conditionVariable
        <- result String?
        case 'D'
          result :=? "Inappropriate"
        case matches /[nN]ame/
          result :=? "Perfect"
        case > "Gandalf"
          result :=? "Moderate"
        case < "Charlie"
          result :=? "Very High"
        default
          result :=? "Suitable"

      assert resultText?

    <?-
      Example of declaring a variable and then using a guard.
      If the guard resulted in 'not set' then resultText would also be not set (because result is an unset String)
      and the switch would not have even been executed (nor any case functions).
      Note you can use either 'with' or 'then' to join the guard to the switch variable.
    -?>
    ASwitchWithGuard()
      temperature <- Integer()
      multiplier <- 5
      resultText <- switch temperature ?= currentTemperature("GB") with temperature
        <- result String: String()
        case < 12
          result: "Moderate"
        case > 10*multiplier
          result: "Very High"
        case 25, 26, 27
          result: "Slightly High"
        case 21, 22, 23, 24
          result: "Perfect"
        default
          result: "Suitable"

      assert resultText?

    <?-
      In this case an assignment is used, this means that 'temperature' could still be unset.
      But unlike the guard above, the switch still executes, but now the code must be able to deal with unset.
      This is the 'default' case.
      Note you can use either 'with' or 'then' to join the assignment to the switch variable.
    -?>
    ASwitchWithAssignment()
      -> multiplier as Integer

      temperature <- Integer()
      resultText <- switch temperature := currentTemperature("GB") with temperature
        <- result String: String()
        case < 12
          result: "Moderate"
        case > 10*multiplier
          result: "Very High"
        case 25, 26, 27
          result: "Slightly High"
        case 21, 22, 23, 24
          result: "Perfect"
        default
          result: "Suitable"

      assert resultText?

    <?-
      Now in this case, rather than use a guard or an assignment, it uses a declaration of the new variable.
      'temperature' is only visible within the switch block.
      Note you can use either 'with' or 'then' to join the declaration to the switch variable.
    -?>
    ASwitchWithDeclaration()
      -> multiplier as Integer

      resultText <- switch temperature <- currentTemperature("GB") with temperature
        <- result String: String()
        case < 12
          result: "Moderate"
        case > 10*multiplier
          result: "Very High"
        case 25, 26, 27
          result: "Slightly High"
        case 21, 22, 23, 24
          result: "Perfect"
        default
          result: "Suitable"

      assert resultText?

      //So this means the 'temperature' defined above is now out of scope and so
      //can be redeclared and used here
      temperature <- "Some other value"
      assert temperature?

//EOF
