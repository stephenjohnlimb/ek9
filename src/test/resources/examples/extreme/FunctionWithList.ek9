#!ek9
//Try a couple of key words in the module name.
defines module com.customer.is.handle.layout

  //Just designed to test functions, named parameters and declarative layout lexing/parsing
  //Note lots of samples here are just design to check the lexer/parser
  //They don't really have usable functionality.
  defines function

    someGenericFunction of type (V, V) as open
      //No real body here
      val as Integer: 89
      assert val?

    someHigher()
      <- rtn as absFunction: () is absFunction() as function (rtn: p1 + p1)

    someFunction
      -> fn as absFunction
      <- rtn as absFunction: fn

    absFunction() as abstract
      -> p1 as Integer
      <- rtn as Integer?

    checkDynamicFunction()
      //You cannot directly inline these dynamic functions.
      //Must create as variables and then you can use them in arrays.
      //Ah but you can now!
      dynamic1 <- () is absFunction()
        //And we must initialize rtn
        rtn: 21
        something <- 32
        assert something?

      dynamic2 <- () is absFunction()
        something <- 39
        somethingElse as Integer := something
        rtn: somethingElse

      toCapture <- 22
      //Now you can inline if it is a one liner.
      dynamic3 <- (toCapture) is absFunction() (rtn: toCapture*2)
      assert dynamic3?

      dynamic4 <- () is absFunction() as function (rtn: 120)
      assert dynamic4?

      //now call a function with a function as a parameter
      result1 <- someFunction(dynamic1)
      assert result1?

      //So we can also define a new dynamic function and pass it in.
      //take care Lisp death by parentheses
      result2 <- someFunction((toCapture) is absFunction() (rtn: toCapture*4) )
      assert result2?

      result3 <- someFunction(fn: (toCapture) is absFunction() (rtn: toCapture*8) )
      assert result3?

      //It is possible to lay it out like this if you want
      result4 <- someFunction(
        fn: (toCapture) is absFunction() (rtn: toCapture/3)
        )
      assert result4?

      dList as List of absFunction: [
        dynamic1,
        dynamic2,
        someHigher()
        ]
      assert dList?

      //would you want to do this, ie get the absFunction and call it directly - looks strange.
      aResult <- someHigher()(34)
      assert aResult?

      //But this looks stranger, is your head hurting yet - a bit too lispy
      bResult <- someFunction(fn: (toCapture) is absFunction() (rtn: 14* toCapture) )(34)
      assert bResult?

      //Imaging a parameterised generic function and we create a dynamic function from it
      aFunct <- () extends someGenericFunction of (String, Date) as function
      assert aFunct?

      //Of if it had two params
      bFunct <- () extends someGenericFunction of (Integer, String) as function
      assert bFunct?

      //Maybe one of those was parameterised
      cFunct <- () extends someGenericFunction of (Integer, Dict of (Date, String)) as function
      assert cFunct?

      //Now we override the implementation with single liner impl
      dFunct <- () extends someGenericFunction of (Integer, Dict of (Date, String)) as function (foo <- "BAR")
      assert dFunct?

      //Now we override the implementation with multiple liner impl
      eFunct <- () extends someGenericFunction of (Integer, Dict of (Date, String)) as function
        foo <- "BAR"
        assert foo?

        nice <- "Cool"
        assert nice?

      assert eFunct?

    f1()
      aVar <- "Steve"
      assert aVar?

      bVar <- List() of String
      assert bVar?

      cVar as List of String: ["A", "List", "Of", "Strings"]
      assert cVar?

      dVar as List of String: [
        "A",
        "List",
        "Of",
        "Strings"
        ]
      assert dVar?

      anotherVar <- List() of Dict of (Integer, String)
      assert anotherVar?

    f2()
      -> p1 as String
      aVar <- "Steve"
      assert aVar?

    p3()
      ->
        p1 as String
      aVar <- "Steve"
      assert aVar?

    p4()
      ->
        p1 as String
        //Some comment and blank line

        p2 as Integer

      aVar <- "Steve"
      assert aVar?

    f5()
      -> p1 as String
      <- rtn as String?
      aVar <- "Steve"
      rtn: aVar

    f6()
      -> p1 as String
      <- rtn as String: "Steve"

    f7()
      //Just call
      aVar <- f5("Test")
      assert aVar?

    f8()
      //Just call f6 but with name parameter
      aVar <- f6(p1: "Test")
      assert aVar?

    f9()
      //Just call f6 but with declarative type layout.
      aVar <- f6(
        "Test"
        )
      assert aVar?

    f10()
      //Just call f6 but with declarative type layout and named param.
      aVar <- f6(
        p1: "Test"
        )
      assert aVar?

    fList1()
      ->
        focus as Integer
        name as String
        values as List of String
      <-
        rtn as Float: 0.0

    fListCall1()
      values <- ["quick", "brown", "fox"]
      result <- fList1(1, "Steve", values)
      assert result?

    fListCall2()
      result <- fList1(1, "Steve", ["quick", "brown", "fox"])
      assert result?

    fListCall3()
      //named
      result <- fList1(focus: 1, name: "Steve", values: ["quick", "brown", "fox"])
      assert result?

    fListCall4()
      //named but with declarative type layout
      //See how much easier this is on the eye, vertical versus horizontal
      //It is more text that the two above, but much clearer as to what is happening.
      result <- fList1(
        focus: 1,
        name: "Steve",
        values: ["quick", "brown", "fox"]
        )
      assert result?

    fListCall5()
      //named but with declarative type layout but array spread
      result <- fList1(
        focus: 1,
        name: "Steve",
        values: [
          "quick",
          "brown",
          "fox"
          ]
        )
      assert result?

    fDictionary1()
      ->
        focus as Integer
        name as String
        values as Dict of (Integer, String)
      <-
        rtn as Float: 0.0

    fDictionaryCall1()
      values <- {1: "quick", 2: "brown", 3: "fox"}
      result <- fDictionary1(1, "Steve", values)
      assert result?

    fDictionaryCall2()
      result <- fDictionary1(1, "Steve", {1: "quick", 2: "brown", 3: "fox"})
      assert result?

    fDictionaryCall3()
      result <- fDictionary1(
        focus: 1,
        name: "Steve",
        values: {
          1: "quick",
          2: "brown",
          3: "fox"
          }
        )
      assert result?

//EOF