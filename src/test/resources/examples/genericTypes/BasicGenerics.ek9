#!ek9
defines module net.customer.inferred

  defines function

    compareFunction() of type T as open
      ->
        item1 as T
        item2 as T
      <-
        rtn as Integer := item1 <=> item2
  
  defines program

    Comparator()
      stdout <- Stdout()
      intComparator <- () is compareFunction of Integer as function
      
      stringComparator <- () extends compareFunction of String as function
      
      intResult <- intComparator(2, 8)
      stdout.println(`Result of int comparison is ${intResult}`)
      
      stringResult <- stringComparator("two", "eight")
      stdout.println(`Result of string comparison is ${stringResult}`)
               
  //Now a few classes including the definition of a Generic type called SomeTestList.
  //List has now been defined in java as a generic class an reverse engineered 
  defines class

    //Generic SomeTestList and lets allow it to be extended - see at end of file.
    SomeTestList of type T as open

      aTest as T?

      default private SomeTestList() as pure

      //Constructor
      SomeTestList() as pure
        -> item as T
        var as T: item
        assert var?
        aTest :=? item

      get()
        -> index as Integer
        <- rtn as T: T()

      something()
        <- rtn as SomeTestList of T: SomeTestList() of T

      //Add a T to the list.
      operator + as pure
        -> item as T
        <- rtn as SomeTestList of T := SomeTestList() of T

      default operator ?

    //Lets see how we can use those generic types.    
    Class1

      //So a simple testing method                
      method1()
        
        aSomeTestList as SomeTestList of String: SomeTestList() of String

        bSomeTestList <- SomeTestList("Steve")
        assert aSomeTestList? and bSomeTestList?

    //end of Class1

    MyList is SomeTestList of String
      var String: String()
      MyList()
        var: "Steve"
              
//EOF