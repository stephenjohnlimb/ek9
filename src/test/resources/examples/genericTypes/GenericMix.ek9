#!ek9
defines module net.customer.generic.mix


  //See SimpleFunction.ek9 for just normal function processing
  //This focuses on how generic functions will work but in combination with generic classes.
  //i.e. a full implementation of a function but in terms of abstract types like S and T
  //You must fully implement the generic function - but then to use it you must use a dynamic function syntax filling in the type parameters.
  defines function
    
    //Maybe this would be a nice way to define a doubler function
    //It does not have to be pure - but in this case it is - also it could be called anything like 'doubler' or 'doubleT' whatever
    //So in its simplest form we use T (could have been P or S) as the type then we can use normal operators
    //How do we know we can use those operators? How to we know we can use other methods on T - we need to constrain T to be at least something
    //We know something about. For time being lets just get a parse and production going then see about methods and operators.
    
    doubler of type T as pure open
      -> param1 as T
      <- retVal as T := param1 + param1

  defines class

    //Generic MyList -with a contrived method to add double of a value
    MyList of type T

      aTest as T?
       
      //Constructor
      MyList() as pure
        -> item as T
        aTest :=? item
        
      get
        -> index as Integer
        <- rtn as T := aTest
          
      //Add a T to the list.
      addDoubleValue
        -> item as T
        <- rtn as MyList of T := MyList() of T
        
        //Just check we can define an optional
        ourMyOptional as MyOptional of T := MyOptional(item)
        assert ourMyOptional?

      default operator ?

    MyOptional of type T
      
      someVar as T?
      
      //Simple constructor taking the item to wrap
      MyOptional
        -> item as T
        set(item)
      
      //The setter of the item
      set
        -> param as T
        someVar := param
        //Just try out and see if we can 'new' a T!
        //Later compilation rules will check if the T in question is abstract and cause a failure.
        other as T: T()
        assert other?
        
        //So I want a dynamic function but in terms of a conceptual type T
        //Only when my list is made with real concrete types will we know!
        //But when it is I want double of whatever T is!

        //TODO fix this up T at position 59 is not resolved. Why?
        //aDoublerFunction as doubler of T: () is doubler of T
        //someValue as T: aDoublerFunction(param)

        hardWiredFunction as doubler of Float: () is doubler of Float as pure function

        otherValue as Float: hardWiredFunction(66.9)
        assert otherValue?

      default operator ?

    TestItem
     
      anotherCall
        <- rtn as String := "OK"
        
        rtn := "Some Value "
        dynamicIntDoubler <- () is doubler of Integer as pure function
        myList <- MyList() of Float
        assert dynamicIntDoubler? and myList?
//EOF