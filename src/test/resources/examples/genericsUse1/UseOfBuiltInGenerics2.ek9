#!ek9
<?-
  Additional checks on built in generic types.
  For the same module.
  These are the longhand form of declarations and uses of generics.
  For phase1 definition we can process these, but later phases we can also
  process 'var <- [1, 2, 3]' as shorthand for List of Integer.
-?>
defines module simple.generics.use.one

  defines function

    AnOptionalInDifferentFile()
      -> param1 as Optional of String
      assert param1?

    ADictionary()
      @Resolved: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "List of (Integer)"
      <- rtn <- List() of Integer

      @Resolved: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "Dict of (Integer, String)"
      aDictionary <- Dict() of (Integer, String)

      @Resolved: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "DictEntry of (Integer, String)"
      newEntry as DictEntry of (Integer, String): DictEntry(1, "Steve")
      aDictionary += newEntry

      <?-
        Obviously not a very useful iterator, just looking to ensure Iterator of Integer is defined and can be resolved.
      -?>
      @Resolved: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "Iterator of (Integer)"
      anIterator <- () is Iterator of Integer as class
        value <- Integer()
        override hasNext() as pure
          <- rtn as Boolean: value?

        override next()
          <- rtn as Integer: value

      assert anIterator?
      assert aDictionary?

//EOF