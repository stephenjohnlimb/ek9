#!ek9
<!-
  Designed for testing of Generics and polymorphic parameterization.
  But this uses the full compiler - to check out the mechanism rather than
  the other generic types that work at a much lower level. Those have been hard to work
  with and have not really had the effect in finding issues that I expected.

  This has to have quite a few 'stub' types so that the basics in the Java code can use specific known EK9 types.
-!>
defines extern module org.ek9.lang

  defines function

    <?-
      Just to check that it is possible to parameterize a genetic/template type
    -?>
    GenericTest

      listOfString <- List() of String
      assert listOfString?


  defines class

    Void

    Boolean as open
      Boolean() as pure

      Boolean() as pure
        -> arg0 as Boolean

    Integer as open
      Integer() as pure

      Integer() as pure
        -> arg0 as Integer

    Float as open
      Float() as pure

      Float() as pure
        -> arg0 as Integer

    String as open
      String() as pure

      String() as pure
        -> arg0 as String

    Character as open

    Date as open

    DateTime as open

    Time as open

    Duration as open

    JSON as open

    Millisecond as open

    Path as open

    Version as open

    Exception as open

  defines function

    Supplier of type T as pure abstract
      <- r as T?

    Producer of type T as abstract
      <- r as T?

    Consumer of type T as pure abstract
      -> t as T

    BiConsumer of type (T, U) as pure abstract
      ->
        t as T
        u as U

    Acceptor of type T as abstract
      -> t as T

    BiAcceptor of type (T, U) as abstract
      ->
        t as T
        u as U

    UnaryOperator of type T as pure abstract
      -> t as T
      <- r as T?

    Function of type (T, R) as pure abstract
      -> t as T
      <- r as R?

    BiFunction of type (T, U, R) as pure abstract
      ->
        t as T
        u as U
      <- r as R?

    Predicate of type T as pure abstract
      -> t as T
      <- r as Boolean?

    <?-
      Similar in concept to a Predicate, but not pure. Can mutate data.
    -?>
    Assessor of type T as abstract
      -> t as T
      <- r as Boolean?

    BiPredicate of type (T, U) as pure abstract
      ->
        t as T
        u as U
      <-
        r as Boolean?

    Comparator of type T as pure abstract
      ->
        t1 as T
        t2 as T
      <-
        r as Integer?

  defines trait
    HTTPRequest as open
    HTTPResponse as open

  defines class

    Iterator of type T as abstract
      Iterator() as pure

    Optional of type T
      Optional() as pure

    Dict of type (K, V) as open
      Dict() as pure

    DictEntry of type (K, V) as open
      DictEntry() as pure

    Result of type (O, E)
      Result() as pure

    List of type T as open
      List() as pure

      List() as pure
        -> arg0 as T

      <?-
        Check bounds or use iterator, else if out of bounds and exception will be thrown.
      -?>
      get() as pure
        -> index as Integer
        <- rtn as T?

      first() as pure
        <- rtn as T?

      last() as pure
        <- rtn as T?

      reverse() as pure
        <- rtn as List of T?

      <!-
      //TODO add Iterator in later
      iterator() as pure
        <- rtn as Iterator of T?
      -!>

      <!-
      TODO sort out generics error: 'List of type T of type T' is not 'List of type T
      operator ~ as pure
        <- rtn as List of T?
      -!>

      operator == as pure
        -> arg as List of T
        <- rtn as Boolean?

      operator <> as pure
        -> arg as List of T
        <- rtn as Boolean?

      operator ? as pure
        <- rtn as Boolean?

      operator + as pure
        -> arg as List of T
        <- rtn as List of T?

      operator + as pure
        -> arg as T
        <- rtn as List of T?

      operator - as pure
        -> arg as List of T
        <- rtn as List of T?

      operator - as pure
        -> arg as T
        <- rtn as List of T?

      operator $ as pure
        <- rtn as String?

      operator #? as pure
        <- rtn as Integer?

      operator #< as pure
        <- rtn as T?

      operator #> as pure
        <- rtn as T?

      operator empty as pure
        <- rtn as Boolean?

      operator length as pure
        <- rtn as Integer?

      operator contains as pure
        -> arg as T
        <- rtn as Boolean?

      operator :~:
        -> arg as List of T

      operator :^:
        -> arg as List of T

      operator :=:
        -> arg as List of T

      operator |
        -> arg as T

      operator +=
        -> arg as List of T

      operator +=
        -> arg as T

      operator -=
        -> arg as List of T

      operator -=
        -> arg as T

//EOF