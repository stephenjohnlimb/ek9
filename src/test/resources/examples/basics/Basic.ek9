#!ek9
defines module net.customer.extend

  <?-
    Now with even just the Generic Editor in eclipse you get folding
    Add in a little text mate and a viable development environment is there.
    Note you can also plugin the faint lines from Certiv for Eclipse - very useful for indent based languages like ek9.
    OK could do all sorts with textmate to improve - but that's for someone else to do.
    This is workable especially when you expand tabs to spaces and use just two spaces
    Now with folding you can include all sorts in the same file related traits, classes and function.
    IntelliJ also works well with the EK9 textmate bundle and has faint lines out of the box.

    The EK9 LSP with VSCode is also looking very good for language help.
    As the compiler gets more complete then symbols and type hierarchies will be available.
  -?>
  
  defines constant

    anInt <- 1
    bInt <- 1
    cInt <- 1
    another <- 33

  defines type

    //Acts as an alias, but with no constraints.
    PostCode as String
    ZipCode as String

    <!-
    here we just want to use American spelling no real value other than stopping typos by Americans
    But lets also add some constraints on the colour we can use
    -!>
    Color as Colour constrain as
      (#0099CC or #9900CC or == #CC0099) and <> #CC0011
     
    <?-
      But here we have some hard limits on driving ages
      Typically you would soft code these based on geography but this is a reasonable scenario for testing.
      Here special case for 89 year olds!
    -?>
    
    DrivingAge as Integer constrain as
      >= 16 and (<= 100 or == 89)
      
    <!-
      Again a hard limit on salaries - normally soft coded - but could be hard compiled limits like this.
      But there is no reason why configuration data could not be stored in EK9 format - pulled in - compiled and used
      on the fly!
    -!>
    
    Salary as Money constrain as
      >= 10000#GBP and <= 120000#GBP

  defines function

    //Lets try the new compiler test directives to ensure that stuff we declare is actually defined.
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "someThingElse"
    someThingElse()
        
      //lets see if we can pickup a dimension. and also add something to it
      //Can we also support negative dimensions?
      dim1 <- -3.5em
      dim2 <- dim1 + 1.5
      //Just so it is referenced.
      assert dim2?

      dim3 <- dim1 + 1
      
      //use prefix and suffix aka first last
      theSize <- #<dim3
      assert theSize?

      theType <- #>dim3
      assert theType?

      //Do we get built in promotion? I think you find you do.
      aFloat Float := 1
      assert aFloat?

      bFloat Float := anInt
      assert bFloat?

      anotherInt <- anInt

      anotherInt += 10
      
      <!-
        Three different ways of saying assign
        because we need to handle this type of assignment is css and html.
      -!>

      anotherInt := 20
      
      anotherInt: 25
      
      anotherInt = 45
      
      //Try out some new types here.
      
      res1 <- 240dpi
      
      //You can get the prefix or suffix 240 and dpi
      //Any type of object can be configured with the prefix and suffix operator
      resSize <- #<res1
      assert resSize?

      resType <- #>res1
      assert resType?

      //Get hash code! Yes the nice clear operator 'what is the hashcode' #?
      colourCode <- #? #0099CC
      assert colourCode?

      colour1 <- #0099CC
      assert colour1?

      //Can we use the type we have redefined from Colour?
      c1 Color := Color(#0099CC)
      assert c1?

      //Rather than do this 'c2 Color'
      //you are better of doing this c2 <- Color()
      //It's still undefined but not null!
      c2 <- Color()
      
      c2 := Color(#0099CC)
      
      money1 <- 300.00#GBP
      //lets get hashcode of that variable
      moneyHashCode <- #? money1
      
      //now same on the literal
      moneyHashCode2 <- #? 300.00#GBP
      
      //should be the same
      if moneyHashCode <> moneyHashCode2
        throw Exception("What; how can that be")
      
      //Use the suffix operator to get the currency.
      moneyCurrency <- #> money1      
      assert moneyCurrency?

      money2 <- 400#GBP

      money3 <- -5000#GBP

      assert money2 <> money3

      //Lets try a new path literal - use like jsonPath
      aPath <- $?.some.path.inc[0].array

      bPath <- $?.another[0][9].multi-named.array

      assert aPath != bPath

      regEx <- /[S|s]te(?:ven?|phen)/

      Steve <- "Steve"
      steve <- "steve"

      Stephen <- "Stephen"
      stephen <- "stephen"

      Steven <- "Steven"
      steven <- "steven"

      Stephene <- "Stephene"
      stephene <- "stephene"

      assert Steve matches regEx and steve matches regEx
      assert Stephen matches regEx and stephen matches regEx
      assert Steven matches regEx and steven matches regEx

      //Can also negate and switch the String and RegEx around
      assert Stephene not matches regEx and regEx not matches stephene

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "verySimple"
    verySimple()
      -> param as Integer
      <- rtn as Float: 2.0 * param
    
    //So here this function is just a one liner and basically you just say
    //the type the variable and the value all one one line if you want.
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "callsVerySimple"
    callsVerySimple()
      <- result Float: verySimple(6)

  defines program

    @Resolved: SYMBOL_DEFINITION: TYPE: "justMath"
    justMath()
      result <- 60 / 5 * (7-5)
      Stdout().println($result)
//EOF