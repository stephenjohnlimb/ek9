#!ek9
<?-
  Highlights more flexibility around in using 'Any' in quite a wide type use.
-?>
defines module net.customer.flexible.any

  defines text for "en"

    Text
      welcome()
        "Welcome"

  defines type

    //use the favourite as an example with super of 'Any'.
    CardSuit
      Hearts
      Diamonds
      Clubs
      Spades

    //Also use this as a type (constrained)
    EmailAddress as String constrain as
      matches /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/

  defines record
    R1
      property <- String()

      default operator ?

  defines component

    BaseComp as abstract
      default operator ?

    Comp1 extends BaseComp
      property <- String()

      default operator ?

  defines trait
    T1
      someMethod()
        -> arg0 as String
        <- rtn as Boolean: arg0?

      operator ? as pure
        <- rtn <- true

  defines class
    Class1 with trait of T1
      default operator ?

  defines function

    <?-
      So here is a simple consumer, it's super function will be inferred as
      Consumer of String and that will have a super function of 'Any'.
    -?>
    sampleInferredConsumer() as pure
      -> arg0 as String
      assert arg0?

    <?-
      Here  am using explicit types, so that I can be assured that the type hierarchy is working.
    -?>
    checkAccessViaAnyOnFunction()

      consumer as Consumer of String: sampleInferredConsumer
      assert consumer?

      a as Any: consumer
      assert a?

    checkAccessViaAnyOnDynamicFunction()
      consumer as Consumer of String: () is Consumer of String as pure function (assert t?)
      assert consumer?

      a as Any: consumer
      assert a?

    checkAnyOnText()
      a as Any: Text("en")
      assert a?

    checkAnyOnConstrainedType()
      a as Any: EmailAddress("stephenjohnlimb@gmail.com")
      assert a?

    checkAnyOnEnumeration()
      a as Any: CardSuit.Clubs
      assert a?

    checkAsAnyOnTrait1()
      //Cannot create traits directly, so create class with trait and refer as trait.
      //Then check that as a trait of T1 with can be handled as 'Any'
      t as T1: Class1()
      assert t?
      a as Any: t
      assert a?

    checkAsAnyOnTrait2()
      //As above but create a dynamic class, no additional implementation, just use the trait.
      t as T1: () with trait of T1 as class
      assert t?
      a as Any: t
      assert a?

    checkAsAnyOnClass()
      a as Any: String()
      assert a?

    checkAsAnyOnRecord()
      a as Any: R1()
      assert a?

    checkAsAnyOnComponent()
      a as Any: Comp1()
      assert a?

    checkListAsAny()
      a as Any: List() of String
      assert a?

    <?-
      Demonstrates that by the compiler has got to the PRE_IR_CHECKS phase, it
      has worked out through type inference that 'List of Any' exists and that
      'Optional of List of Any' also exists.
      Note that this list is now able to hold aggregates and function via 'Any'.
      To process these you'd need a 'dispatcher'.
    -?>
    ListOfAny()
      @Resolved: PRE_IR_CHECKS: TYPE: "List of (Any)"
      list <- [1, "2", 2025-01-23, R1(), sampleInferredConsumer]
      assert list?

      @Resolved: PRE_IR_CHECKS: TYPE: "Optional of (List of (Any))"
      optionalOfList <- Optional(list)
      assert optionalOfList?
//EOF