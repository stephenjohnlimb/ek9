#!ek9
defines module com.customer.just.ifs

  defines function

    currentTemperature() as pure
      -> country as String
      <- temp <- Integer()
      
      if country == "GB"
        temp :=? 20
      else if country == "DE"
        temp :=? 41

    simpleIf()
      stdout <- Stdout()

      suitableValue <- String()
      valueToTest <- 9
      
      if valueToTest < 10
        stdout.println(`Value ${valueToTest} is less than 10`)

      secondValue <- 21
      specialCondition <- true

      if valueToTest < 10 and secondValue > 19 or specialCondition
        stdout.println("Test OK")

      if valueToTest < 10 and
      secondValue > 19 or
      specialCondition
        stdout.println("Test OK")

      //Rather than use the keyword 'if' you can use 'when'
      when valueToTest < 10
        stdout.println(`Value ${valueToTest} is less than 10`)
        
      //As you would expect it is possible to chain if and else statements
      if valueToTest > 9
        suitableValue: "Too High"
      else if valueToTest < 9
        suitableValue: "Too Low"
      else
        suitableValue: "Just Right"
      
      stdout.println(suitableValue)      

    <?-
      Example of using an assignment before the control.
    -?>
    assignmentInIf()
      stdout <- Stdout()

      //Note that this value is 'unset' in the sense it has no meaningful value
      selectedTemperature <- Integer()

      //See if we can find some hot temperature somewhere so in the US we have no idea! because value is unset
      when selectedTemperature := currentTemperature("US") with selectedTemperature > 50
        stdout.println(`Temp of ${selectedTemperature} a little warm in the US`)
      else when selectedTemperature := currentTemperature("US") with selectedTemperature < 50
        stdout.println(`Temp of " + ${selectedTemperature} not too bad in the US`)
      else when selectedTemperature := currentTemperature("GB") with selectedTemperature > 40
        stdout.println(`Temp of " + ${selectedTemperature} a little warm in the UK`)
      else when selectedTemperature := currentTemperature("DE") with selectedTemperature > 40
        stdout.println(`Temp of ${selectedTemperature} a little warm in the DE`)
      else
        stdout.println("Not sure where it might be warm")


    //An example of using a guarded assignment before the control.
    guardedAssignmentInIf()
      stdout <- Stdout()

      selectedTemperature <- Integer()
      
      //Here we use a guarded assignment checks for null and unset and only then does the conditional check
      //Also note we can still use 'if' and rather than 'with' use 'then'
      when selectedTemperature ?= currentTemperature("US") with selectedTemperature > 50
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the US")
      else when selectedTemperature ?= currentTemperature("US") with selectedTemperature < 50
        stdout.println("Temp of " + $selectedTemperature + " not too bad in the US")  
      else if selectedTemperature ?= currentTemperature("GB") with selectedTemperature > 40
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the UK")
      else when selectedTemperature ?= currentTemperature("DE") then selectedTemperature > 40
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the DE")
      else
        stdout.println("Not sure where it might be warm")

    <?-
      Added ability to do a declaration before the control.
      The new variable is only visible in the current if/else blocks.
      Also note that the use of '<-' in a guard like this also mandates that the
      variable type has an 'is-set' (?) operator. So if the result of
      'selectedTemperature <- currentTemperature("US")' is un-set (i.e. has no meaning)
      this works in the same way as '?=', resulting in 'false' and so the if predicate resolves to false.
    -?>
    declarationInIf()
      stdout <- Stdout()
      when selectedTemperature <- currentTemperature("US") with selectedTemperature > 50
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the US")
      else when selectedTemperature ?= currentTemperature("US") with selectedTemperature < 50
        stdout.println("Temp of " + $selectedTemperature + " not too bad in the US")
      else if selectedTemperature := currentTemperature("GB") with selectedTemperature > 40
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the UK")
      else when selectedTemperature: currentTemperature("DE") then selectedTemperature > 40
        stdout.println("Temp of " + $selectedTemperature + " a little warm in the DE")
      else
        stdout.println("Not sure where it might be warm")

    kotlinLikeRangeCheck()
      ->
        value as Integer
        lowerBound as Integer
        upperBound as Integer

      stdout <- Stdout()

      isWithin <- value in lowerBound ... upperBound
      stdout.println(`Checking if ${value} is within a range of ${lowerBound} ... ${upperBound}: result is ${isWithin}`)

      isNotWithin <- value not in 16-2 ... upperBound-1

      stdout.println(`Checking if ${value} is NOT within a range of 16-2 ... ${upperBound - 1}: result is ${isNotWithin}`)

//EOF
