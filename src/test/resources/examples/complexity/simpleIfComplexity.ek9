#!ek9
<?-
  Test complexity calculator with just simple if/ternary and equality checks.
-?>
defines module simple.ifcomplexity

  <?-
    General tests that check the complexity of code calculations.
  -?>
  defines function

    getSomeIntegerValue()
      <- rtn <- 1

    //Just counts the exit and also the 'is-set' check.
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testSimpleFunctionComplexity": 2
    testSimpleFunctionComplexity()
      var <- 2
      assert var?

    //Counts exit, if and also the comparison or > and ==
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testSingleIfComplexity": 4
    testSingleIfComplexity()
      var <- 2

      if var > 1
        var++
        assert var == 3

    //Counts exit, if and also the comparison (even if pulled out to a variable)
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testSingleIfComplexityWithConditional": 4
    testSingleIfComplexityWithConditional()
      var <- 2

      conditional <- var > 1
      if conditional
        var++
        assert var == 3

    //Counts exit, if (plus the else if) and also the 'is-set'.
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testMultipleIfComplexityWithConditional": 7
    testMultipleIfComplexityWithConditional()
      -> var as Integer

      if var > 10
        var++
      else if var < -10 or var == 5
        var*=2

      assert var?

    //Counts exit, ternary and the 'is-set' check
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testTernary": 3
    testTernary()
      -> conditional as Boolean

      derived <- conditional <- "Something" else "Or Other"
      assert derived?

    //Counts exit, the matches and the 'is-set' check
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testMatches": 3
    testMatches()

      derived <- "Steve" matches /[S|s]te(?:ven?|phen)/
      assert derived?

    //Counts exit, the coalescing operator and the 'is-set' check
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testCoalescingEquality": 3
    testCoalescingEquality()
      v1 <- Integer()
      v2 <- 2

      derived <- v1 <? v2
      assert derived?

    //Counts exit, the if, the elvis operator and the 'is-set' check
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testElvis": 3
    testElvis()
      v1 <- Integer()
      v2 <- 2

      derived <- v1 ?: v2
      assert derived?

    //Counts exit, the if, the guard, the control and the 'is-set' check
    @Complexity: PRE_IR_CHECKS: FUNCTION: "testGuardedIfStatement": 5
    testGuardedIfStatement()

      var <- Integer()
      if var ?= getSomeIntegerValue() then var > 2
        var++

      assert var?
//EOF

