#!ek9
<?-
  Also checks that "mod", "rem", "abs", "sqrt", "close", "contains", "matches", "empty", "length" cannot
  be used as normal method names as they are reserved for operators.
-?>
defines module bad.classes.examples

  defines class

    C1
      @Error: SYMBOL_DEFINITION: INVALID_DEFAULT_CONSTRUCTOR
      default C1()
        -> arg0 as Float

      @Error: SYMBOL_DEFINITION: RETURN_VALUE_NOT_SUPPORTED
      default C1()
        -> arg0 as String
        <- rtn as String?

      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      default C1()
        someVar <- 1
        assert someVar?

      //Just a normal class method, but with an implementation
      someMethod1()
        -> arg0 as String
        <- rtn as String: arg0

      //A pure interface method, but as this is a class an error is expected
      @Error: SYMBOL_DEFINITION: NOT_ABSTRACT_AND_NO_BODY_PROVIDED
      someMethod2()
        -> arg0 as String
        <- rtn as String?

      //As above but this time abstract is explicit, as is required in classes
      //But the problem is that C1 is not open, so defining an abstract method is pointless
      //The could never be anything to extends C1 and provide an implementation of this.
      @Error: SYMBOL_DEFINITION: CANNOT_BE_ABSTRACT
      someMethod3() as abstract
        -> arg0 as String
        <- rtn as String?

      //Ah but this is an error because a body (return) has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod4() as abstract
        -> arg0 as String
        <- rtn as String: arg0

      //Again an error because a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod5() as abstract
        -> arg0 as String
        assert arg0?

      //Also an error because both a return and a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod6() as abstract
        -> arg0 as String
        <- rtn as String: arg0
        assert arg0?

      //Also an error because both a return and a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod7() as abstract
        -> arg0 as String
        <- rtn as String?
        assert arg0?
        rtn :=: arg0

      //Now as this is a class, we can use a dispatcher.
      anotherMethod() as dispatcher
        -> arg0 as String
        assert arg0?

    //New class which is open for extension.
    //But that does not mean that methods can be abstract.
    C2 as open
      someMethod1()
        -> arg0 as String
        <- rtn as String: arg0

      @Error: SYMBOL_DEFINITION: CANNOT_BE_ABSTRACT
      someMethod3() as abstract
        -> arg0 as String
        <- rtn as String?

    //Now check again, but with slight difference that this class is open to extension by being abstract
    C3 as abstract
      @Error: SYMBOL_DEFINITION: RETURN_VALUE_NOT_SUPPORTED
      default C3()
        -> arg0 as String
        <- rtn as String?

      @Error: SYMBOL_DEFINITION: INVALID_DEFAULT_CONSTRUCTOR
      default C3()
        -> arg0 as Date

      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      default C3()
        someVar <- 1
        assert someVar?

      //Just a normal class method, but with an implementation
      someMethod1B()
        -> arg0 as String
        <- rtn as String: arg0

      //A pure interface method, but as this is a class an error is expected
      @Error: SYMBOL_DEFINITION: NOT_ABSTRACT_AND_NO_BODY_PROVIDED
      someMethod2B()
        -> arg0 as String
        <- rtn as String?

      //As above but this time abstract is explicit, as is required in classes
      //So now this should be fine.
      someMethod3B() as abstract
        -> arg0 as String
        <- rtn as String?

      //Ah but this is an error because a body (return) has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod4B() as abstract
        -> arg0 as String
        <- rtn as String: arg0

      //Again an error because a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod5B() as abstract
        -> arg0 as String
        assert arg0?

      //Also an error because both a return and a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod6B() as abstract
        -> arg0 as String
        <- rtn as String: arg0
        assert arg0?

      //Also an error because both a return and a body has been provided.
      @Error: SYMBOL_DEFINITION: ABSTRACT_BUT_BODY_PROVIDED
      someMethod7B() as abstract
        -> arg0 as String
        <- rtn as String?
        assert arg0?
        rtn :=: arg0

      //Now as this is a class, we can use a dispatcher.
      anotherMethodB() as dispatcher
        -> arg0 as String
        assert arg0?

      //Just check the named operators can by use as names (not method by variable names)
      andMethod()
        -> and as String
        assert and?

      orMethod()
        -> or as String
        assert or?

      xorMethod()
        -> xor as String
        assert xor?

      modMethod()
        -> mod as String
        assert mod?

      remMethod()
        -> rem as String
        assert rem?

      absMethod()
        -> abs as String
        assert abs?

      sqrtMethod()
        -> sqrt as String
        assert sqrt?

      closeMethod()
        -> close as String
        assert close?

      containsMethod()
        -> contains as String
        assert contains?

      matchesMethod()
        -> matches as String
        assert matches?

      emptyMethod()
        -> empty as String
        assert empty?

      lengthMethod()
        -> length as String
        assert length?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      and
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      or
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      xor
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      mod
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      rem
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      abs
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      sqrt
        val <- 1
        assert val?

      //Try and declare a method with the name of an operator
      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      close
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      contains
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      matches
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      empty
        val <- 1
        assert val?

      @Error: SYMBOL_DEFINITION: OPERATOR_NAME_USED_AS_METHOD
      length
        val <- 1
        assert val?

//EOF