#!ek9
<?-
  Test both valid simple type inference on return values errors where the
  inference is too complex (i.e. attempt to move from just a declaration to an expression form).
-?>
defines module bad.inferred.returns

  defines record
    R1
      prop1 <- 12
      prop2 <- String()

      default R1() as pure

      R1() as pure
        -> value as String
        prop2 :=? value

  defines function

    validSimpleLiteralReturn()
      <- rtn <- 12

    validSimpleReturn()
      <- rtn <- Integer()

    validSimpleR1Return()
      <- rtn <- R1()

    validR1ConstructorReturn()
      <- rtn <- R1("Steve")

    //Which was nice
    validListOfStringReturn()
      <- rtn <- ["Steve", "Stephen", "Steven"]

    validDictOfIntegerStringReturn()
      <- rtn <- {1: "Steve", 2: "Stephen", 3: "Steven"}

    <?-
      This however is a complex expression.
    -?>
    invalidExpressionUse1()
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_MUST_BE_SIMPLE
      <- aBitComplex <- List("Steve").get(0)

    <?-
      Strangely so is this because '-' and '1' are an expression.
    -?>
    invalidExpressionUse2()
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_MUST_BE_SIMPLE
      <- aBitComplex <- List(-1)

    <?-
      Also this is considered too complex (at the moment).
      That's because it involves an expression. Now the simple cases could
      be dealt with. But if a parameterized Generic was used, the methods/operators
      would not yet have been expanded. This would mean that in some cases we could process
      expressions and in other we could not. So basically for consistency the EK9 compiler
      (at the moment) only allows constructors where the arguments are really simple.
    -?>
    invalidExpressionUse3()
      -> arg0 as String
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_MUST_BE_SIMPLE
      <- aBitComplex <- List(arg0 + "-Something")

    <?-
      Just to show that if an argument is used that cannot be resolved we get a reasonable error.
      This also means that the List cannot be parameterized (because we did not resolve the variable or its type).
    -?>
    invalidExpressionUse4()
      -> arg0 as String
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: NOT_RESOLVED
      <- aBitComplex <- List(nonSuch)

//EOF