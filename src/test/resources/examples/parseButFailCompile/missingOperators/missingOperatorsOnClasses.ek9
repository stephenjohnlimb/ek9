#!ek9
<?-
  Just checking class operators work correctly and can be resolved OK.
  But also looks to detect if it actually possible to implement the defaulted operators.
  Classes are slightly different, because properties are private, but if converting to JSON
  then they have to get flattened out, so if there is any default $$ operator and properties have same name
  we need to issue an error.
-?>
defines module bad.defaulted.classoperators

  defines function

    //Designed just to check all the default operators can be used.
    CheckC0DefaultOperators()

      //To be used in the tests
      val1 <- C0()
      val2 <- C0()

      //As prop1 in R0 is never set all these checks result in an unset value
      //But just trying to ensure that all the operators can be resolved!
      assert ~(val1 < val2)?
      assert ~(val1 <= val2)?
      assert ~(val1 > val2)?
      assert ~(val1 >= val2)?
      assert ~(val1 == val2)?
      assert ~(val1 <> val2)?
      assert ~(val1 <=> val2 == 0)?

      assert ~val1?
      assert ~($ val1)?
      assert ~($$ val1)?
      assert ~(#? val1)?

  defines class

    //Should not result in duplication or '==', because 'default operator' by itself should 'fill in the blanks'.
    C0
      prop1 <- String()
      prop2 <- List() of String

      //So the default implementation would use the '<=>' on the above properties
      //But it can only do that if the types have '<=>'.
      default operator ==

      //The default implementations will delegate to use the same/appropriate methods as on
      //each of the properties - take in in order of definition.
      default operator


    //Now lets check extending with defaulting, does the EK9 compiler does not issue errors
    //when it defaults in operators that are overrides.
    //This is different from the record test, it defines the to JSON operator.
    CBase1 as open
      prop1 <- String()
      prop2 <- Date()

      operator $$ as pure
        <- rtn as JSON: JSON()

      //Will use the appropriate operators on properties to implement.
      default operator

    //This is also different from the record version it defines the JSON operator
    //And also re-declares prop1 (as in a class it is private).
    CExtension1 extends CBase1
      prop1 <- Dimension()

      override operator $$ as pure
        <- rtn as JSON: JSON()

      //Will first use the super version of each method, then
      //will use the appropriate operators on properties to implement.
      default operator

    //This must create an error, because we are in effect asking the EK9 compiler
    //to generate the $$ implementation (among others), but the prop1 name would/may collide.
    //So EK9 developer must create operator manually as shown above.
    CExtension2 extends CBase1
      @Error: FULL_RESOLUTION: CANNOT_SUPPORT_TO_JSON_DUPLICATE_PROPERTY_FIELD
      prop1 <- Dimension()

      default operator

    SomeClass1
      prop1 <- Time()

      //But note - no operators. See how it is used later

    //Here we are stating we want the < operator.
    //The defaulting mechanism requires that <=> either be provided or also defaulted.
    SomeClass2
      prop1 <- Time()

      @Error: FULL_RESOLUTION: MISSING_OPERATOR_IN_THIS
      default operator <

    //Now the above will work because we've asked for <=>
    SomeClass3
      prop1 <- Time()

      default operator <

      default operator <=>

    //But you could have done this as well, i.e. coded it yourself
    SomeClass4
      prop1 <- Time()

      default operator <

      operator <=> as pure
        -> arg0 as SomeClass4
        <- rtn as Integer: prop1 <=> arg0.prop1

    //So while Ok in of itself, if extended and default operator is used
    //that extension needs specific super methods to be able to provide that default.
    MinimalBase1 as open
      prop1 <- String()

    //Here it is not possible to default operators because that defaulting depends on super
    //having the appropriate operators. There'll be a single error displayed here, but all
    //default operators will be checked, so if you fix one, you then see the next error.
    Invalid1 is MinimalBase1
      prop2 <- String()

      @Error: FULL_RESOLUTION: MISSING_OPERATOR_IN_SUPER
      default operator

    Invalid2 is MinimalBase1
      prop2 <- String()

      @Error: FULL_RESOLUTION: MISSING_OPERATOR_IN_SUPER
      default operator ?

    //And in this example, SomeClass1 does not have the appropriate operators.
    Invalid3
      prop1 <- SomeClass1()

      @Error: FULL_RESOLUTION: MISSING_OPERATOR_IN_PROPERTY_TYPE
      default operator

//EOF
