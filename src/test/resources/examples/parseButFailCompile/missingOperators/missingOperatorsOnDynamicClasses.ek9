#!ek9
<?-
  Checks that when operators are defined in a base or a trait and are then 'defaulted'
  the whole solution hangs together. Includes tests on dynamic classes.
-?>
defines module bad.overridden.classoperators

  defines function

    CheckC4Operator()
      c4 <- C4()

      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      assert c4?

      //So even though we cannot instantiate a 'C1' we can still continue to try and compile
      //Hence we can check for this method, so the operator $ is present on trait T1 and hence in C1
      result <- $c4
      assert result?

      json <- $$c4
      assert json?

      //The <=> operator has not be defined on C4 or T1
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      assert c4 <=> "Nothing" <> 0

      //Now pass a C4 in but as just a T1
      CheckT1Operator(c4)

    CheckT1Operator()
      -> arg0 as T1

      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      assert arg0?

      result <- $arg0
      assert result?

      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      json <- $$arg0

      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      assert json?

    CheckDynamic1Class()
      //There are tests for this already - but just highlight in this test context
      @Error: FULL_RESOLUTION: DYNAMIC_CLASS_MUST_IMPLEMENT_ABSTRACTS
      dynamic1 <- () with trait of T1 as class

    CheckDynamic2Class()
      //This is what is needed
      name <- "Steve"
      dynamic2 <- (name) with trait of T1 as class
        name()
          <- rtn as String: name
        default operator $

      result <- $dynamic2
      assert result?

      //Note that dynamic2 has a trait of T1 and so can be passed into this method
      CheckT1Operator(dynamic2)

      //There are also other tests that check this but just another in context example
      @Error: FULL_RESOLUTION: NOT_ACCESSIBLE
      failedCheckName <- dynamic2.name
      assert failedCheckName?

      //This is how it must be done, via tha accessor method.
      checkName <- dynamic2.name()
      assert checkName?

    CheckDynamic3Class()
      //Or you could have done this as well
      dynamic3 <- () with trait of T1 as class
        default operator

      result <- $dynamic3
      assert result?

      //Note that dynamic3 has a trait of T1 and so can be passed into this method
      CheckT1Operator(dynamic3)

  defines trait

    T1
      operator $ as pure abstract
        <- rtn as String?

  defines class

    //C1 has to be abstract because $ operator is abstract
    C1 with trait of T1 as abstract
      operator $$ as pure
        <- rtn as JSON: JSON()

    //This is caused by the trait T1 and its abstract operator $
    @Error: FULL_RESOLUTION: NOT_MARKED_ABSTRACT_BUT_IS_ABSTRACT
    C2 with trait of T1

      //So this is not abstract and so you may accidentally think C2 is not abstract.
      operator #? as pure
        <- rtn as Integer: 0

    C3 with trait of T1

      operator $$ as pure
        <- rtn as JSON: JSON()

      operator #? as pure
        <- rtn as Integer: 0

      //So have a go at implementing - but miss override key modifier by accident
      @Error: FULL_RESOLUTION: METHOD_OVERRIDES
      operator $ as pure
        <- rtn as String: String()

    C4 with trait of T1

      operator $$ as pure
        <- rtn as JSON: JSON()

      operator #? as pure
        <- rtn as Integer: 0

      //Finally get it right
      override operator $ as pure
        <- rtn as String: String()

    //Now we can define some concrete operator implementations.
    //But also override the $ operator from T1 - but with a default implementation
    C5 with trait of T1

      operator $$ as pure
        <- rtn as JSON: JSON()

      operator #? as pure
        <- rtn as Integer: 0

      default operator $

//EOF
