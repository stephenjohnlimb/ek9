#!ek9
<?-
  Test trying to constrain with the wrong or missing types.
-?>
defines module bad.generic.constraining.types

  defines constant
    NAME <- "Steve"

  defines type
    <?-
      American spelling but same functionality.
      But note they are separate types!
    -?>
    Color as Colour

    Limited as
      Value1,
      Value2

  defines function

    CheckFunction()
      -> arg0 as String
      <- rtn <- true

    AbstractFunction() as abstract
      -> arg0 as String
      <- rtn as Boolean?

  defines trait

    T1
      check()
        -> arg0 as String
        <- rtn <- true

    T2 with trait of T1
      override check()
        -> arg0 as String
        <- rtn <- false

  defines component
    Comp1 as open
      check()
        -> arg0 as String
        <- rtn <- true

    Comp2 extends Comp1
      override check()
        -> arg0 as String
        <- rtn <- false

  defines record
    R1 as open
      value1 <- true

    R2 extends R1
      value2 <- true

  defines text for "en"
    SomeText
      value()
        "A Value"

  defines class

    C0 as abstract
      check() as abstract
        -> arg0 as String
        <- rtn as Boolean?

    C1 is C0 as open
      override check()
        -> arg0 as String
        <- rtn <- true

    C2 extends C1
      override check()
        -> arg0 as String
        <- rtn <- false

    <?-
      Check that it is not possible to constrain by a function.
    -?>
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: CONSTRAINED_FUNCTIONS_NOT_SUPPORTED
    BadGeneric1 of type T constrain by CheckFunction

      default BadGeneric1()

      BadGeneric1()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: CONSTRAINED_FUNCTIONS_NOT_SUPPORTED
    BadGeneric2 of type T constrain by AbstractFunction

      default BadGeneric2()

      BadGeneric2()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_NOT_RESOLVED
    BadGeneric3 of type T constrain by NAME

      default BadGeneric3()

      BadGeneric3()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_NOT_RESOLVED
    BadGeneric4 of type T constrain by NoSuchType

      default BadGeneric4()

      BadGeneric4()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: CONSTRAINED_FUNCTIONS_NOT_SUPPORTED
    BadGeneric5 of type T constrain by SomeText
      default BadGeneric5()

      BadGeneric5()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    <?-
      Check it is possible to constrain by a trait
    -?>
    OKGeneric1 of type T constrain by T1
      default OKGeneric1()

      OKGeneric1()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    <?-
      Check it is possible to constrain by a component
    -?>
    OKGeneric2 of type T constrain by Comp1
      default OKGeneric2()

      OKGeneric2()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    <?-
      Check it is possible to constrain by a record
    -?>
    OKGeneric3 of type T constrain by R1
      default OKGeneric3()

      OKGeneric3()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    <?-
      Check it is possible to constrain by a class
    -?>
    OKGeneric4 of type T constrain by C0

      default OKGeneric4()

      OKGeneric4()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    <?-
      Check it is possible to constrain by a 'type'
    -?>
    OKGeneric5 of type T constrain by Color
      default OKGeneric5()

      OKGeneric5()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    OKGeneric6 of type T constrain by Limited
      default OKGeneric6()

      OKGeneric6()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as Boolean: true

    OKGeneric7 of type T constrain by Limited
      default OKGeneric7()

      OKGeneric7()
        -> arg0 as T
        assert arg0?

      check()
        -> arg0 as T
        <- rtn as T: T(Limited.Value1)

//EOF

