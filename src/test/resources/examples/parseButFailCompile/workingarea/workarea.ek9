#!ek9
<?-
  Still have generics issues.

-?>
defines module just.workspace

  defines trait
    T1
      someMethod()
        <- rtn <- 1

  defines class
    JustT1 with trait of T1

    <?-
      Class with properties defined as uninitialised.
      But then initialised in a constructor (in a simple way)
    -?>
    AClass with trait of T1 by t1
      someProperty as String?
      t1 as T1?

      default private AClass()

      AClass()
        ->
          arg1 as String
          arg2 as T1
        someProperty: arg1
        this.t1: arg2

      operator $ as pure
        <- rtn as String: `Value is ${someProperty}`

      operator ? as pure
        <- rtn as Boolean: someProperty?

  defines function
    JustPass()
      a <- AClass("Initial Value", JustT1())
      assert a?

    AGenericsTest() as pure
      //Should be able to create this as the List() constructor is marked pure.
      aClasses as List of AClass: List() of AClass
      assert aClasses?

  <!-

    SimpleStreamCatMap4()
      collector <- StringCollector()
      //Check if the Optional has an Iterator of type Integer so it can be streamed
      //Use a function that extends an abstract function.
      //TODO fix big error in generics processing.
      cat Optional(1) | map with IntegerToString > collector
      assert collector?

  //Sort out the normal statements and then do these expressions, or maybe add a separate test file
  defines function
    SimpleStreamExpression()
      //here are some durations to sum up (collect) 2 days, 1 week and 2 hours.
      collectedDurations <- cat [P2D, P1W, PT2H] | collect as DurationCollector
      assert collectedDurations.duration()?

    BrokenExpressionTerminator1()
      //This is currently not quite right, DurationCollector cannot accept integers
      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      collectedDurations <- cat [1, 2, 3] | collect as DurationCollector
      assert collectedDurations?
  -!>

//EOF

