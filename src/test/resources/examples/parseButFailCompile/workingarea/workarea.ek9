#!ek9
<?-
  In this case just checking text methods can be created.
-?>
defines module bad.componentcalls.examples1

  defines component

    C1
      default private C1()

      C1()
        -> arg0 as String
        this()
        assert arg0?

      someMethod()
        -> arg0 as String
        assert arg0?

      operator == as pure
        -> arg0 as C1
        <- rtn <- false

      operator <> as pure
        -> arg0 as String
        <- rtn <- true

  defines function

    TestValidC1Creation()
      c1 <- C1("Steve")
      assert c1?

    TestValidC1MethodCall()
      c1 <- C1("Steve")
      c1.someMethod("James")

    TestValidC1OperatorCall()
      c1A <- C1("Steve")
      c1B <- C1("Stephen")

      assert not c1A.==(c1B)
      assert c1A.<>("Joker")

    TestInvalidC1ViaPrivateConstructor()
      @Error: FULL_RESOLUTION: NOT_ACCESSIBLE
      invalid1 <- C1()
      assert invalid1?

    TestInvalidC1MethodCall()
      c1 <- C1("Steve")
      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      c1.someMethod(2)

    TestInvalidC1OperatorCall()
      c1A <- C1("Steve")
      c1B <- C1("Stephen")

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      assert not c1A.==("Joker")

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      assert c1A.<>(c1B)

//EOF