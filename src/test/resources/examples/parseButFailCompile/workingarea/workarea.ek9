#!ek9
<?-

  NEXT TODO revisit assignment in pure.
  The pure calling none pure.
-?>
defines module just.workspace

  defines trait
    T1
      simpleMethod() as pure
        -> arg0 as String
        <- rtn as Boolean :=? arg0? //added :=? for consistency, rtn would clearly be unset and so assigned.

      failingMethod() as pure
        -> arg0 as String
        //Note this does not fail, even though it looks and is a direct assignment in pure.
        <- rtn as Boolean: arg0?

        //So this will never have any effect!
        rtn :=? false

      operator ? as pure
        <- rtn <- true

  defines class
    C1
      prop1 as String?
      prop2 <- "Steve"

      @Error: FULL_RESOLUTION: MIX_OF_PURE_AND_NOT_PURE_CONSTRUCTORS
      default C1()

      @Error: FULL_RESOLUTION: MIX_OF_PURE_AND_NOT_PURE_CONSTRUCTORS
      C1()
        -> arg0 as String
        prop1 :=? arg0

      C1() as pure
        ->
          arg0 as String
          arg1 as String

        prop1 :=? arg0

        //So if a constructor is marked as pure use the :=? to assign
        //But this means you cannot have default values really.
        //Well you can but use multiple constructors
        @Error: FULL_RESOLUTION: NO_PURE_REASSIGNMENT
        prop2 := arg1

      operator ? as pure
        <- rtn as Boolean: prop1? and prop2?

    <?-
      An example of pure constructors, by their very nature they have to mutate the state
      to initialise it. So this is the compromise.
      Create your properties in an unset form and then use the ':=?' operator to conditionally
      set them.
      Use multiple constructors, some with fixed values to provide defaults if you need them.
    -?>
    C2
      prop1 <- String()
      prop2 <- Integer()

      C2() as pure
        ->
          arg0 as String
          arg1 as Integer
        prop1 :=? arg0
        prop2 :=? arg1

      C2() as pure
        -> arg0 as String
        this(arg0, 21)

      operator ? as pure
        <- rtn as Boolean: prop1? and prop2?

    <?-
      This is an example of a non-pure class and will be used to check access from pure and non pure contexts.
    -?>
    C3
      prop1 <- String()
      prop2 <- Integer()

      C3()
        ->
          arg0 as String
          arg1 as Integer
        prop1 :=? arg0
        prop2 :=? arg1

      C3()
        -> arg0 as String
        this(arg0, 21)

      operator ? as pure
        <- rtn as Boolean: prop1? and prop2?

  defines function

    UnsetFunctionButSetInBody() as pure
      -> arg0 as String
      <- rtn as Boolean? //In pure this would be the norm, then assign based on logic

      var <- "Steve"

      //So this allows for this sort of code (even in pure, but only with the return)
      if var == "Steve"
        rtn :=? false
      else
        rtn :=? true

      //But this would now be pointless, i.e. trying to set it once assigned
      rtn :=? Boolean()

      //And you cannot do this
      @Error: FULL_RESOLUTION: NO_PURE_REASSIGNMENT
      rtn: true

    UnsetFunctionAndNeverSet() as pure
      -> arg0 as String
      @Error: FULL_RESOLUTION: NOT_INITIALISED_BEFORE_USE
      <- rtn as Boolean? //In pure this would be the norm, then assign based on logic

      var <- "Steve"
      assert var?

      //But what about the unset rtn? You'd get that error above NOT_INITIALISED_BEFORE_USE.
      //The idea is to cater for unset and even uninitialised, but ensure those cannot escape
      //Below is a test that shows they errors you would get

    CheckCallWithUninitialised()
      @Error: FULL_RESOLUTION: NOT_INITIALISED_BEFORE_USE
      someVar as String?

      @Error: FULL_RESOLUTION: USED_BEFORE_INITIALISED
      result <- UnsetFunctionButSetInBody(someVar)
      assert result?

    FailingFunctionOnAssignment() as pure
      <- expectFailure as String: "Should Fail"

    SomePureFunction as pure abstract
      -> arg0 as Integer
      <- rtn as String?

    SomeNonPureFunction as abstract
      -> arg0 as Integer
      <- rtn as String?

    HigherPureFunctionOne() as pure
      <- rtn as SomePureFunction?
      rtn :=? () is SomePureFunction as pure function (rtn :=? "Steve")

    HigherPureFunctionTwo() as pure
      <- rtn as SomePureFunction?
      @Error: FULL_RESOLUTION: SUPER_IS_PURE
      rtn :=? () is SomePureFunction as function (rtn :=? "Steve")

    HigherPureFunctionThree() as pure
      <- rtn as SomeNonPureFunction?
      @Error: FULL_RESOLUTION: SUPER_IS_NOT_PURE
      rtn :=? () is SomeNonPureFunction as pure function (rtn :=? "Steve")

    HigherPureFunctionFour() as pure
      <- rtn as SomeNonPureFunction?
      @Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
      rtn :=? () is SomeNonPureFunction as function (rtn :=? "Steve")

    HigherNonPureFunctionOne()
      <- rtn as SomePureFunction?
      rtn :=? () is SomePureFunction as pure function (rtn :=? "Steve")

    HigherNonPureFunctionTwo()
      <- rtn as SomePureFunction?
      @Error: FULL_RESOLUTION: SUPER_IS_PURE
      rtn :=? () is SomePureFunction as function (rtn :=? "Steve")

    HigherNonPureFunctionThree()
      <- rtn as SomeNonPureFunction?
      @Error: FULL_RESOLUTION: SUPER_IS_NOT_PURE
      rtn :=? () is SomeNonPureFunction as pure function (rtn :=? "Steve")

    HigherNonPureFunctionFour()
      <- rtn as SomeNonPureFunction?
      rtn :=? () is SomeNonPureFunction as function (rtn :=? "Steve")

    JustFail()
      @Error: FULL_RESOLUTION: NOT_RESOLVED
      assert failure

    CheckDynamicClassInNonPure()
      dynamicClass <- () with trait of T1 as class
        anotherMethod()
          <- rtn <- true

      result1 <- dynamicClass.simpleMethod("TEST")
      result2 <- dynamicClass.anotherMethod()
      assert result1? and result2?

    CheckDynamicClassInPure() as pure
      dynamicClass <- () with trait of T1 as class
        anotherMethod()
          <- rtn <- true

      //This should be OK because its pure
      result1 <- dynamicClass.simpleMethod("TEST")

      //But this is not OK a pure method, needs more work
      //@Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
      result2 <- dynamicClass.anotherMethod()

      assert result1? and result2?

    CheckPureConstructorsInNonPure()
      c2A <- C2()
      assert c2A?

      c2B <- C2("Steve")
      assert c2B?

      c2C <- C2("Steve", 33)
      assert c2C?

    CheckPureConstructorsInPure() as pure
      c2A <- C2()
      assert c2A?

      c2B <- C2("Steve")
      assert c2B?

      c2C <- C2("Steve", 33)
      assert c2C?

    CheckNonPureConstructorsInNonPure()
      c3A <- C3()
      assert c3A?

      c3B <- C3("Steve")
      assert c3B?

      c3C <- C3("Steve", 33)
      assert c3C?

    CheckNonPureConstructorsInPure() as pure
      @Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
      c3A <- C3()
      assert c3A?

      @Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
      c3B <- C3("Steve")
      assert c3B?

      @Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
      c3C <- C3("Steve", 33)
      assert c3C?

    ReassignmentInPure() as pure
      -> arg0 as String
      //We do allow a null check reassignment - even in pure
      arg0 :=? "Stephen"

      var1 <- String()

      //This sort of reassignment is allowed and would work as var1 is unset
      var1 :=? "Steve"

      var2 <- "Ted"

      //While you can express this, it would not alter the variable because it is actually set
      //But you won;t get a compiler warning.
      var2 :=? "Bill"

      assert var1? and var2?

    //While not a pure thing, it shows you cannot directly just reassign to an incoming parameter.
    NotAllowedDirectReassignmentOfArgument1()
      -> arg0 as Integer
      @Error: FULL_RESOLUTION: NO_INCOMING_ARGUMENT_REASSIGNMENT
      arg0: 21

    //While not a pure thing, it shows you cannot directly just reassign to an incoming parameter.
    NotAllowedDirectReassignmentOfArgument2() as pure
      -> arg0 as Integer
      @Error: FULL_RESOLUTION: NO_INCOMING_ARGUMENT_REASSIGNMENT
      arg0: 21

    NotAllowedDirectReassignmentOfVariableInPure() as pure
      var1 <- "Steve"

      //This is no1 allowed in pure (any of the direct assignments)
      //But :=? is allowed see tests above
      @Error: FULL_RESOLUTION: NO_PURE_REASSIGNMENT
      var1: "Stephen"

      @Error: FULL_RESOLUTION: NO_PURE_REASSIGNMENT
      var1 = "Stephen"

      @Error: FULL_RESOLUTION: NO_PURE_REASSIGNMENT
      var1 := "Stephen"

      assert var1?
//EOF