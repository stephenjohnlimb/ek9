#!ek9
<?-
  This try/catch/finally is very versatile and so there are quite a few tests.
  test preflow, argument and returns. Also experimenting with try/function wording.
  Maybe it's a bit too versatile. You can make a try/catch look very much like
  a sort of inline scoped function. Which is actually quite nice - but a bit of a surprise.
-?>
defines module just.workspace

  defines class

    <?-
      Just used to ensure that exception checking can work with classes that extend Exception.
    -?>
    BespokeException is Exception
      default BespokeException()

      BespokeException()
        -> arg0 as String
        super(arg0)

    //Note how these values are left unset
    //Then use :=? in a pure context.
    //So strictly speaking close as pure it not 'totally pure' - it has a side effect.
    //In this case it is accepted that going from 'un-set' to a specific value is acceptable
    //even in 'pure'.
    //Note that the idea of open/close is for resources like file handles of tcp sockets.
    //It is not intended for freeing up memory or anything like that.
    SomeResource
      resourceName as String: String()
      opened as Boolean: Boolean()
      closed as Boolean: Boolean()

      <?-
        Stop default construction.
      -?>
      default private SomeResource() as pure

      SomeResource() as pure
        -> arg0 String
        resourceName :=? arg0

      getValue()
        <- rtn <- "Just a fixed value"

      <?-
        Open this conceptual resource.
      -?>
      operator open as pure
        <- rtn as SomeResource: this
        opened :=? true

      <?-
        Open this conceptual resource.
      -?>
      operator close as pure
        closed :=? true

      operator ? as pure
        <- rtn as Boolean: opened? and opened and not (closed? and closed)

  defines function

    getSomeString() as pure
      <- rtn <- "Fixed Value"

    getValueFunction() as pure
      <- rtn <- 22

    exceptionFunction()
      <- rtn <- 22
      if rtn == 22
        throw Exception("An Exception being thrown")

    anotherExceptionFunction()
      <- rtn <- 22
      if rtn == 22
        toThrow <- Exception("An Exception being thrown")
        throw toThrow

    bespokeExceptionFunction()
      <- rtn <- 22
      if rtn == 22
        throw BespokeException("A Bespoke Exception being thrown")

    <?-
      Demonstrates trying to throw a class that is not an Exception or derives from Exception.
    -?>
    invalidExceptionFunction1()
      <- rtn <- 22
      if rtn == 22
        @Error: FULL_RESOLUTION: TYPE_MUST_EXTEND_EXCEPTION
        throw String("An Exception being thrown")

    <?-
      As above but the exception is created and held by an identifierReference.
    -?>
    invalidExceptionFunction2()
      <- rtn <- 22
      if rtn == 22
        toThrow <- String("An Exception being thrown")
        @Error: FULL_RESOLUTION: TYPE_MUST_EXTEND_EXCEPTION
        throw toThrow

    <?-
      The most simple form, but provides virtually no value other than
      enabling a sub scope for variables. But might be quite nice to use.
      Note the alternate syntax of using 'function', see later where a return value is used.
    -?>
    SimpleTry()
      someValue <- 3
      try
        value <- exceptionFunction()
        assert value?
        someValue: value

      function
        value <- exceptionFunction()
        assert value?
        someValue: value

      assert someValue?

    <?-
      So this sort of combines an assignment to 'someValue' and if that results in
      'someValue' being set (i.e. not un-set) then the rest of the try block is processed.
      But the nice thing here is that the scope of the try block enables local declarations that
      go out of scope. This is more useful with resources - see later.
    -?>
    SimpleTryWithPreFlowGuard()
      someValue as Integer?

      try someValue ?= getValueFunction()
        if someValue > 20
          value <- exceptionFunction()
          assert value?

      assert someValue?

    <?-
      Not that much value here but see later when returning values.
    -?>
    SimpleTryWithPreFlowDeclaration()
      someValue as Integer?

      try tempValue <- getValueFunction()
        if tempValue > 20
          someValue: exceptionFunction()

      assert someValue?

    <?-
      The next most simple form of a try/catch - try/handle.
    -?>
    SimpleTryCatch()
      someValue <- 3
      try
        value <- exceptionFunction()
        assert value?
        someValue: value
      catch
        -> ex as Exception
        assert ex?
        someValue: -1

      assert someValue?

    <?-
      Do not support multiple arguments to be caught.
    -?>
    BadCatchMultipleArguments()
      someValue <- 3
      try
        value <- exceptionFunction()
        assert value?
        someValue: value
      catch
        @Error: FULL_RESOLUTION: SINGLE_EXCEPTION_ONLY
        ->
          ex1 as BespokeException
          ex2 as Exception
        assert ex1? and ex2?
        someValue: -1

      assert someValue?

    <?-
      Need to ensure that a Catch type actually extends and Exception.
      So it is an error if the type of the variable being caught does not extend Exception.
    -?>
    BadCatchType()
      someValue <- 3
      try
        value <- exceptionFunction()
        assert value?
        someValue: value
      catch
        @Error: FULL_RESOLUTION: TYPE_MUST_EXTEND_EXCEPTION
        -> ex as String

        assert ex?
        someValue: -1

      assert someValue?

    <?-
      Just try and finally (without a catch/handle).
    -?>
    SimpleTryFinally()
      someValue <- 3
      try
        value <- exceptionFunction()
        someValue: value
      finally
        someValue *= 9

      assert someValue?

    <?-
      The full set of possible blocks try/catch/finally (catch or handle can be used)
    -?>
    SimpleTryCatchFinally()
      someValue <- 3
      try
        value <- exceptionFunction()
        someValue: value
      handle
        -> ex as Exception
        assert ex?
        someValue: -1
      finally
        someValue *= 9

      assert someValue?

    <?-
      A simple form but with a variable declared within the try area.
      So this is more interesting, now theResource is created and then when it goes
      out of scope the 'close' operator is called on theResource.
      Now you can use the keyword 'function' or 'try' if you wish.
    -?>
    SimpleTryWithDeclaration()
      someValue <- String()
      function
        -> theResource <- SomeResource("resource1").open()
        value <- theResource.getValue()
        assert value?
        someValue: value

      assert someValue?

    <?-
      This enables a small block of code to be used line a sort of inline function.
      This is because it has a defined scope and a return value.
      So in some ways, it's a nice way to create a small self contained
      inline-function. Hence we can use 'function' rather than 'try' if we wish.
    -?>
    SimpleTryWithReturn()
      result <- function
        <- rtn as String?
        value <- "Steve"
        rtn: value

      assert result?

    <?-
      Declare a resource (that has close operator), this gets called when the try/function scope body ends.
    -?>
    SimpleTryWithDeclarationAndReturn1()
      someValue <- String()
      result <- function
        -> theResource <- SomeResource("resource1").open()
        <- rtn as String?
        rtn: theResource.getValue()
        assert rtn?
        someValue: rtn

      assert someValue? and result?

    <?-
      Some terse syntax here.
      Within a try/function create a closable resource, use it to get the specific value,
      then as that 'theResource' goes out of scope at the end of the try/function its 'close'
      operator is called (behind the scenes).
    -?>
    SimpleTryWithDeclarationAndReturn2()

      //So in an exception is thrown then rtn is moot as is result.
      result <- function
        -> theResource <- SomeResource("resource1").open()
        <- rtn as String: theResource.getValue()

      assert result?

    SimpleTryCatchWithDeclarationAndReturn4()

      result <- function
        -> theResource <- SomeResource("resource1").open()
        <- rtn as String: theResource.getValue()
      handle
        -> ex as Exception
        assert ex?
        //So exception consumed and did set rtn.
        rtn: "Failed"

      assert result?

    SimpleTryCatchWithDeclarationAndReturn5()

      result <- function
        -> theResource <- SomeResource("resource1").open()
        <- rtn as String: theResource.getValue()
      finally
        rtn :=? "Failed"

      assert result?

    <?-
      It is possible to have multiple 'resource' objects opened and closed at end of scope.
    -?>
    SimpleTryCatchWithDeclarationAndReturn6()

      result <- function
        ->
          resource1 <- SomeResource("resource1").open()
          resource2 <- SomeResource("resource2").open()
        <-
          rtn as String: `${resource1.getValue()} ${resource2.getValue()}`
      handle
        -> ex as Exception
        assert ex?
        //So exception consumed and did set rtn.
        rtn: "Failed"
        //Demonstrate this resource opened are available here in the catch.
        assert resource1?
      finally
        rtn: String()
        //This would assign the value if it we unset, i.e if theResource.getValue()
        //returned an unset value.
        rtn :=? "Also Failed"
        //Demonstrate this resource opened are available here in the finally.
        assert resource1? and resource2?

      assert result?

    <?-
      This demonstrates and guard assignment - that only if the 'someValue ?= getSomeString()' results in
      'someValue' being set, executes the rest of the main block.
      That main block consists of accepting and argument that 'opens' a resource (hence it will get auto-closed at end of scope).
      Then the try/function has a returning value, that uses the resource to get a value.
      Any exceptions fly back - but if successful rtn is set and the opened 'SomeResource' is now closed.
    -?>
    SimpleTryCatchWithDeclarationGuardReturn()
      someValue as String?

      result <- function someValue ?= getSomeString()
        -> theResource <- SomeResource(someValue).open()
        <- rtn as String: theResource.getValue()

      assert result?

    <?-
      In this situation a new variable is declared and initialised.
      It is then used in the creation and opening of a new 'closable' resource.
      That resource and the new variable are then used to populate the return value.
      Any exceptions just fly back, the the opened resource is always closed.
      Quite nice in three lines of code.
    -?>
    SimpleTryCatchWithDeclarationNewVariableAndReturn()

      result <- function someValue <- getSomeString()
        -> theResource <- SomeResource(someValue).open()
        <- rtn as String: `${theResource.getValue()} - ${someValue}`

      assert result?

//EOF

