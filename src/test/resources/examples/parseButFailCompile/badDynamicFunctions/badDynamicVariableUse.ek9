#!ek9
<?-
  Some fairly gnarly compositions in here.
  Dynamic variable capture, named parameters, single line dynamic functions.
  Also checking for partial naming of parameters.
  All being composed.
-?>
defines module bad.function.use

  defines trait

    LenValidator
      validateLength() as pure abstract
        -> p as String
        <- r as Boolean?

  defines function

    aTestFunction()
      ->
        param1 as String
        param2 as String
      <-
        rtn as String: `${param1} and ${param2}`

    discriminator() as abstract
      -> s as String
      <- rtn as Boolean?

    minValue() as pure
      <- rtn as Float: 9

  defines program

    <?-
      First a valid example of what is allowable.
    -?>
    ValidExample1()
      min <- 9
      max <- 40

      gt <- (min) is discriminator as function
        rtn: length s > min

      lt <- (max) is discriminator
        rtn: length s < max

      val1 <- "Some Value"
      assert gt(val1) and lt(val1)

    <?-
      Same code, still valid using named parameters.
      But now calling a function to get the min value.
      Also using one line dynamic function implementations.
      Showing one being pure and the other just a function.
    -?>
    ValidExample2()

      gt <- (min: minValue()) is discriminator pure (rtn: length s > min)
      lt <- (max: 40) is discriminator as (rtn: length s < max)

      val1 <- "Some Value"
      assert gt(val1) and lt(val1)

    ValidExample3()
      gt <- (min: minValue()) is discriminator pure (rtn: length s > min)
      lt <- (max: 40) is discriminator as (rtn: length s < max)

      //Lets try a valid dynamic variable capture with a class
      lenValidator <- (lt, gt) with trait of LenValidator as class
        override validateLength()
          -> p as String
          <- r as Boolean: false
          if p?
            r := gt(p) and lt(p)

      val1 <- "Some Value"
      assert lenValidator.validateLength(val1)

    ValidExample4()
      //Some more complex inline stuff, but named, so should be ok
      lenValidator <- (
        lt: (min: minValue()) is discriminator pure (rtn: length s > min),
        gt: (max: 40) is discriminator as (rtn: length s < max)
        ) trait of LenValidator as class
        override validateLength()
          -> p as String
          <- r as Boolean: false
          if p?
            r := gt(p) and lt(p)

      assert lenValidator.validateLength(val1)

    <?-
      This example is not valid, the dynamic variable capture need a 'name'
      for the variable it will use internally. Neither of these below provide that.
      The code will parse, but rules mean that we have to reject this code.
    -?>
    InvalidExample1()

      //minValue call, so not just an identifier and so must be named.
      @Error: SYMBOL_DEFINITION: CAPTURED_VARIABLE_MUST_BE_NAMED
      gt <- (minValue()) is discriminator pure (rtn: length s > min)
      //a literal and needs to be named.
      @Error: SYMBOL_DEFINITION: CAPTURED_VARIABLE_MUST_BE_NAMED
      lt <- (40) is discriminator as (rtn: length s < max)

      val1 <- "Some Value"
      assert gt(val1) and lt(val1)

    InvalidExample2()

      @Error: SYMBOL_DEFINITION: EITHER_ALL_PARAMETERS_NAMED_OR_NONE
      lenValidator <- (
        //This is named so this is OK
        lt: (max: 40) is discriminator as (rtn: length s < max),
        //Not named so not OK
        @Error: SYMBOL_DEFINITION: CAPTURED_VARIABLE_MUST_BE_NAMED
        (min: minValue()) is discriminator pure (rtn: length s > min)
        ) with trait of LenValidator as class
        override validateLength()
          -> p as String
          <- r as Boolean: false
          if p?
            r := gt(p) and lt(p)

      assert lenValidator.validateLength(val1)

    InvalidExample3()

      lt <- (max: 40) is discriminator as (rtn: length s < max)

      lenValidator <- (
        //So accidentally duplicate the names.
        lessThan: (max: 40) is discriminator as (rtn: length s < max),
        //Named, but there is a variable of that name, so this is a duplicate within this dynamic function
        @Error: SYMBOL_DEFINITION: DUPLICATE_VARIABLE_IN_CAPTURE
        lessThan: lt
        ) with trait of LenValidator as class
        override validateLength()
          -> p as String
          <- r as Boolean: false
          if p?
            r := gt(p) and lessThan(p)

      assert lenValidator.validateLength(val1)

    InvalidExample4()
      gt <- (min: minValue()) is discriminator pure (rtn: length s > min)
      lt <- (max: 40) is discriminator as (rtn: length s < max)

      //Only name one named parameter, EK9 mandates either none named or all named.
      //This is to drive consistency
      @Error: SYMBOL_DEFINITION: EITHER_ALL_PARAMETERS_NAMED_OR_NONE
      lenValidator <- (lessThan: lt, gt) with trait of LenValidator as class
        override validateLength()
          -> p as String
          <- r as Boolean: false
          if p?
            r := gt(p) and lessThan(p)

      val1 <- "Some Value"
      assert lenValidator.validateLength(val1)

    InvalidExample5()
      //This is OK
      resultOK <- aTestFunction("this", "that")

      //Invalid either both or no parameters should be named.
      @Error: SYMBOL_DEFINITION: EITHER_ALL_PARAMETERS_NAMED_OR_NONE
      notOK <- aTestFunction(param1: "this", "that")
//EOF