#!ek9
<?-
  Examples of uninitialised variables or returns that are not initialised in:
  while, do/while.
-?>
defines module badwhile.initialisations

  defines function

    getValueFunction() as pure
      <- rtn <- 22

    <?-
      As this while uses a conditional value 'conditionToContinue' there is no
      guarantee it will be true, it might be false or it might even be 'unset'.
      So in this case, there is no knowing if 'checkValue' is true/false/unset.
      Hence if it was not true, 'someUnsetVariable' would never be initialised.
    -?>
    WhileLoopStatement()
      -> checkValue as Boolean
      //Not allowed to directly reassign an incoming value, so make instance and use that initial value
      conditionToContinue <- Boolean(checkValue)
      total <- 0
      someUnsetVariable as Integer?

      while conditionToContinue
        conditionToContinue: total < 11
        someUnsetVariable: total++

      assert total?

      @Error: PRE_IR_CHECKS: USED_BEFORE_INITIALISED
      assert someUnsetVariable?

    <?-
      Again as this is a while loop, there is no guarantee it will run through
      so someUnsetVariable may actually remain uninitialised.
    -?>
    WhileLoopExpression1()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      someUnsetVariable as Integer?

      result <- while conditionToContinue
        <- total <- 0
        conditionToContinue: total < 11
        someUnsetVariable: total++

      assert result?

      @Error: PRE_IR_CHECKS: USED_BEFORE_INITIALISED
      assert someUnsetVariable?


    <?-
      In this scenario, the return 'total' is not initialised at declaration.
      In fact it never gets set in the loop and hence always remains un-initialised.
    -?>
    WhileLoopExpression2()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)

      result <- while conditionToContinue
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- total as Integer?
        someUnrelatedValue <- 0
        conditionToContinue: someUnrelatedValue < 11
        if conditionToContinue
          total: someUnrelatedValue
        //But forget to set total in any other case

      assert result?

    WhileLoopExpression4()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      someVariable <- 1

      result <- while conditionToContinue
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- total as Integer?
        conditionToContinue: someVariable < 11
        total: someVariable++

      assert result?

    <?-
      This time the loop is traversed at least once (because it is a do while, rather than a while).
      Hence 'someUnsetVariable' will now be initialised first time through.
      Note as we're really dealing with Objects here 'someUnsetVariable' could just have been
      assigned to point to 'total'. 'someUnsetVariable as Integer: total' - then as total incremented the
      same underlying object would also have that value.
    -?>
    DoWhileLoopStatement()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      total <- 0
      someUnsetVariable as Integer?

      do
        conditionToContinue: total++ < 10
        someUnsetVariable: total
      while conditionToContinue

      assert total?
      assert someUnsetVariable?

    DoWhileLoopExpression1()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      someUnsetVariable as Integer?

      result <- do
        <- total <- 0
        conditionToContinue: total++ < 10
        someUnsetVariable: total
      while conditionToContinue

      assert result?
      assert someUnsetVariable?

    <?-
      The return 'total' is declared as uninitialised and is never initialised.
    -?>
    DoWhileLoopExpression2()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      someUnsetVariable as Integer?

      result <- do
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- total as Integer?
        someUnrelatedValue <- 0
        conditionToContinue: someUnrelatedValue < 11
        someUnsetVariable: someUnrelatedValue++
        //Forget to set total

      while conditionToContinue

      assert result?
      assert someUnsetVariable?

//EOF

