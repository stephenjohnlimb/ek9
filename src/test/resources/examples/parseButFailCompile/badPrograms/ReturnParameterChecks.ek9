#!ek9
<?-
  Checks the return values of programs are only Integer type.
  Also checks that only simple types can be returned when used with short hand
  '<- rtn <- value', this means if we can resolve a type in phase 1 we're OK.
  This is basically used as the exit code of the application.
  Any visual output for console type application has to use Stdout or Stderr.
-?>
defines module bad.program.return

  defines record
    ATestRecord
      first <- "A"
      second <- 9

  defines program

    //Failure 1 - cannot return anything other than an Integer
    BadReturnType1()
      @Error: SYMBOL_DEFINITION: PROGRAM_CAN_ONLY_RETURN_INTEGER
      <- rtn as Float: 0.9
      //Just some body to stop any other compiler errors
      v <- "Steve"
      assert v?

    //Failure 2 - but value not set on
    BadReturnType2()
      @Error: SYMBOL_DEFINITION: PROGRAM_CAN_ONLY_RETURN_INTEGER
      <- rtn as Float?
      rtn: 5.6

    //Failure 3 - simple type inference - but still not allowed type
    BadReturnType3()
      @Error: SYMBOL_DEFINITION: PROGRAM_CAN_ONLY_RETURN_INTEGER
      <- rtn <- false
      //Just some body to stop any other compiler errors
      v <- "Steve"
      assert v?

    //Failure 4 - a specific developer created type
    BadReturnType4()
      @Error: SYMBOL_DEFINITION: PROGRAM_CAN_ONLY_RETURN_INTEGER
      <- rtn as ATestRecord?
      //Just some body to stop any other compiler errors
      v <- "Steve"
      assert v?

    ValidProgramNoReturn()
      v <- "Steve"
      assert v?

    ValidProgramIntegerReturn1()
      <- rtn as Integer: 0
      //Just some body to stop any other compiler errors
      v <- "Steve"
      assert v?

    //Valid with type inference and shorthand return notation.
    ValidProgramIntegerReturn2()
      <- rtn <- 0
      //Just some body to stop any other compiler errors
      v <- "Steve"
      assert v?

  defines function

    validIntegerReturn()
      <- rtn <- 1

    validFloatReturn()
      <- rtn <- 4.56

    validTimeReturn()
      <- rtn <- 12:23:15

    validDateReturn()
      <- rtn <- 2023-02-24

    validDateTimeReturn()
      <- rtn <- 2023-02-24T15:48:21Z

    //Two weeks
    validDurationReturn()
      <- rtn <- P2W

    validMillisecondReturn()
      <- rtn <- 202ms

    validBitsReturn()
      <- rtn <- 0b010110

    validMoneyReturn()
      <- rtn <- 330.26#GBP

    validColourReturn()
      <- rtn <- #CC04FADD

    validDimensionReturn()
      <- rtn <- 23.5km

    validPathReturn()
      <- rtn <- $?.some.path.inc[0].array

    validRegexReturn()
      <- rtn <- /[a-zA-Z0-9]{6}/
//EOF