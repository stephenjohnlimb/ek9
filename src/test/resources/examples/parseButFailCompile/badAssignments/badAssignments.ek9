#!ek9
<?-
  Checks the types during assignments and also assignments during declarations.
-?>
defines module bad.assignment.use

  defines function

    okAssignment1()
      //Integer can be coerced to Flat
      value as Float: 1

      value: 9.8
      assert value?

    badAssignment1()
      value as Integer: 1

      //As it is an Integer, you cannot assign a Float to it.
      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value := 7.0
      assert value?

    badAssignment2()

      //So it is not possible to check the type compatibility here because the function is not resolved.
      @Error: FULL_RESOLUTION: NOT_RESOLVED
      value as Integer: someUnResolvedFunction()

    //Not really a pure assignment, but the operator has to be checked
    okPlusAssignment1()
      value as Integer: 1

      value += 5

      assert value?

    badPlusAssignment1()
      value as Integer: 1

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      value += 5.0

      assert value?

    okGenericDeclarationAssignment1()
      value as List of Integer: [1, 2, 3]

      assert value?

    okGenericDeclarationAssignment2()
      value <- List() of Integer

      assert value?

    okGenericDeclarationAssignment3()
      value as List of Integer: List() of Integer

      assert value?

    okGenericDeclarationAssignment4()
      value as List of Integer: List(1)

      assert value?

    //Now do an inferred example
    okGenericDeclarationAssignment5()
      value <- List(1)

      assert value?

    //Some horrid error conditions.
    badGenericDeclarationAssignment1()
      //makes no sense
      @Error: FULL_RESOLUTION: GENERIC_TYPE_OR_FUNCTION_PARAMETERS_NEEDED
      value as List of Integer: Optional()

      assert value?

    badGenericDeclarationAssignment2()
      //also makes no sense
      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value as List of Integer: Optional() of Integer

      assert value?

    badGenericDeclarationAssignment3()

      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value as List of Integer: List() of Float

      assert value?

    badInferredGenericDeclaration()
      //But this makes no sense as it is still generic
      @Error: FULL_RESOLUTION: GENERIC_TYPE_OR_FUNCTION_PARAMETERS_NEEDED
      value <- List()

      assert value?

    badGenericDeclarationAssignmentIncorrectTypeParameters1()
      //Declared as a list of Integer, but type is a List of Float
      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value as List of Integer: List(8.9)

      assert value?

    badGenericDeclarationAssignmentIncorrectTypeParameters2()
      //Declared as a List of Integer, but type is a List of Float
      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value as List of Integer: [1.9, 2.3, 3.5]

      assert value?

    badGenericDeclarationAssignmentIncorrectTypeParameters3()
      //Declared as a List of Float, but type is a List of Integer
      @Error: FULL_RESOLUTION: INCOMPATIBLE_TYPES
      value as List of Float: [1, 2, 3]

      assert value?

    badGenericDeclarationAssignmentTooManyParameters()
      //Not valid as a Liat only requires a single type parameter.
      @Error: FULL_RESOLUTION: GENERIC_TYPE_OR_FUNCTION_PARAMETERS_INCORRECT
      value as List of Integer: List(1, 2)

      assert value?

//EOF
