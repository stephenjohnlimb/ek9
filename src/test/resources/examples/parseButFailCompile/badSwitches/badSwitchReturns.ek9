#!ek9
<?-
  Some examples of working an errored based switch statements.
  This also includes switch expressions.
-?>
defines module bad.switches.use

  defines program

    ValidProgram1()

      val <- "ToCheck"

      //If you include a default then String? is OK
      result <- switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"
        default
          resultText: "Nothing"

      assert result?

    ValidProgram2()

      result <- String()
      val <- "ToCheck"

      //If you include a default then String? is OK
      result: switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"
        default
          resultText: "Nothing"

      assert result?

    ValidProgram3()

      val <- "ToCheck"

      //Even though the return is initialised, I
      @Error: FULL_RESOLUTION: DEFAULT_REQUIRED_IN_SWITCH_EXPRESSION
      result <- switch val
        <- resultText as String: "Nothing"
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"

      assert result?

    InvalidProgram1()
      val <- "ToCheck"

      //So there is no point in this return from a switch
      //Because there is no variable receiving the returned value.
      switch val
        @Error: FULL_RESOLUTION: RETURNING_REDUNDANT
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"
        default
          resultText: "Nothing"

    InvalidProgram2()
      val <- "ToCheck"

      //Here there is no return value but one is expected
      //This is likely to be how someone new to ek9 will get it wrong.
      @Error: FULL_RESOLUTION: RETURNING_REQUIRED
      someResult <- switch val
        case "ToCheck"
          someResult: "Jackpot"
        case "This"
          someResult: "Was this"
        case "This"
          someResult: "Was that"
        default
          someResult: "Nothing"

      //ensure referenced, but it will be a void type as switch error, causes someResult to be 'void'.
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      assert someResult?

    <?-
      Designed to show how a missing 'default' is detected in a normal switch statement
    -?>
    InvalidProgram3()
      val <- "ToCheck"

      result as String?

      @Error: FULL_RESOLUTION: DEFAULT_REQUIRED_IN_SWITCH_STATEMENT
      switch val
        case "This"
          result: "Nice"
        case "That"
          result: "Very nice"
        case "Other"
          result: "Not so nice"
        case "ToCheck"
          result: "Jackpot"
        //missing default - so expect an error

      assert result?

    InvalidProgram4()
      val <- "ToCheck"

      //No initialiser for the switch return and also no default
      @Error: FULL_RESOLUTION: DEFAULT_REQUIRED_IN_SWITCH_EXPRESSION
      someResult <- switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"

      assert someResult?
//EOF