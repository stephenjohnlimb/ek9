#!ek9
<?-
  Next bad injections (and there are lots).

-?>
defines module bad.injection.examples

  defines component

    Base as abstract
      default Base()

      aMethod() as abstract
        -> arg0 as String
        <- rtn as Boolean?

    Comp1 extends Base as abstract
      default Comp1()

      aPureMethod() as pure
        -> arg0 as String
        <- rtn <- true

      operator ? as pure
        <- rtn <- true

    Comp2 extends Comp1
      default Comp2()

      override aMethod()
        -> arg0 as String
        <- rtn as Boolean: arg0?

    DefaultComp extends Comp1
      default DefaultComp()

      override aMethod()
        -> arg0 as String
        <- rtn as Boolean: arg0?

  defines function
    JustFail()
      @Error: FULL_RESOLUTION: NOT_RESOLVED
      assert failure

    AcceptableInjection()
      //So this is the injection
      injected as Comp1!

      //Now you could check it has been injected with this
      assert injected?

      //But the best way if you're going to adopt a default is like this
      comp <- injected? <- injected else DefaultComp()

      //Now you can work with 'comp' and it will use the injected value if it was injected
      //else it will use the DefaultComp()
      assert comp?

    TryToDirectlyReassignInjectedComponent()
      //So this is the injection
      injected as Comp1!

      //But cannot do this - directly reassign use :=? to only assign if null.
      @Error: FULL_RESOLUTION: REASSIGNMENT_OF_INJECTED_COMPONENT
      injected := DefaultComp()

      //Now just ensure it is referenced after a potential assignment (else why did we reassign it)
      assert injected?

    TryToInjectNonComponent()
      //This won't work because it's not a component
      @Error: FULL_RESOLUTION: COMPONENT_INJECTION_NOT_POSSIBLE
      injected as String!

      assert injected?

    TryToInjectNonAbstractComponent()
      //This won't work because it's not abstract (but it is component)
      @Error: FULL_RESOLUTION: COMPONENT_INJECTION_OF_NON_ABSTRACT
      injected as Comp2!

      assert injected?

    TryToInjectInComingParameter()
      @Error: FULL_RESOLUTION: COMPONENT_INJECTION_NOT_POSSIBLE
      -> injected as Comp1!
      assert injected?

    TryToInjectReturningParameter()
      @Error: FULL_RESOLUTION: COMPONENT_INJECTION_NOT_POSSIBLE
      <- injected as Comp1!
      var1 <- "Steve"
      injected.aMethod(var1)

    TryToInjectInPure() as pure
      @Error: FULL_RESOLUTION: COMPONENT_INJECTION_IN_PURE
      injected as Comp1!
      assert injected?

      //Lets just check in a nested inner scope
      var <- true
      if var
        @Error: FULL_RESOLUTION: COMPONENT_INJECTION_IN_PURE
        injection2 as Comp1!
        assert injection2?

  defines class
    C1
      default C1()

      checkAcceptableInjection()
        injected as Comp1!
        assert injected?
        result <- injected.aMethod("Steve")
        assert result?

      checkNotAcceptableInjection() as pure
        //Not possible inject inside a pure method, you'd need to pass component in as a parameter.
        @Error: FULL_RESOLUTION: COMPONENT_INJECTION_IN_PURE
        injected as Comp1!
        assert injected?

        //Also not acceptable - this method is not marked as pure
        @Error: FULL_RESOLUTION: NONE_PURE_CALL_IN_PURE_SCOPE
        result1 <- injected.aMethod("Steve")
        assert result1?

        //If it had been possible to inject this would have been OK
        result2 <- injected.aPureMethod("Steve")
        assert result2?

//EOF