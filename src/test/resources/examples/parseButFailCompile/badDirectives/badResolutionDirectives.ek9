#!ek9
defines module bad.resolution.directives

  defines function

    @NotResolved: NO_SUCH_PHASE
    function1A()
      <- rtn <- 0

    @Resolved: NO_SUCH_PHASE
    function1B()
      <- rtn <- 0

    @NotResolved: SYMBOL_DEFINITION: NO_SUCH_CONSTRUCT
    function2A()
      <- rtn <- 0

    @Resolved: SYMBOL_DEFINITION: NO_SUCH_CONSTRUCT
    function2B()
      <- rtn <- 0

    @NotResolved: SYMBOL_DEFINITION: FUNCTION: noquotes
    function3A()
      <- rtn <- 0

    @Resolved: SYMBOL_DEFINITION: FUNCTION: noquotes
    function3B()
      <- rtn <- 0

    //Error in directive because it will be resolved
    @NotResolved: SYMBOL_DEFINITION: FUNCTION: "function4A"
    function4A()
      <- rtn <- 0

    //Error in directive, while it will be resolved, its a different construct
    @Resolved: SYMBOL_DEFINITION: TYPE: "function4B"
    function4B()
      <- rtn <- 0

    //Error in directive, while it will not be resolved
    @Resolved: SYMBOL_DEFINITION: TYPE: "noSuchFunction"
    function5A()
      <- rtn <- 0

    //Error in directive, no symbol!
    @Resolved: SYMBOL_DEFINITION: TYPE: ""
    function5B()
      <- rtn <- 0

    //Error in directive, no symbol!
    @NotResolved: SYMBOL_DEFINITION: TYPE: ""
    function5C()
      <- rtn <- 0

  defines class

    SomeGenericType of type (S, T) as abstract

      aMethod() as abstract
        -> arg0 as S
        <- rtn as T?

    //We only state of (Integer) which is incorrect.
    @Resolved: SYMBOL_DEFINITION: TEMPLATE_TYPE: "SomeGenericType of (Integer)"
    AType extends SomeGenericType of (Integer, String)

      //A constructor
      default AType()

      aMethod()
        -> arg0 as Integer
        <- rtn <- ""

    //No such construct as TIP
    @Resolved: SYMBOL_DEFINITION: TIP: "BType"
    BType as open
      default BType()

      someMethod()
        <- rtn <- 0

    @Implements: SYMBOL_DEFINITION: TYPE: "CType": "SomeGenericType of (Integer, String)"
    CType extends BType
      default CType()

      anotherMethod()
        <- rtn <- false

    //Error in asking for this check.
    @Implements: SYMBOL_DEFINITION: TYPE: "DType": "DType"
    DType extends BType
      default DType()

      anotherMethod()
        <- rtn <- false

    //Error in asking for this check.
    @Implements: SYMBOL_DEFINITION: TYPE: "EType": "Carrot"
    EType extends BType
      default EType()

      anotherMethod()
        <- rtn <- false

    @Implements: SYMBOL_DEFINITION: TYPE: "FType": "SomeGenericType of (Integer)"
    FType extends BType
      default FType()

      anotherMethod()
        <- rtn <- false

  defines function

    UnImplementedAbstractFunction() as pure abstract
      -> arg0 as Integer
      <- rtn as Integer?

    SomeAbstractFunction() as pure abstract
      -> arg0 as Integer
      <- rtn as Integer?

    //Deliberate error CheckFunction does not implement UnImplementedAbstractFunction
    @Implements: SYMBOL_DEFINITION: FUNCTION: "CheckFunction": "UnImplementedAbstractFunction"
    CheckFunction extends SomeAbstractFunction as pure
      -> arg0 as Integer
      <- rtn as Integer: arg0 * 2

    SomeGenericFunction of type (P, Q) as abstract
      -> arg0 as P
      <- rtn as Q?

    //Deliberately get the number of parameters incorrect.
    @Implements: SYMBOL_DEFINITION: FUNCTION: "GeneralFunction": "SomeGenericFunction of (Integer)"
    GeneralFunction extends SomeAbstractFunction
      -> arg0 as Integer
      <- rtn as Integer: 0
//EOF