#!ek9
<?-

  Try to instantiate an abstract type.

-?>
defines module bad.abstractuse.examples1

  defines trait
    T1
      method()
        -> arg0 as String
        <- rtn as Boolean: arg0?

  defines record
    R1 as abstract
      value <- true

      R1()
        this.value: false

  defines class
    C1 as abstract
      val <- true

      C1()
        this.val: false

      value()
        <- rtn as Boolean: Boolean(val)

  defines component
    Comp1 as abstract
      val <- true

      Comp1()
        this.val: false

      value()
        <- rtn as Boolean: Boolean(val)

  defines function

    SomeAbstractFunction() as abstract
      -> arg0 as String
      <- rtn as Boolean?

    ConcreteFunction is SomeAbstractFunction
      -> arg0 as String
      <- rtn as Boolean: true

    CheckNoInstantiationOfTrait()
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      check <- T1()

      @Error: FULL_RESOLUTION: NOT_RESOLVED
      assert check.method("Check")

    CheckNoInstantiationOfAbstractRecord()
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      check <- R1()

      assert check.value

    CheckNoInstantiationOfAbstractClass()
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      check <- C1()

      assert check.value()

      //Quick check cannot be used in a slightly different context
      //So make an inferred list.
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      l1 <- [ C1() ]
      assert l1?

    CheckNoInstantiationOfAbstractComponent()
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      check <- Comp1()

      assert check.value()

    CheckAbstractFunctionCalls()
      @Error: FULL_RESOLUTION: CANNOT_CALL_ABSTRACT_TYPE
      result1 <- SomeAbstractFunction("Steve")
      assert ~result1?

      //Consider presenting this type of thing as well
      @Error: FULL_RESOLUTION: BAD_ABSTRACT_FUNCTION_USE
      delegate as SomeAbstractFunction: SomeAbstractFunction
      result2 <- delegate("Steve")
      assert ~result2?

      //Try an assignment as well
      @Error: FULL_RESOLUTION: BAD_ABSTRACT_FUNCTION_USE
      delegate := SomeAbstractFunction
      result3 <- delegate("Steve")
      assert ~result3?

      //But you can do this, because it is not abstract and can therefore be called.
      delegate := ConcreteFunction
      result4 <- delegate("Steve")
      assert ~result4?

    Broken()
      @Error: FULL_RESOLUTION: NOT_RESOLVED
      assert nothing

//EOF

