#!ek9
<?-
  In this case just checking that Constrained types can be used and resolved.
-?>
defines module bad.constrainedtypecall.examples1

  //Some examples of creating a new 'constrained' type or just a sort of alias.
  defines type

    Index as Integer constrain as
      > 0

    //Stronger typing for use just in a database (for example).
    //This also demonstrates that it is possible to further 'alias' from an already defined type.
    DBIndex as Index

    LimitedColor as Colour constrain as
      (#0099CC or #9900CC or == #CC0099) and <> #CC0011

  defines function

    TestValidIndexCall1()
      emptyIndex1 <- Index()
      assert not emptyIndex1?

    TestValidIndexCall2A()
      index2A <- Index(2)
      assert index2A?

    TestValidIndexCall2B()
      index2B <- Index(3)
      assert index2B?

      index2C <- Index(index2B)
      assert index2C

    //So if you want to construct from a String, it is necessary to go 'via' and Integer
    TestValidIndexCall2D()
      index2D <- Index(Integer("3"))
      assert index2D?

    TestValidDBIndexCall()
      dbIndex <- DBIndex(Index(3))
      assert dbIndex?

    TestValidLimitedColour()
      validColour <- LimitedColor(#AAFFBB)
      assert validColour?

    TestValidUnknownLimitedColour()
      unsetColour <- LimitedColor()
      assert not unsetColour?

    TestValidLimitedColourViaStringAndColour()
      strangeColour <- LimitedColor(Colour("#33AACC"))
      assert strangeColour?

    //As index is a 'constrained/alias' of an Integer - then it cannot be constructed with Strings or other types
    TestInvalidIndexCall1()

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      invalidIndex <- Index("3")

      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      assert not invalidIndex?

    TestInValidLimitedColour()

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      invalidColour <- LimitedColor("#33AACC")

      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      assert invalidColour?

//EOF