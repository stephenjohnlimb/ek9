#!ek9
<?-
  In this case just checking text methods can be created.
-?>
defines module bad.textcalls.examples1

  defines record
    Person
      firstName <- String()
      lastName <- String()

      Person() as pure
        ->
          firstName String
          lastName String
        assert firstName? and lastName?

        this.firstName :=: firstName
        this.lastName :=: lastName

  defines text for "en_GB"

    WelcomePageText

      namedWelcome()
        -> person Person
        `Welcome ${person.firstName}`

  defines text for "de"

    WelcomePageText
      namedWelcome()
        -> person Person
        `Willkommen ${person.firstName}`

  defines function

    TestEnglishWelcome()
      lang <- "en_GB"
      me <- Person("Steve", "Limb")

      englishWelcome <- WelcomePageText(lang)
      welcomeMe <- englishWelcome.namedWelcome(me)
      assert welcomeMe?

    TestDeutschWelcome()
      lang <- "de"
      me <- Person("Steve", "Limb")

      deutschWelcome <- WelcomePageText(lang)
      welcomeMe <- deutschWelcome.namedWelcome(me)
      assert welcomeMe?

    //While not a compile time error, this would have to be a runtime error.
    TestNoSuchLanguageWelcome()
      lang <- "none"
      me <- Person("Steve", "Limb")

      wouldBeEmptyWelcome <- WelcomePageText(lang)
      wouldBeEmptyWelcomeMe <- wouldBeEmptyWelcome.namedWelcome(me)
      assert not wouldBeEmptyWelcomeMe?

    TestInvalidMethodNameCall()
      englishWelcome <- WelcomePageText("en")

      @Error: FULL_RESOLUTION: METHOD_NOT_RESOLVED
      welcomeMe <- englishWelcome.noSuchMethod(Person("Steve", "Limb"))

      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      assert welcomeMe?
//EOF