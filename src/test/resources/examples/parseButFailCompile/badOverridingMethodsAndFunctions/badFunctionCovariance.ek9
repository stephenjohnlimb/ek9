#!ek9
<?-
  Test to detect invalid return types via covariance on funtions with the same signature.
-?>
defines module bad.functions.covariance.examples

  defines trait
    T1
      someMethod()
        <- rtn <- true

      operator ? as pure
        <- rtn <- true

    T2 extends T1
      override someMethod()
        <- rtn <- false

      override operator ? as pure
        <- rtn <- true

  defines function

    AFunction as open
      ->
        arg0 as Integer
        arg1 as Float
      <-
        rtn as Float: arg1

    //TODO note that if you change the dynamic function below to use this
    //there is an issue that need to ne sorted.
    //i.e. gFun <- () is AGenericFunction of (Integer, Float) as function
    //       rtn: 3.0
    //This fails - look into and resolve.
    AGenericFunction of type (S, T) as open
      ->
        arg0 as S
        arg1 as T
      <-
        rtn as T: arg1

    TestFunction
      //Test for a dynamic function, the parameters and return are implied and injected
      //So they cannot/do not need redeclaring.
      gFun <- () is AFunction as function
        rtn: 3.0
      assert gFun?

    BaseFunction as abstract
      -> arg0 as T1
      <- rtn as Boolean?

    //This is valid as it meets the signature and implements the interface
    ValidCovariance is BaseFunction
      -> arg0 as T1
      <- rtn as Boolean: arg0?

    //While this does accept the incoming parameter, it alters the return type
    @Error: FULL_RESOLUTION: COVARIANCE_MISMATCH
    InvalidCovariance1 is BaseFunction
      -> arg0 as T1
      <- rtn as T1: arg0

    //In this example there is not return being sent and so it does not meet the interface.
    @Error: FULL_RESOLUTION: COVARIANCE_MISMATCH
    InvalidCovariance2 is BaseFunction as abstract
      -> arg0 as T1

    @Error: FULL_RESOLUTION: FUNCTION_SIGNATURE_DOES_NOT_MATCH_SUPER
    InvalidIncomingParameters1 is BaseFunction
      ->
        arg0 as Float
        arg1 as T1
      <- rtn as Boolean: true

    @Error: FULL_RESOLUTION: FUNCTION_SIGNATURE_DOES_NOT_MATCH_SUPER
    InvalidIncomingParameters2 is BaseFunction as abstract
      -> arg0 as Float
      <- rtn as Boolean?

//EOF