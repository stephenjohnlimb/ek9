#!ek9
<?-
  Tests how errors are detected when a generic type is parameterized with argument that cause some
  methods on the generic type to have exactly the same type signatures.
-?>
defines module bad.generic.constructions

  defines class

    G1 of type T

      methodA()
        -> arg0 as String
        <- rtn as Boolean: true

      methodA()
        -> arg0 as Float
        <- rtn as Boolean: true

      operator + as pure
        -> arg0 as Integer
        <- rtn as G1 of T: this

      operator + as pure
        -> arg0 as Float
        <- rtn as G1 of T: this

      default operator ?

    //Create a generic type that accepts two parameterizing arguments.
    //Now add in two overloaded methods that by themselves are fine.
    //But as and when we parameterize this polymorphic type may or may not work.
    //If used with G2 of (Integer, String), we'll be fine, but
    //if used with G2 as (Integer, Integer), then we will have duplicate methods.
    @Error: FULL_RESOLUTION: METHOD_DUPLICATED
    G2 of type (K, V)
      k as K?
      v as V?

      G2()
        ->
          k as K
          v as V

        //Just try using a hidden internal implementation of a dependent generic type
        //this is something that does not appear in any method interface
        //Within generics/templates we have to be explicit about types for now.
        somethingInternal as InternalDependentForG2 of (K, V): InternalDependentForG2(k, v)

        //Does not really do anything, just want to check the types align.
        s as K: somethingInternal.getS()
        t as V: somethingInternal.getT()

        this.k: s
        this.v: t

      //While these methods are Ok in the generic definition, they collide when
      //parameterized where K and V are the same type (see later String and also Integer)

      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      set()
        -> k as K
        this.k: k

      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      set()
        -> v as V
        this.v: v

      get()
        <- rtn as DependentForG2 of (K, V): DependentForG2(k, v)

      default operator ?

    //Added this and two set methods to check we can detect duplicates on a dependent type.
    //So even though the EK9 developer did not explicitly parameterize this, they did
    //parameterize G2 and hence DependentForG2 has to also be parameterized.
    //So we detect methods that then collide.
    @Error: FULL_RESOLUTION: METHOD_DUPLICATED
    DependentForG2 of type (K, V)
      k as K?
      v as V?

      DependentForG2()
        ->
          k as K
          v as V
        this.k: k
        this.v: v

      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      set()
        -> k as K
        this.k: k

      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      set()
        -> v as V
        this.v: v

      getK()
        <- rtn as K: k

      getV()
        <- rtn as V: v

    //Just used to ensure that generic types not on interfaces can be derived.
    InternalDependentForG2 of type (S, T)
      s as S?
      t as T?

      InternalDependentForG2()
        ->
          s as S
          t as T
        this.s: s
        this.t: t

      getS()
        <- rtn as S: s
      getT()
        <- rtn as T: t

  defines function

    CheckExplicitParameterizedG1()
      var as G1 of Integer: G1()

      @Resolved: FULL_RESOLUTION: TYPE: "G1 of (Integer)"
      assert var?

    CheckInferredParameterizedG1()
      var <- G1(2023-10-11)
      @Resolved: FULL_RESOLUTION: TYPE: "G1 of (Date)"
      assert var?

    CheckExplicitParameterizedG2()
      var as G2 of (Integer, String): G2()

      //Just a quirk of how the @directives work, always needs a statement.
      //The above parameterization should trigger the creation of these types
      @Resolved: FULL_RESOLUTION: TYPE: "G2 of (Integer, String)"
      assert var?

      @Resolved: FULL_RESOLUTION: TYPE: "DependentForG2 of (Integer, String)"
      assert var?

      @Resolved: FULL_RESOLUTION: TYPE: "InternalDependentForG2 of (Integer, String)"
      assert var?


    CheckInferredParameterizedG2()
      //This is fine and will not result in duplicate methods in G2.
      var <- G2(2023-10-10, "Steve")

      @Resolved: FULL_RESOLUTION: TYPE: "G2 of (Date, String)"
      assert var?

      @Resolved: FULL_RESOLUTION: TYPE: "DependentForG2 of (Date, String)"
      assert var?

      @Resolved: FULL_RESOLUTION: TYPE: "InternalDependentForG2 of (Date, String)"
      assert var?

    CheckInferredParameterizedG2SameType()

      //The inferred use of G2 will cause method duplication in G2 'set' operations.
      //Those are highlighted as being in error, but are only an error, because two integers are used.
      //So this tends to mean that the use of the generic/template type could be written better or that it is not
      //really designed to work with two types that are the same.
      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      var <- G2(String, String)
      assert var?

    CheckExplicitParameterizedG2SameType()
      @Error: FULL_RESOLUTION: METHOD_DUPLICATED
      var as G2 of (Integer, Integer): G2()
      assert var?

//EOF
