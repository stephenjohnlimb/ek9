#!ek9
<?-
  Examples of classes with good and bad inheritance.
  So we can check detection and errors.
  This source uses the @ EK9 directives to check for errors.
-?>
defines module bad.inherited.classes

  //Just used to check it is not possible to inherit from a constant
  defines constant
    SOME_CONSTANT <- 10

  //Just used to define a 'type' to check it is rejected as a super for a record.
  defines trait

    @Resolved: SYMBOL_DEFINITION: TYPE: "SomeTrait"
    SomeTrait
      aMethod() as abstract

  defines function
    GFunction of type (K, V) as abstract
      -> arg0 as K
      <- rtn as V?

  defines class

    //This will be fine and work
    @Resolved: SYMBOL_DEFINITION: TYPE: "Class1"
    Class1 as open
      firstName <- "Steve"
      lastName <- "Limb"

    //As will this.
    @Resolved: SYMBOL_DEFINITION: TYPE: "Class2"
    Class2 is Class1 as abstract
      dob <- Date()

    //We can extend further because Class2 is 'abstract' that also makes it 'open'
    @Resolved: SYMBOL_DEFINITION: TYPE: "Class3"
    Class3 extends Class2
      postCode <- String()

    //Now because Class3 is not marked as open it cannot be extended
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: NOT_OPEN_TO_EXTENSION
    Class4 is Class3
      country <- String()

    //But this will fail because 'NonSuch' will not resolve.
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_NOT_RESOLVED
    Class5 extends NonSuch
      dob <- Date()

    //But 'SOME_CONSTANT' will resolve but as a 'VALUE' and not as a 'CLASS'
    //Now even though SOME_CONSTANT exists it is 'not a type' and therefore won't be resolved.
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE_NOT_RESOLVED
    Class6 extends SOME_CONSTANT
      dob <- Date()

    //Classes don't extend traits - but they do have 'with trait of'
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: INCOMPATIBLE_GENUS
    Class7 extends SomeTrait
      dob <- Date()

    //This is valid, a class can have a trait
    Class8 with trait of SomeTrait
      override aMethod()
        var <- "Steve"
        assert var?

    //must be a trait not a class.
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: INCOMPATIBLE_GENUS
    Class9 with trait of Class1
      dob <- Date()

    //must be a trait not a class, so still not valid.
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: INCOMPATIBLE_GENUS
    Class10 extends Class2 with trait of Class1
      dob <- Date()

    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: INCOMPATIBLE_GENUS
    Class11 extends Class2 with trait of List
      dob <- Date()

    //Example of something valid, can extend 'List' but only when parameterised.
    Class12 extends List of String
      dob <- Date()

    //Again this is valid, then throw in one or more traits to implement
    Class13 extends List of String with trait of SomeTrait
      override aMethod()
        var <- "Steve"
        assert var?

    //Now lets try and accidentally extend some generic types but not parameterised.
    //EK9 does not support extending a generic type, only when it is parameterised
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TEMPLATE_TYPE_REQUIRES_PARAMETERIZATION
    Class14 extends List
      dob <- Date()

    //Try an extend a generic function (wrong genus) as a class and not parameterized
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TEMPLATE_TYPE_REQUIRES_PARAMETERIZATION
    Class15 extends GFunction
      dob <- Date()

    //Error even when correctly parameterised
    @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: INCOMPATIBLE_GENUS
    Class16 extends GFunction of (Integer, String)
      dob <- Date()

    Class17
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: METHOD_MODIFIER_PROTECTED_IN_CLOSED_CLASS
      protected someMethod()
        var <- 1
        assert var?

//EOF