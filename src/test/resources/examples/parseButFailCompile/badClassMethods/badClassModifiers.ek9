#!ek9
defines module bad.classmodifier.use

  defines trait
    T1
      @Error: SYMBOL_DEFINITION: TRAITS_DO_NOT_HAVE_CONSTRUCTORS
      T1()

      method()
        -> arg0 as String
        <- rtn as Boolean: arg0?

  defines class

    //Valid class used as a base class
    C0
      private basicMethod()
        <- rtn as String: "OK"

      protected anotherMethod()
        <- rtn as String: "OK"

    C1 extends C0

      p1 as String?
      p2 as Integer?

      //This constructor is allowed
      default C1()

      //This constructor is not allowed because it has parameters
      @Error: SYMBOL_DEFINITION: INVALID_DEFAULT_CONSTRUCTOR
      default C1()
        -> param as String

      //Not logical to define a constructor and say it is abstract
      @Error: SYMBOL_DEFINITION: ABSTRACT_CONSTRUCTOR
      C1() as abstract
        -> param as Integer

      //While it logical and natural to 'think' you are overriding a constructor
      //It does not get expressed this way.
      @Error: SYMBOL_DEFINITION: OVERRIDE_CONSTRUCTOR
      override C1()
        ->
          p1 as String
          p2 as Integer
        super()
        this.p1 = p1
        this.p2 = p2

      //This use of 'public' is not needed, public is defined but never required as it is likely
      //To be a mistake developers moving from other OO languages will make.
      @Error: SYMBOL_DEFINITION: METHOD_ACCESS_MODIFIER_DEFAULT
      public someMethod()
        <- rtn as String: "OK"

      //This makes no sense, if a method being overridden is private
      //Then it is not visible and hence cannot be overridden
      //If the method was not private then it is not possible to reduce it's visibility.
      @Error: SYMBOL_DEFINITION: METHOD_ACCESS_MODIFIER_PRIVATE_OVERRIDE
      override private basicMethod()
        <- rtn as String: "OK"

      //This is not allowed either, not possible to take a concrete existing method
      //And force it to be abstract when its super was not.
      @Error: SYMBOL_DEFINITION: OVERRIDE_AND_ABSTRACT
      override anotherMethod() as abstract

      //This makes no sense on a method as it is for program
      @Error: SYMBOL_DEFINITION: APPLICATION_SELECTION_INVALID
      methodX with application of abc
        v1 <- "Developer some how expecting application injection here"
        assert v1?
//EOF