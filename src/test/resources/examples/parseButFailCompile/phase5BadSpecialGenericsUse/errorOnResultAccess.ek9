#!ek9
<?-
  Designed to show how EK9 Result generic type can and cannot be used.
  The aim of the Result generic type (and the main reason it is treated specially)
  is to aid in accessing the ok() value or the error() value in a very safe way.

  There are a number of ways to access both the ok value and the error value that are safe
  if those values are not present. But the riskiest methods like ok() and error() which give
  direct access to the values come with the precondition that isOk() or isError() is called
  before in a surrounding 'if' or 'ternary'.
  The aim here is to avoid runtime exception throwing and to force the EK9 developer at compile time
  to check.
-?>
defines module error.on.result.access

  defines record
    <?-
      Just used to test the ability to use object access via records and also detect use of Result type
    -?>
    Rec
      propString as String: "Steve"
      propResult as Result of (String, Integer): Result(String(), Integer())

      default operator ?

  <?-
    Note that it is possible to get a Result that is both OK, but also has some form or error.
    This is possible and maybe desirable in some situations, where even though an error occurred
    a value was still produced (perhaps a default value for example).
  -?>
  defines function

    <?-
      Example of how to get a Result that is both OK, but also does have an error.
      So in this example, if arg0 is unset, then it checks (using the ternary).
      If present then a Result with that value in is returned and Integer error is unset.
      But if arg0 is not set, then the 'Default' is used and an error code of -1
      (indicating there is an error and some other value was provided).
      Clearly the error type could be more than just an Integer, it could be any type.
    -?>
    getResultOKButAlsoWithError() as pure
      -> arg0 as String
      <- rtn as Result of (String, Integer)?
      rtn :=? arg0? <- Result(arg0, Integer()) else Result("Default", -1)

    <?-
      Example of how to get a Result using a simple constructor with an OK result
    -?>
    getResult1() as pure
      -> arg0 as String
      <- rtn as Result of (String, Integer): Result(arg0, Integer())

    <?-
      Example of how to get a Result using a simple constructor with an Error result
    -?>
    getResult2() as pure
      -> arg0 as Integer
      <- rtn as Result of (String, Integer): Result(String(), arg0)

    <?-
      Example of how to get a Result using a constructor and then to use that to get just an OK result.
    -?>
    getResult3() as pure
      -> arg0 as String
      <- rtn as Result of (String, Integer): Result(String(), Integer()).asOk(arg0)

    <?-
      Example of how to get a Result using a constructor and then to use that to get just an Error result.
      The 'asError(value)' is probably more useful when you have a Result of the right parameterised type
      and just want a new version of it with an error value.
    -?>
    getResult4() as pure
      -> arg0 as Integer
      <- rtn as Result of (String, Integer): Result(String(), Integer()).asError(arg0)

    someAcceptor()
      -> arg0 as String
      assert arg0?

    someConsumer() as pure
      -> arg0 as String
      assert arg0?

    someErrorAcceptor()
      -> arg0 as Integer
      assert arg0?

    someErrorConsumer() as pure
      -> arg0 as Integer
      assert arg0?

    testAccessToResultInRecord()
      rec <- Rec()
      assert rec?
      assert rec.propString?

      //Now this should be fine
      rec.propResult.whenOk(someAcceptor)

      //Now lets see if we detect invalid direct access
      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      notValidAccess <- rec.propResult.ok()
      assert notValidAccess?

    <?-
      Demonstration of getting any one of the results from above.
      Now it is possible to just pass in an acceptor or consumer
      (EK9 will set the super functions for the above to be Acceptor of T or Consumer of T as appropriate).
      Note all these calls are possible without doing a call to ? isOk before accessing ok() and also
      isError before accessing error() (in a block).
    -?>
    testAccessResult()
      r <- getResult1("Steve")

      r.whenOk(someAcceptor)
      r.whenOk(someConsumer)

      r.whenError(someErrorAcceptor)
      r.whenError(someErrorConsumer)

      //Now you can also check if the result is in error or ok like this
      //But remember it is also possible the the result itself is 'un-set' so neither Ok nor Error.
      assert r.isOk() or r.isError()

      //Now if you are expecting a specific OK value - you can do this.
      hasOkSteve <- r contains "Steve"
      assert hasOkSteve?

      maybeTheOkValue <- String()
      //You can also do this quite safely - because if there is no OK value - the iterator will return false for hasNext()
      while iter <- r.iterator() then iter.hasNext()
        maybeTheOkValue :=: iter.next()

      //So if it was set then you'd have the value (or a copy of it)
      assert maybeTheOkValue?

    testImplicitUseOfResult()
      //So this will be fine as an implicit declaration and initialisation of a Result
      r1 <- Result("OK", Float())
      assert r1?

    <?-
      Demonstrate that Ok values that are a String can be piped into the Result
    -?>
    testPipeOfSuccessValue()
      r <- cat ["Steve"] | collect as Result of (String, Integer)
      assert r.isOk()
      assert r contains "Steve"

    <?-
      Demonstrate that Error values that are an Integer can be piped into the Result
    -?>
    testPipeOfErrorValue()
      r <- cat [1] | collect as Result of (String, Integer)
      assert not r.isOk()
      assert r contains 1

    testPipeOfOkAndError()
      okValue <- "Steve"
      errorValue <- 1

      //A bit convoluted, could have just done 'Result(okValue, errorValue)'
      r <- Result(String(), Integer())
      cat [okValue] > r
      cat [errorValue] > r
      assert r.isOk() and r.isError()

    <?-
      Now a check that detects that the EK9 developer has not called isOk() before the ok() method.
      There is also a test for checking isError is called before calling error().
      //Chaining calls that end up with Result and no checks with isOk or isError and same with Optional.
    -?>
    testCompilerErrorWhenAccessBeforeCheckingOk()
      r <- Result(String(), Integer())

      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      okValue <- r.ok()
      assert okValue?

      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      asLower <- r.ok().lowerCase()
      assert asLower?

      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      errorValue <- r.error()
      assert errorValue?

    testValidUseDueToChecks1()
      r <- Result("Steve", Integer())
      //So this should be valid as a check has been done
      if r?
        okValue <- r.ok()
        assert okValue?

    testValidUseDueToChecks2()
      r <- Result("Steve", Integer())
      //So this should be valid as a check has been done this time isOk()
      if r.isOk()
        okValue <- r.ok()
        assert okValue?

    <?-
      Demonstrates a nice idiomatic pattern to access the 'ok' value in the result.
    -?>
    testValidUseDueToChecks3()
      r <- Result("Steve", Integer())
      //So this should be valid as a check has been done this time isOk() via a ternary
      okValue <- r.isOk() <- r.ok() else String()
      assert okValue?

      //You can also do this
      errorValue <- r.isError() <- r.error() else Integer()
      assert not errorValue?

    <?-
      This will be OK, because the logic is simple 'and' logic even with a mix.
    -?>
    testValidUseDueToChecks4()
      r <- Result("Steve", Integer())
      someBoolean <- true

      okValue <- someBoolean and r? <- r.ok() else String()
      assert okValue?

    <?-
      A little bit strange, but control can have expressions in.
      The 'true'/'false' part of the ternary can also have expressions in.
    -?>
    testValidUseDueToChecks5()
      r <- Result("Steve", 21)

      okValue <- r.isOk() and r.isError() <- `${r.ok()} but with error code ${r.error()}` else String()
      assert okValue?

      //So you could now make a result like this if you wanted to
      //This does not mutate 'r' but uses it's type to create a new Result but with just the OK value set.
      someSimpleResult <- r.asOk(okValue)
      assert someSimpleResult.isOk() and not someSimpleResult.isError()

    testValidUseDueToChecks6()
      someVar <- true
      r1 <- Result("Steve", Integer())
      r2 <- Result(String(), -1)

      if someVar and r1? and r2.isError()
        okValue <- r1.ok()
        assert okValue?
        errorValue <- r2.error()
        assert errorValue?

    testValidUseDueToChecks7()
      r <- Result(String(), -1)
      //So this should be valid as a check has been done this time isError()
      if r.isError()
        errorValue <- r.error()
        assert errorValue?
        //If you wanted to then map this error in some way (assuming Integers we still OK as codes)
        anotherResultWithDifferentCode <- r.asError(21)
        assert anotherResultWithDifferentCode.isError() and not anotherResultWithDifferentCode.isOk()

    testValidUseDueToChecks8()
      r <- Result(String(), -1)
      //So this should be valid as a check has been done this time isOk() and isError() but different blocks.
      if r.isOk()
        okValue <- r.ok()
        assert okValue?
      else if r.isError()
        errorValue <- r.error()
        assert errorValue?

    <?-
      While a check is made, the access is then in the wrong scope.
    -?>
    testInvalidUseDueToChecksA()
      r <- Result(String(), Integer())
      //Now while a check is done it is not completed in a block to make it safe.
      if r.isError()
        someUnrelatedProcessing <- "Duff Code"
        assert someUnrelatedProcessing?

      //So while r.isError() has been called this region of code is not covered by it.
      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      errorValue <- r.error()
      assert errorValue?

    <?-
      Do a check on isError() but access ok()
    -?>
    testInvalidUseDueToWrongCheck()
      r <- Result("Steve", Integer())

      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      okValue <- r.isError() <- r.ok() else String()
      assert okValue?

    <?-
      EK9 supports simple 'and logic' with no negation on result.
      This makes is simple to detect both for the EK9 developer and in the compiler.
      So the 'or' logic here will not have made 'ok()' or 'error()' safe.
    -?>
    testInvalidUseDueToComplexChecksB()
      r <- Result(String(), Integer())

      if r.isOk() or r.isError()
        @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
        okValue <- r.ok()
        assert okValue?

        @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
        errorValue <- r.error()
        assert errorValue?

    testInvalidUseDueToComplexChecksC()
      someVar <- true
      r <- Result(String(), Integer())

      if someVar and (r.isOk() or r.isError())
        @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
        okValue <- r.ok()
        assert okValue?

        @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
        errorValue <- r.error()
        assert errorValue?

    <?-
      Complex logic in the control, must just be simple stuff.
    -?>
    testInvalidUseDueToComplexChecksD()
      r <- Result("Steve", Integer())
      someBoolean <- true
      somethingElse <- false

      @Error: PRE_IR_CHECKS: UNSAFE_METHOD_ACCESS
      okValue <- someBoolean or somethingElse and r.isOk() <- r.ok() else String()
      assert okValue?

//EOF