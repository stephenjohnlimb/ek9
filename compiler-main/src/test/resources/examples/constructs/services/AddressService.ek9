#!ek9
defines module com.customer.services

  defines type
    //Just for strong typing - no constraints
    @Resolved: SYMBOL_DEFINITION: TYPE: "AddressId"
    AddressId as String

  defines record
    @Resolved: SYMBOL_DEFINITION: TYPE: "Address"
    Address
      id <- AddressId()
      street <- String()
      street2 <- String()
      city <- String()
      state <- String()
      zipcode <- String()

      Address()
        ->
          id as AddressId
          street as String
          street2 as String
          city as String
          state as String
          zipcode as String

        this.id :=: id
        this.street :=: street
        this.street2 :=: street2
        this.city :=: city
        this.state :=: state
        this.zipcode :=: zipcode

      Address()
        -> from as Address
        this :=: from

      Address()
        -> from as Optional of Address
        if from?
          this :=: from.get()          
      
      //Copy
      operator :=:
        -> from as Address
        id :=: from.id
        street :=: from.street
        street2 :=: from.street2
        city :=: from.city
        state :=: from.state
        zipcode :=: from.zipcode

      //Merge only if incoming address parts are set
      operator :~:
        -> address as Address        
        if address.street?
          street :=: address.street
        if address.street2?
          street2 :=: address.street2
        if address.city?
          city :=: address.city
        if address.state?
          state :=: address.state  
        if address.zipcode?        
          zipcode :=: address.zipcode
        
      override operator ? as pure
        //street2 is optional and can be omitted
        <- rtn as Boolean: id? and street? and city? and state? and zipcode?                

  defines text for "en"
    @Resolved: SYMBOL_DEFINITION: TYPE: "AddressToOutputFormat_en"
    AddressToOutputFormat
      
      toJSON()
        -> address as Address
        `{
"address":
    {
    "id": "${address.id}",
    "street": "${address.street}",
    ${optionalJSON("street2", address.street2)}
    "city": "${address.city}",
    "state": "${address.state}",
    "zipcode": "${address.zipcode}"
    }
}`
  
  defines function

    //Used for specific operations to be applied to a set of addresses
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "addressOperation"
    addressOperation() as abstract
      ->
        addresses as AddressAccess
        address as Address          

    //deals with wrapping the operation in the calls to deal with mutex lock.
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "safeOperation"
    safeOperation()
      ->
        lockedAddressSet as MutexLock of AddressSet
        address as Address
        operation as addressOperation

      accessKey <- (address, operation) extends MutexKey of AddressSet as function
          operation(value, address)

      lockedAddressSet.enter(accessKey)

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "addressFromJson"
    addressFromJson()
      -> addressInJSONFormat as String
      <- rtn as Address: Address()

      addressParts <- addressDictionaryFromJSON(addressInJSONFormat)
      rtn.id: AddressId(addressParts.get("id"))
      rtn.street: String(addressParts.get("street"))
      rtn.street2: String(addressParts.get("street2"))
      rtn.city: String(addressParts.get("city"))
      rtn.state: String(addressParts.get("state"))
      rtn.zipcode: String(addressParts.get("zipcode"))

    <?-
      Until we have a more general JSON parser
      a bespoke parser is needed for this demonstration
    -?>
    @Resolved: SYMBOL_DEFINITION: FUNCTION: "addressDictionaryFromJSON"
    addressDictionaryFromJSON()
      -> json as String
      <- rtn <- Dict() of (String, String)

      //Just pull out the address bits from within {}'s using a regex
      extractAddressPartsEx <- /\{\s+"address":\s+\{\s+([^}]*?)\s+\}\s+\}/
      //Now break into lines based on commas
      addressItems <- json.split(extractAddressPartsEx).first().split(/,/)
      //Map to a dictionary and return.
      rtn: cat addressItems | map with toDictEntry | collect as Dict of (String, String)      

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "toDictEntry"
    toDictEntry()
      -> line as String
      <- rtn as DictEntry of (String, String)?
      keyValues <- line.trim().split(/:/)
      rtn: DictEntry(keyValues.first().trim().trim('"'), keyValues.last().trim().trim('"'))

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "copyAddress"
    copyAddress()
      -> from as Address
      <- to as Address: Address(from)

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "wrapInBrackets"
    wrapInBrackets()
      -> value as String
      <- rtn as String: `[ ${value} ]`

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "commaSeparated"
    commaSeparated()
      ->
        firstPart String
        secondPart String
      <-
        rtn as String: firstPart? and secondPart? <- firstPart + "," + secondPart : String()

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "addressToJSON"
    addressToJSON()
      -> address as Address
      <- addressAsString as String: AddressToOutputFormat("en").toJSON(address)

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "addressListToJSON"
    addressListToJSON()
      -> addresses as List of Address
      <- listAsString as String: cat addresses
        | map with addressToJSON
        | join with commaSeparated
        | map with wrapInBrackets
        | collect as String


    @Resolved: SYMBOL_DEFINITION: FUNCTION: "optionalJSON"
    optionalJSON() as pure
      ->
        name as String
        value as String
      <-
        rtn as String: value? <- `"${name}": "${value}",` else String()

  defines trait

    @Resolved: SYMBOL_DEFINITION: TYPE: "AddressAccess"
    AddressAccess

      hash()
        <- rtn as String: String()

      hashOfAddress()
        -> id as AddressId
        <- rtn as String: String()

      byId()
        -> id as AddressId
        <- rtn as Address?

      listAll()
        <- rtn as List of Address: List() of Address

      operator +=
        -> address as Address
        assert address?
        
      operator -=
        -> address as Address
        assert address?

      //merge with an existing address
      operator :~:
        -> address as Address
        assert address?

      //replace an existing address
      operator :^:
        -> address as Address
        assert address?
        
      operator contains as pure
        -> addressId as AddressId
        <- rtn as Boolean: Boolean()

  defines class

    @Resolved: SYMBOL_DEFINITION: TYPE: "AddressSet"
    AddressSet with trait of AddressAccess
      hash as String: HMAC().SHA256(GUID())
      addresses <- Dict() of (AddressId, Address)
      hashes <- Dict() of (AddressId, String)

      override hash()
        <- rtn as String: this.hash

      override hashOfAddress()
        -> id as AddressId
        <- rtn as String: String(hashes.get(id))

      override byId()
        -> id as AddressId
        <- rtn as Address: Address(addresses.get(id))

      override listAll()
        <- rtn <- List() of Address

        iter <- addresses.values()
        cat iter | map with copyAddress > rtn

      private includeAddress()
        -> address as Address

        copy <- Address(address)
        addresses += DictEntry(copy.id, copy)
        hashes += DictEntry(copy.id, HMAC().SHA256(addressToJSON(copy)))
        updateHash()

      private updateHash()
        hash :=: HMAC().SHA256(GUID())

      override operator +=
        -> address as Address
        assert address?
        
        if this not contains address
          includeAddress(address)
      
      override operator -=
        -> address as Address
        assert address.id?
        
        addresses -= address.id
        hashes -= address.id
        updateHash()      

      override operator :~:
        -> address as Address
        assert address.id?
        //We don't assert whole address because it can be partial

        currentAddress <- addresses.get(address.id)
        if currentAddress?
          //make a new copy and then merge the two.
          updatedAddress <- Address(currentAddress)
          updatedAddress :~: address
          includeAddress(updatedAddress)

      override operator :^:
        -> address as Address
        assert address?
                        
        if this contains address
          includeAddress(address)

      operator contains as pure
        -> address as Address
        <- rtn as Boolean: this contains address.id      
    
      override operator contains as pure
        -> addressId as AddressId
        <- rtn as Boolean: addresses contains addressId      

      default operator ?

    //Example of wrapping shared data set in a mutex lock.
    @Resolved: SYMBOL_DEFINITION: TYPE: "LockableAddressSet"
    LockableAddressSet with trait of AddressAccess
      lockedAddressSet as MutexLock of AddressSet: MutexLock(AddressSet()) 

      override hash()
        <- rtn as String: String()
        accessKey <- (rtn) is MutexKey of AddressSet as function
          rtn :=: value.hash()

        lockedAddressSet.enter(accessKey)

      override hashOfAddress()
        -> id as AddressId
        <- rtn as String: String()
        accessKey <- (id, rtn) is MutexKey of AddressSet as function
          rtn :=: value.hashOfAddress(id)

        lockedAddressSet.enter(accessKey)

      override byId()
        -> id as AddressId
        <- rtn as Address: Address()
        accessKey <- (id, rtn) is MutexKey of AddressSet as function
          rtn :=: value.byId(id)

        lockedAddressSet.enter(accessKey)

      override listAll()
        <- rtn <- List() of Address
        accessKey <- (rtn) is MutexKey of AddressSet as function
          rtn += value.listAll()

        lockedAddressSet.enter(accessKey)

      override operator +=
        -> address as Address
        
        //You can inline this simple dynamic function if you wish
        //Also used named parameters
        safeOperation(
          lockedAddressSet: lockedAddressSet,
          address: address,
          operation: () is addressOperation (addresses += address)
          )
                  
      override operator -=
        -> address as Address

        //Or you can inline all on one line.
        safeOperation(lockedAddressSet, address, () is addressOperation (addresses -= address))

      override operator :~:
        -> address as Address

        //Or define a dynamic function and pass in as delegate (my preferred way)
        operation <- () is addressOperation
          addresses :~: address
        safeOperation(lockedAddressSet, address, operation)        

      override operator :^:
        -> address as Address
        operation <- () is addressOperation
          addresses :^: address
        safeOperation(lockedAddressSet, address, operation)

      override operator contains as pure
        -> addressId as AddressId
        <- rtn as Boolean: false
        accessKey <- (addressId, rtn) is MutexKey of AddressSet as function
          rtn :=: value contains addressId

        lockedAddressSet.enter(accessKey)

      default operator ?

  defines function

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "plainNonCacheableHTTPResponse"
    plainNonCacheableHTTPResponse()
      <- rtn as HTTPResponse: () with trait of HTTPResponse
        override cacheControl() as pure
          <- rtn as String: "no-store,max-age=0"
        override contentType() as pure
          <- rtn as String: "text/plain"
        override contentLanguage() as pure
          <- rtn as String: "en"
        default operator ?

    @Resolved: SYMBOL_DEFINITION: FUNCTION: "cacheableHTTPResponse"
    cacheableHTTPResponse()
      <- rtn as HTTPResponse: () with trait of HTTPResponse
        override cacheControl() as pure
          <- rtn as String: "public,max-age=5,must-revalidate"
        override contentType() as pure
          <- rtn as String: "application/json"
        override contentLanguage() as pure
          <- rtn as String: "en"
        default operator ?

  defines class

    @Resolved: SYMBOL_DEFINITION: TYPE: "ByETagHTTPResponse"
    ByETagHTTPResponse with trait of HTTPResponse by delegate
      repository as Repository!

      delegate as HTTPResponse?
      addressId as AddressId?
      provideContentLocation as Boolean?

      status <- Integer()
      etagOfAddress <- String()
      
      private ByETagHTTPResponse()
        assert false
        
      ByETagHTTPResponse()
        ->
          addressId as AddressId
          delegate as HTTPResponse
          provideContentLocation as Boolean
        assert addressId? and delegate? and provideContentLocation?

        this.addressId: addressId
        this.provideContentLocation: provideContentLocation
        this.delegate: delegate

      ByETagHTTPResponse()
        ->
          addressId as AddressId
          delegate as HTTPResponse
        this(addressId, delegate, true)
        
      override etag()
        <- rtn as String: String()
        //Only call if un-set.
        etagOfAddress :=? repository.addresses().hashOfAddress(addressId)            
        rtn :=? etagOfAddress
        status :=? ~etagOfAddress? <- 404 else 200

      status()
        -> newStatus as Integer
        status :=: newStatus
      override status() as pure
        <- rtn as Integer: status
      override contentLocation() as pure
        <- rtn as String: status < 400 and provideContentLocation <- `/addresses/${addressId}` else String()
      default operator ?
  <?-
    REST web service.    
  -?>
  defines service
    //The Name of the and the uri it is mapped to
    @Resolved: SYMBOL_DEFINITION: TYPE: "Addresses"
    Addresses :/addresses

      //It is still possible to use dynamic variable capture, like this but see the later code.
      //It used named variables.
      byId() as GET for :/{address-id}
        -> id as String :=: PATH "address-id" //required because different name
        <- response as HTTPResponse?

        addressId <- AddressId(id)
        delegate <- ByETagHTTPResponse(addressId, cacheableHTTPResponse(), false)
        response: (addressId, delegate) with trait of HTTPResponse by delegate
          repository as Repository!

          override content()
            <- rtn as String: String()
            if delegate.status() <> 404
              rtn: addressToJSON(repository.addresses().byId(addressId))
          default operator ?

      //A POST
      operator += :/
        -> request as HTTPRequest :=: REQUEST          
        <- response as HTTPResponse: (
            request: request,
            nonCacheable: plainNonCacheableHTTPResponse()
          ) with trait of HTTPResponse by nonCacheable

            repository as Repository!
            address as Address: Address()
            status as Integer: 201

            override content()
              <- rtn as String: String()
              address: addressFromJson(request.content())
              //But the server sets the ID!
              if address.id?
                status := 422 //unprocessable entity
                rtn: "Do not supply ID in Address, server will set this"
              else
                address.id: AddressId(GUID())
                if ~address?
                  status := 422 //unprocessable entity
                else if repository.addresses() contains address.id
                  status := 409 //conflict
                else
                  repository.addresses() += address

            override contentLocation() as pure
              <- rtn as String: status == 201 <- `/addresses/${address.id}` else String()
            override status() as pure
              <- rtn as Integer: status
            default operator ?
            
      //A DELETE
      operator -= :/{id}
        -> id as String //Assume PATH
        <- response as HTTPResponse: (
            addressId: AddressId(id),
            delegate: ByETagHTTPResponse(
              AddressId(id),
              plainNonCacheableHTTPResponse(),
              false
            )
          ) with trait of HTTPResponse by delegate

            repository as Repository!

            override content()
              <- rtn as String: String()
              //Only if the etag was found can we delete it!
              if delegate.status() <> 404
                repository.addresses() -= repository.addresses().byId(addressId)
                delegate.status(204)
            default operator ?

      //A PATCH which is a merge

      //Note with dynamic variable capture, you can still do it all one one line if you wish.
      operator :~: :/{id}
        ->
          id as String //Assume PATH
          incomingContent as String :=: CONTENT          
        <-
          response as HTTPResponse: (
              addressId: AddressId(id),
              incomingContent: incomingContent,
              delegate: ByETagHTTPResponse(AddressId(id), plainNonCacheableHTTPResponse())
            ) trait HTTPResponse by delegate
            repository as Repository!

            override content()
              <- rtn as String: String()
              if delegate.status() <> 404
                address <- addressFromJson(incomingContent)
                if ~address.id?
                  delegate.status(422) //unprocessable entity
                else if address.id <> addressId
                  delegate.status(400) //the id on the url is not the same as the id in the body content
                else
                  repository.addresses() :~: address
                  delegate.status(204)
            default operator ?

      //A PUT which is a replace for an existing address
      //Now the dynamic variable capture allowed multiple lines and various formatting within the ()
      operator :^: :/{id}
        ->
          id as String //Assume PATH
          content as String :=: CONTENT
        <-
          response as HTTPResponse: (
                addressId: AddressId(id),
                incomingContent: content,
                delegate: ByETagHTTPResponse(AddressId(id), plainNonCacheableHTTPResponse())
              ) trait HTTPResponse by delegate

            repository as Repository!

            override content()
              <- rtn as String: String()
              if delegate.status() <> 404
                address <- addressFromJson(incomingContent)
                if ~address?
                  delegate.status(422) //unprocessable entity
                else if address.id <> addressId
                  delegate.status(400) //the id on the url is not the same as the value in the body content
                else
                  repository.addresses() :^: address
                  delegate.status(204)
            default operator ?

      //Note it is now possible to use named parameters in dynamic variable capture
      //So now, we can do a simpler one liner, define the name of the property and use an expression
      //to set it up, then use the 'by' on a trait to delegate as much or as little as we want to it.
      listAll() :/
        <- response as HTTPResponse: (
            cacheable: cacheableHTTPResponse()
          ) with trait of HTTPResponse by cacheable

          repository as Repository!
          
          override etag()
            <- rtn as String: repository.addresses().hash()
          override content()
            <- rtn as String: addressListToJSON(repository.addresses().listAll())
          default operator ?

  defines component

    @Resolved: SYMBOL_DEFINITION: TYPE: "Repository"
    Repository as abstract
     
      addresses() as pure abstract
        <- rtn as AddressAccess?

    @Resolved: SYMBOL_DEFINITION: TYPE: "InMemoryRepository"
    InMemoryRepository extends Repository
      addresses as AddressAccess: LockableAddressSet()
            
      InMemoryRepository()
        addresses += Address(AddressId(GUID()), "121 Admin Rd.", String(), "Concord", "NH", "03301")
        addresses += Address(AddressId(GUID()), "67 Paperwork Ave", String(), "Manchester", "NH", "03101")
        addresses += Address(AddressId(GUID()), "15 Rose St", "Apt. B-1", "Concord", "NH", "03301")
        addresses += Address(AddressId(GUID()), "39 Sole St.", String(), "Concord", "NH", "03301")
        addresses += Address(AddressId(GUID()), "99 Mountain Rd.", String(), "Concord", "NH", "03301")     
                       
      override addresses() as pure
        <- rtn as AddressAccess: addresses       

  defines application

    @Resolved: SYMBOL_DEFINITION: TYPE: "AccessPoint"
    AccessPoint
      //We could register other services and components here
      
      register InMemoryRepository() as Repository
      //It is possible that if 'services' are registered then EK9 will 'know'
      //that this application is a HTTP serving service and more than just a program.
      register Addresses()
    
  defines program

    @Resolved: SYMBOL_DEFINITION: TYPE: "TestAddressOutput"
    TestAddressOutput with application of AccessPoint
      //Expect injection
      repository as Repository!
                
      stdout <- Stdout()
      
      address1 <- Address(AddressId(GUID()), "121 Admin Rd.", String(), "Concord", "NH", "03301")
      address2 <- Address(AddressId(GUID()), "15 Rose St", "Apt. B-1", "Concord", "NH", "03301")

      addresses <- [address1, address2]
      
      iter <- addresses.iterator()
      //convert contents in iterator to a list
      theAddresses <- cat iter | collect as List of Address
      assert theAddresses?

      stdout.println("Address as JSON")
      stdout.println(addressToJSON(address1))

      jsonAddress <- addressFromJson(addressToJSON(address1))

      stdout.println("Rebuilt address is [" + addressToJSON(jsonAddress) + "]")
      
      stdout.println("Now arrays")

      stdout.println(addressListToJSON(addresses))

      stdout.println("Done basics now all addresses")
      
      allAddresses <- repository.addresses().listAll()
      
      stdout.println(`Hash of all addresses is [${repository.addresses().hash()}]`)
      
      stdout.println(addressListToJSON(allAddresses))
      
      stdout.println("Done!")

//EOF