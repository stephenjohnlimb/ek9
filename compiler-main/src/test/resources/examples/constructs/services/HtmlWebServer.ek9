#!ek9
defines module com.customer.webserver

  defines service

    @Resolved: SYMBOL_DEFINITION: TYPE: "WebServer"
    WebServer :/website

      documentRoot() as pure
        <- rtn as FileSystemPath: FileSystemPath(EnvVars().get("DOCUMENT_ROOT"))
        if not rtn?
          throw Exception("Invalid Document Root")

      //Now I've altered the dynamicVariableCapture so it is possible name parameters.
      //This means we can use expressions in the capture itself and hence can clean up the
      //expression. This small change means that we can remove dummy creation of responses.
      file() as GET for :/{fileName}
        -> fileName as String :=: PATH "fileName"
        <- response as HTTPResponse: (
          webServer: this,
          fileName: fileName
          ) with trait of HTTPResponse
          lastModified as DateTime: DateTime()

          private lastModifiedOfTextFile() as pure
            <- rtn as DateTime: DateTime()
            file <- textFile()
            if not file.isReadable()
              Stdout().println(`${file} is not readable`)

            rtn :=? file.lastModified()

          private textFile() as pure
            <- rtn as TextFile: TextFile(webServer.documentRoot() + FileSystemPath(fileName))

          override lastModified() as pure
            <- rtn as DateTime: DateTime()
            lastModified :=? lastModifiedOfTextFile()
            rtn :=? lastModified

          override cacheControl() as pure
            <- rtn as String: "public,max-age=3600,must-revalidate"
          override contentType() as pure
            <- rtn as String: "text/html"
          override contentLanguage() as pure
            <- rtn as String: "en"
          override status() as pure
            <- rtn as Integer: lastModified? <- 200:404

          override content()
            <- rtn as String: String()
            if lastModified?
              cat textFile().input() > rtn
          default operator ?
//EOF