#!ek9
defines module com.customer.classes

  <?-
    Moved the open to be like abstract in its position, so make the definition more readable - you can use extends or is
    'defines class Extensions extends Base as open'
    So anything that's defined abstract is automatically open, but a class that can be instantiated is automatically
    closed (ie cannot be extended) unless it is stated as being 'open' for extension.
    
    Note I'm also trying out assignment with just = rather than :=, but you can also just use : which looks and feels
    quite nice in some locations.
  -?>
  defines class
  
    //If you say it is abstract then it is by default 'open'
    @Resolved: SYMBOL_DEFINITION: TYPE: "Base"
    Base as abstract
      //Note new declaration indicating no memory allocated is possible
      aField as String?

      Base()
        //Now initialise the field.
        aField :=? "Steve"

      singleMethod()
        <- rtn String = "Steve"
        
    //So this could not be extended as not abstract and not open
    @Resolved: SYMBOL_DEFINITION: TYPE: "Extension1"
    Extension1 extends Base
      otherMethod()
        <- rtn String: "OK"
        
      override singleMethod()
        <- rtn String: "Steve"
        
    //Now because I've said open it can be used and extended
    @Resolved: SYMBOL_DEFINITION: TYPE: "Extension2"
    Extension2 extends Base as open
      override singleMethod()
        <- rtn String = "Steven"

    //So extension2 can be used to extend from
    @Resolved: SYMBOL_DEFINITION: TYPE: "Extension3A"
    Extension3A extends Extension2
      override singleMethod()
        <- rtn String := "Stephen"

    //This is the same as above but the check we're making here is to ensure hierarchy
    //@Implements: EXPLICIT_TYPE_SYMBOL_DEFINITION: TYPE: "Extension3B": "Extension2"
    Extension3B extends Extension2
      override singleMethod()
        <- rtn String := "Stephen"

  defines function

    BaseFunction as pure abstract
      -> arg0 as String
      <- rtn as String?

    //Check this directive works for functions as well
    //@Implements: EXPLICIT_TYPE_SYMBOL_DEFINITION: FUNCTION: "ExtendsFunction": "BaseFunction"
    ExtendsFunction is BaseFunction as pure
      -> arg0 as String
      <- rtn as String: "[" + arg0 + "]"

//EOF