#!ek9
defines module com.customer.just.employees
<?-
  Example from https://realpython.com/inheritance-composition-python/
  But implemented in EK9, slight alteration to hierarchy and use of abstract classes.
  I would have probably had Employee, Person, Address and pulled together with Employment.
-?>
  defines trait

    @Resolved: SYMBOL_DEFINITION: TYPE: "IRole"
    IRole
      performDuties()
        -> hours as Integer
        <- activity as String?

    IPayrollCalculator
      trackWork()
        -> hours as Integer
      calculatePayroll()
        <- amount as Money?

  defines record
    //Added support for type inference back in for fields/properties
    //but only is default constructor or a literal
    @Resolved: SYMBOL_DEFINITION: TYPE: "Address"
    Address
      street <- String()
      street2 <- String()
      city <- String()
      state <- String()
      zipcode <- String()

      //Might allow default with matching number type and name of parameters.
      Address()
        ->
          street as String
          street2 as String
          city as String
          state as String
          zipcode as String

        this.street :=: street
        this.street2 :=: street2
        this.city :=: city
        this.state :=: state
        this.zipcode :=: zipcode

      operator ? as pure
        <- rtn as Boolean: street? and city? and state? and zipcode?

      operator $ as pure
        <- rtn as String: String()
        mainLocation <- `${city} ${state} ${zipcode}`

        if street2?
          rtn :=? `${street}\n${street2}\n${mainLocation}`
        else
          rtn :=? `${street}\n${mainLocation}`


  defines class

    @Resolved: SYMBOL_DEFINITION: TYPE: "Employee"
    Employee with trait of IRole by role, IPayrollCalculator by payroll
      id <- Integer()
      name <- String()
      address <- Address()
      role as IRole?
      payroll as IPayrollCalculator?

      //You can make a default constructor unavailable if you wish
      default private Employee()
      //No body

      //You could just use
      //default Employee() + the paramaters and the ek9 compiler would do that implementation for you.
      Employee()
        ->
          id as Integer
          name as String
          address as Address
          role as IRole
          payroll as IPayrollCalculator
        this.id: id
        this.name: name
        this.address: address
        this.role: role
        this.payroll: payroll

      work()
        -> hours as Integer

        stdout <- Stdout()
        duties <- performDuties(hours)
        stdout.println(`Employee ${this}:`)
        stdout.println(` - ${duties}\n`)        
        payroll.trackWork(hours)

      address()
        <- rtn as Address: address

      operator $ as pure
        <- rtn as String: $id + " - " + name

    AddressBook
      employeeAddresses as Dict of (Integer, Address): {
        1: Address("121 Admin Rd.", String(), "Concord", "NH", "03301"),
        2: Address("67 Paperwork Ave", String(), "Manchester", "NH", "03101"),
        3: Address("15 Rose St", "Apt. B-1", "Concord", "NH", "03301"),
        4: Address("39 Sole St.", String(), "Concord", "NH", "03301"),
        5: Address("99 Mountain Rd.", String(), "Concord", "NH", "03301")
        }

      getEmployeeAddress()
        -> employeeId as Integer
        <- rtn as Address: employeeAddresses.get(employeeId)

    ProductivitySystem
      roles as Dict of (String, IRole): {
        "manager": ManagerRole(),
        "secretary": SecretaryRole(),
        "sales": SalesRole(),
        "factory": FactoryRole()
        }

      getRole()
        -> roleId as String
        <- rtn as IRole: roles.get(roleId)

      track()
        ->
          employees as List of Employee
          hours as Integer

        stdout <- Stdout()
        stdout.println("Tracking Employee Productivity")
        stdout.println("==============================")
        for employee in employees
          employee.work(hours)
        stdout.print("\n")

    // Employee roles

    ManagerRole with trait of IRole
      override performDuties()
        -> hours as Integer
        <- activity as String: `screams and yells for ${hours} hours.`

    SecretaryRole with trait of IRole
      override performDuties()
        -> hours as Integer
        <- activity as String: `does paperwork for ${hours} hours.`

    SalesRole with trait of IRole
      override performDuties()
        -> hours as Integer
        <- activity as String: `expends ${hours} hours on the phone.`

    FactoryRole with trait of IRole
      override performDuties()
        -> hours as Integer
        <- activity as String: `manufactures gadgets for ${hours} hours.`

    //Payroll classes

    PayrollSystem
      employeePolicies as Dict of (Integer, PayrollPolicy): {
        1: SalaryPolicy(3000#USD),
        2: SalaryPolicy(1500#USD),
        3: CommissionPolicy(1000#USD, 100#USD),
        4: HourlyPolicy(15#USD),
        5: HourlyPolicy(9#USD)
        }

      getPolicy()
        -> employeeId as Integer
        <- rtn as PayrollPolicy: employeePolicies.get(employeeId)

      calculatePayroll()
        -> employees as List of Employee
        stdout <- Stdout()
        stdout.println("Calculating Payroll")
        stdout.println("===================")
        for employee in employees
          stdout.println(`Payroll for: ${employee}`)
          stdout.println(`- Check amount: ${employee.calculatePayroll()}`)
          if employee.address()?
              stdout.println(`- Sent to:\n${employee.address()}`)              
          stdout.print("\n")

    PayrollPolicy with trait of IPayrollCalculator as abstract
      hoursWorked as Integer: 0

      override trackWork()
        -> hours as Integer
        hoursWorked += hours

      hoursWorked()
        <- hours as Integer: hoursWorked

      default operator ?

    HourlyPolicy extends PayrollPolicy
      hourRate as Money: Money()

      HourlyPolicy()
        -> hourRate as Money
        this.hourRate = hourRate

      override calculatePayroll()
        <- amount as Money: hourRate * hoursWorked()

    SalaryPolicy extends PayrollPolicy as open
      weeklySalary as Money: Money()

      SalaryPolicy()
        -> weeklySalary as Money
        this.weeklySalary = weeklySalary

      override calculatePayroll()
        <- amount as Money: weeklySalary

    CommissionPolicy extends SalaryPolicy
      commissionPerSale as Money: Money()

      CommissionPolicy()
        ->
          weeklySalary as Money
          commissionPerSale as Money
        super(weeklySalary)
        this.commissionPerSale = commissionPerSale

      override calculatePayroll()
        <- amount as Money: super.calculatePayroll()
        amount += commission()

      private commission()
        <- amount as Money: commissionPerSale/5.0 * hoursWorked()

    // Part of the driver to create the employees

    EmployeeDatabase
      productivitySystem as ProductivitySystem: ProductivitySystem()
      payrollSystem as PayrollSystem: PayrollSystem()
      addresses as AddressBook: AddressBook()

      employees()
        <- rtn <- List() of Employee

        //You can use named variable if you prefer
        rtn += createEmployee(id: 1, name: "Mary Poppins", theRole: "manager")
        rtn += createEmployee(2, "John Smith", "secretary")
        rtn += createEmployee(3, "Kevin Bacon", "sales")
        rtn += createEmployee(4, "Jane Doe", "factory")
        rtn += createEmployee(5, "Robin Williams", "secretary")

      private createEmployee()
        ->
          id as Integer
          name as String
          theRole as String
        <- //a bit of a mouth full, but you can use named parameters like this if you wish.
          rtn as Employee: Employee(
            id: id,
            name: name,
            address: addresses.getEmployeeAddress(id),
            role: productivitySystem.getRole(theRole),
            payroll: payrollSystem.getPolicy(id)
            )

  defines program

    @Resolved: SYMBOL_DEFINITION: TYPE: "Demonstration"
    Demonstration()
      productivitySystem <- ProductivitySystem()
      payrollSystem <- PayrollSystem()

      employeeDatabase <- EmployeeDatabase()
      employees <- employeeDatabase.employees()

      productivitySystem.track(employees, 40)
      payrollSystem.calculatePayroll(employees)
      
//EOF