#!ek9
<?-
  Guards in expressions.
-?>
defines module bad.guards

  defines class

    <?-
      Just used to ensure that exception checking can work with classes that extend Exception.
    -?>
    BespokeException is Exception
      default BespokeException()

      BespokeException()
        -> arg0 as String
        super(arg0)

    //Note how these values are left unset
    //Then use :=? in a pure context.
    //So strictly speaking close as pure it not 'totally pure' - it has a side effect.
    //In this case it is accepted that going from 'un-set' to a specific value is acceptable
    //even in 'pure'.
    //Note that the idea of open/close is for resources like file handles of tcp sockets.
    //It is not intended for freeing up memory or anything like that.
    SomeResource
      resourceName as String: String()
      opened as Boolean: Boolean()
      closed as Boolean: Boolean()

      <?-
        Stop default construction.
      -?>
      default private SomeResource() as pure

      SomeResource() as pure
        -> arg0 String
        resourceName :=? arg0

      getValue()
        <- rtn <- "Just a fixed value"

      <?-
        Open this conceptual resource.
      -?>
      operator open as pure
        <- rtn as SomeResource: this
        opened :=? true

      <?-
        Open this conceptual resource.
      -?>
      operator close as pure
        closed :=? true

      override operator ? as pure
        <- rtn as Boolean: opened? and opened and not (closed? and closed)

  defines function

    getValueFunction() as pure
      <- rtn <- 22

    getSomeString() as pure
      <- rtn <- "Fixed Value"

    <?-
      Function to be used later in switch statements.
      Also an example of a pure function that has strict assignment rules
      this also demonstrates how the 'if/else' check for all paths resulting
      in values being initialised.
    -?>
    currentTemperature() as pure
      -> country as String
      <- temp as Integer?

      if country == "GB"
        temp :=? 20
      else if country == "DE"
        temp :=? 41
      else
        temp :=? 31

  defines program

    ASwitchWithGuard()
      temperature <- Integer()

      //The guard may leave 'resultText' un-initialized if the return from currentTemperature was 'un-set'
      //This would cause the switch block not to execute and hence the return of 'result' would not execute
      //We'd then have resultText looking like it has been initialised when in fact it has not been.
      //While technically you could accept this, on a visual scan it might be hard to work out what is wrong.
      //Hence EK9 does not allow guards in expressions like this
      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      resultText <- switch temperature ?= currentTemperature("GB") with temperature
        <- result String: String()
        case < 12
          result: "Moderate"

      assert resultText?

    <?-
      Example of declaring a variable and then using a guard.
      If the guard resulted in 'not set' then resultText would also be not set (because result is an unset String)
      and the switch would not have even been executed (nor any case functions).
      Note you can use either 'with' or 'then' to join the guard to the switch variable.
    -?>
    AnotherSwitchWithGuard()
      temperature <- Integer()
      multiplier <- 5

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      resultText <- switch temperature ?= currentTemperature("GB") with temperature
        <- result <- String()
        case < 12
          result: "Moderate"
        case > 10*multiplier
          result: "Very High"
        case 25, 26, 27
          result: "Slightly High"
        case 21, 22, 23, 24
          result: "Perfect"
        default
          result: "Suitable"

      assert resultText?

    <?-
      This demonstrates an invalid guard assignment - that only if the 'someValue ?= getSomeString()' results in
      'someValue' being set, executes the rest of the main block.
      That main block consists of accepting and argument that 'opens' a resource (hence it will get auto-closed at end of scope).
      Then the try/function has a returning value, that uses the resource to get a value.
      Any exceptions fly back - but if successful rtn is set and the opened 'SomeResource' is now closed.
      But, this is an invalid use, because it employs the 'guard', this means that 'result' 'lhs' may not be initialised
      as the whole try operation may not execute if the result of 'someValue ?= getSomeString()' leaves 'someValue' un-set.
    -?>
    SimpleTryCatchWithDeclarationGuardReturn()
      someValue as String?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- function someValue ?= getSomeString()
        -> theResource <- SomeResource(someValue).open()
        <- rtn as String: theResource.getValue()

      assert result?

    <?-
      There is a preflow guard here, this make little different to variables in the loop.
      But it does mean that accumulator is initialised. But it also means that the loop is now conditional
      and so 'total' may remain uninitialised (even though the loop does set it).
      This is because the guard may stop the loop from executing at all.
    -?>
    ForLoopExpression()
      accumulator as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- for accumulator ?= getValueFunction() then value in getValues()

        <- total as Integer?
        accumulator += value
        total: accumulator
      assert result?

    <?-
      While total is set and it looks like 'someUnsetVariable' is always set, the guard makes the
      whole while conditional. Meaning that it is possible 'someUnsetVariable' is never set.
      But even in this situation the return 'total' is set and is used to populate 'result' -
      but it will still only have the value of '0', i.e. its initial value.
    -?>
    WhileLoopExpression1()
      -> checkValue as Boolean
      conditionToContinue as Boolean?
      someUnsetVariable as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- while conditionToContinue ?=  Boolean(checkValue) then conditionToContinue
        <- total <- 0
        conditionToContinue: total < 11
        someUnsetVariable: total++

      assert result?

      assert someUnsetVariable?

    <?-
      Now 'someUnsetVariable' looks like is is always initialised in a do/while, but because
      of the guard condition it may remain uninitialised, so issue error.
    -?>
    DoWhileLoopExpression()
      -> checkValue as Boolean
      conditionToContinue <- Boolean(checkValue)
      someUnsetVariable as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- do conditionToContinue ?= Boolean(checkValue)
        <- total <- 0
        conditionToContinue: total++ < 10
        someUnsetVariable: total
      while conditionToContinue

      //Typically we'd expect this to have the value from the return 'total' - but its initial value.
      //But it would have been initialised (just unset).
      assert result?
      assert someUnsetVariable?

    <?-
      Now because a guard is introduced here, it means that the whole try might not
      get executed, this means that var might still be uninitialized and also the 'rtn' value
      might not above been initialised.
    -?>
    TryCatchWithGuardExpression1()
      var as Integer?
      unrelatedValue as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- try unrelatedValue ?= getValueFunction()
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn as Integer?
        var: unrelatedValue
        rtn: var
      catch
        -> ex as Exception
        var: unrelatedValue
        rtn: var

      assert var?
      assert result?

    <?-
      While there is still a guard here the, return value is now initialised.
    -?>
    TryCatchWithGuardExpression2()
      var as Integer?
      unrelatedValue as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      result <- try unrelatedValue ?= getValueFunction()
        <- rtn as Integer: unrelatedValue
        var: unrelatedValue
      catch
        -> ex as Exception
        var: unrelatedValue

      assert var?
      assert result?

    SwitchExpressionButPreFlowOnUnrelatedVariable1
      conditionalValue <- 40
      initialisedByGuard <- Integer()
      var as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      returningValue <- switch initialisedByGuard ?= getValueFunction() with conditionalValue
        <- rtn666 as Integer?
        case < 24
          var: initialisedByGuard
          rtn666: initialisedByGuard
        case < 30
          var: initialisedByGuard
        default
          var: initialisedByGuard

      assert var?
      assert returningValue?

    <?-
      While you may think that 'rtn666' is always set; as it is in each case and the default, but
      as there is a guard, the whole switch may not execute, so this means that the 'rtn666' value
      would have been left uninitialised.
    -?>
    SwitchExpressionButPreFlowOnUnrelatedVariable2
      conditionalValue <- 40
      initialisedByGuard <- Integer()
      var as Integer?

      @Error: SYMBOL_DEFINITION: GUARD_USED_IN_EXPRESSION
      returningValue <- switch initialisedByGuard ?= getValueFunction() with conditionalValue
        <- rtn666 as Integer?
        case < 24
          var: initialisedByGuard
          rtn666: initialisedByGuard
        case < 30
          var: initialisedByGuard
          rtn666: var
        default
          rtn666: 666

      assert var?
      assert returningValue?

//EOF

