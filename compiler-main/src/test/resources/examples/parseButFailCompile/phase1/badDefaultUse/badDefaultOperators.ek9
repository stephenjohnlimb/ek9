#!ek9
<?-
  Checks for early misuse of default operators.
-?>
defines module earlybad.defaultoperators.examples

  defines record
    R1
      property1 <- String()

      default R1()

      //Test explicit definition and also defaulting
      operator >= as pure
        -> arg0 as R1
        <- rtn as Boolean: true

      //At this phase we dont detect duplicates.
      default operator >=

      //Now check the other way around

      default operator >

      //At this phase we dont detect duplicates.
      operator > as pure
        -> arg0 as R1
        <- rtn as Boolean: true

      //Quick check to ensure operators that cannot be defaulted result in an error.
      //There are more operators than this that cannot be defaulted.
      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator #<

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator #>

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator empty

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator contains

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator and

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator or

      @Error: SYMBOL_DEFINITION: OPERATOR_DEFAULT_NOT_SUPPORTED
      default operator xor

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator <= as pure
        -> arg0 as R1
        <- rtn as Boolean: false

      //We will state we want it defaulting, but then provide an implementation.
      //This is an error in understanding what 'default' means.
      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator ? as pure
        <- rtn as Boolean: property1?

      //It is possible for EK9 to fill in the rest of the operators
      default operator

  defines trait

    T1

      //Now this can be marked as abstract
      operator > as pure abstract
        -> arg0 as T1
        <- rtn as Boolean?

      //Also an implementation can be provided on a trait.
      operator <=> as pure
        -> arg0 as T1
        <- rtn as Integer: 0

      //But it is not possible to default operators on a trait
      @Error: SYMBOL_DEFINITION: DEFAULT_AND_TRAIT
      default operator >=

      @Error: SYMBOL_DEFINITION: DEFAULT_AND_TRAIT
      default operator <= as pure
        -> arg0 as T1
        <- rtn as Boolean: false

      //Not possible for EK9 compiler to fill in defaults
      @Error: SYMBOL_DEFINITION: DEFAULT_AND_TRAIT
      default operator

  defines class

    C1

      //This is fine
      operator <=> as pure
        -> arg0 as C1
        <- rtn as Integer: 0

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator >= as pure
        -> arg0 as C1
        <- rtn as Boolean?

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator > as pure

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator <= as pure
        -> arg0 as C1

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator < as pure abstract
        -> arg0 as C1
        <- rtn as Boolean?

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator <> as pure
        -> arg0 as C1
        <- rtn as Boolean?
        rtn: true

      default operator

  defines component

    Comp1

      //This is OK
      operator <=> as pure
        -> arg0 as Comp1
        <- rtn as Integer: 0

      //Test the various scenarios where modifiers and parts of a signature have been added
      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator > as pure

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator >= as pure abstract

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator < as abstract

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator ==
        -> arg0 as Comp1

      @Error: SYMBOL_DEFINITION: DEFAULT_WITH_OPERATOR_SIGNATURE
      default operator <>
        -> arg0 as Comp1
        <- rtn as Boolean: false

      default operator
//EOF