#!ek9
<?-
  Examples of dispatchers working and also lots of common errors.
-?>
defines module bad.dispatchermethods

  defines trait

    <?-
      Define a trait with a couple of methods.
      These are then used by a class to make them dispatchable.
    -?>
    T1
      process()
        -> arg as Integer
        assert arg?
      process()
        -> arg as Float
        assert arg?

  <!-
    Scenarios to test and find bad dispatcher configurations
  -!>
  defines class

    <?-
      Checks to ensure that private dispatcher entry is Ok with protected matching methods and public ones.
    -?>
    ValidDispatcher1 as open

      private process() as dispatcher
        -> arg as Any
        assert arg?

      //Do allow protected methods, even though main is private .
      protected process()
        -> arg as Float
        assert arg?

      process()
        -> arg as Integer
        assert arg?

    <?-
      Here is that class that now makes the methods on trait T1 usable
      not only directly, but also via the dispatcher method as shown.
    -?>
    ValidDispatcher2 with trait of T1
      process() as dispatcher
        -> arg as Any
        assert arg?


    <?-
      Demonstration that is is possible to have two separate dispatchers (ig you really want/need to).
      Should really be avoided if possible as it can lead to a single class doing too much.
    -?>
    ValidDispatcher3

      private process() as dispatcher
        -> arg as Any
        assert arg?

      private process()
        -> arg as Float
        assert arg?

      private process()
        -> arg as Integer
        assert arg?

      private yetMoreProcessing() as dispatcher
        -> arg as Any
        assert arg?

      private yetMoreProcessing()
        -> arg as Float
        assert arg?

      private yetMoreProcessing()
        -> arg as String
        assert arg?

    <?-
      Now, while the methods should support dispatcher, the fact the arguments are of differing 'Genus' means this is not allowed.
      But if you use the 'Any' type you can get around this meaning you can pass 'Anything' into a dispatcher.
      So, if the dispatcher uses a 'Consumer' or a "Float" then the gens on all the dispatcher methods 'process' here below
      must all be the same. But if the dispatcher argument(s) are 'Any'. Then functions, components, classes, traits can all be handled.
    -?>
    ValidDispatcher6

      process() as dispatcher
        -> arg as Any
        assert arg?

      process()
        -> arg as Consumer of Integer
        assert arg?

      process()
        -> arg as Float
        assert arg?

    <?-
      There is a mismatch on the same named method as a dispatcher
      the first has one parameter, the second two.
    -?>
    BadDispatcher1

      process() as dispatcher
        -> arg as Any
        assert arg?

      @Error: FULL_RESOLUTION: INVALID_NUMBER_OF_PARAMETERS
      process()
        ->
          arg1 as Integer
          arg2 as Integer
        assert arg1? and arg2?

    BadDispatcher2

      <?-
        Must have either one or two arguments.
      -?>
      @Error: FULL_RESOLUTION: INVALID_NUMBER_OF_PARAMETERS
      process() as dispatcher
        var <- 1
        assert var?

    BadDispatcher3

      <?-
        Must have either one or two arguments.
      -?>
      @Error: FULL_RESOLUTION: INVALID_NUMBER_OF_PARAMETERS
      process() as dispatcher
        ->
          arg1 as Integer
          arg2 as Integer
          arg3 as Integer
        assert arg1? and arg2? and arg3?

    <?-
      If the main dispatcher entry point is a pure then all matching dispatcher methods must also be pure.
    -?>
    BadDispatcher4

      process() as pure dispatcher
        -> arg as Any
        assert arg?

      @Error: FULL_RESOLUTION: DISPATCHER_PURE_MISMATCH
      process()
        -> arg as Integer
        assert arg?

    <?-
      Used to show that private methods in a super class would not be used in the dispatcher even
      though the method meets the name and signature suitable to be a dispatcher.
    -?>
    SomeBaseClass as open

      @Error: FULL_RESOLUTION: DISPATCHER_PRIVATE_IN_SUPER
      private process()
        -> arg as Integer
        assert arg?

    BadDispatcher5 extends SomeBaseClass

      process() as dispatcher
        -> arg as Any
        assert arg?

    <?-
      There must only be one method marked as a dispatcher method.
      But also because of the multiple dispatchers the compiler picks up Integer and Float and then
      looks at 'Any' as well and that means it issues a further error.
    -?>
    BadDispatcher6

      @Error: FULL_RESOLUTION: DISPATCHERS_ONLY_HAVE_ONE_METHOD_ENTRY_POINT_MARKED
      process() as dispatcher
        @Error: FULL_RESOLUTION: INCOMPATIBLE_PARAMETER_GENUS
        -> arg as Any
        assert arg?

      @Error: FULL_RESOLUTION: DISPATCHERS_ONLY_HAVE_ONE_METHOD_ENTRY_POINT_MARKED
      process() as dispatcher
        -> arg as Integer
        assert arg?

      @Error: FULL_RESOLUTION: DISPATCHERS_ONLY_HAVE_ONE_METHOD_ENTRY_POINT_MARKED
      process() as dispatcher
        -> arg as Float
        assert arg?


//EOF