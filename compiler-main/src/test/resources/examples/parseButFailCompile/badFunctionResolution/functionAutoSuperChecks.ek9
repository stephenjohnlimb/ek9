#!ek9
<?-

  The main purpose of this test is to ensure that the EK9 compiler
  can create super functions for Suppliers, Consumers, Predicates, Functions and Comparators.
  Now also added none pure variants called Producer and Accessor (for Supplier and Consumer).
  The idea is that the semantics of the above are known and so the compiler will create
  synthetic 'super functions' of a generic nature where the signatures match.

  Now Suppliers/Consumers and BiConsumers are pure by default. So only pure functions that meet
  the semantics will have those generic function types auto applied as supers.
  For none pure versions use Producer, Acceptor, BiAcceptor, Assessor, BiAssessor (non-pure predicates)
  and Routine, BiRoutine (non-pure functions).

  TODO add in tests and also check variable names and comments.
-?>
defines module auto.function.checks

  defines function

    <?-
      A basic functions that extend a base.
      This is just to check that that no matter where in the function super
      hierarchy the 'Supplier' is created.
    -?>
    SomeBase() as abstract
      <- rtn as String?

    <?-
      A concrete version of the above.
      Will be used later to check that it is a 'Producer of String'.
      This is because it has a super of 'SomeBase' and that has a 'super function' added to it
      by the EK9 compiler and that 'super function' is a 'Producer of String'.

      'ConcreteProducer' => 'SomeBase' => 'Producer of String'
    -?>
    ConcreteProducer() is SomeBase
      <- rtn <- "Stephen"

    //Lots of functions that meet the different EK signatures in different ways.
    //But note that only those that are pure get the auto appropriate super applied.

    CouldBeAProducer()
      <- rtn <- "Steve"

    <?-
      So while the signature is the same, this is 'pure' - hence a Supplier.
    -?>
    CouldBeASupplier() as pure
      <- rtn <- "Steve"

    <?-
      So if not pure it is down as an Acceptor, if pure it would be a Consumer.
    -?>
    CouldBeAnAcceptor()
      -> arg0 as Integer
      assert arg0?

    CouldBeAConsumer() as pure
      -> arg0 as Integer
      assert arg0?

    CouldBeABiAcceptor()
      ->
        arg0 as Integer
        arg1 as Date
      assert arg0? and arg1?

    CouldBeABiConsumer() as pure
      ->
        arg0 as Integer
        arg1 as Date
      assert arg0? and arg1?

    <?-
      A unary operator must have same types in and returned and also must be pure.
    -?>
    CouldBeAUnaryOperator() as pure
      -> arg0 as String
      <- rtn as String: arg0.lowerCase()

    <?-
      While this has the same functionality as above, importantly it is not marked as pure.
      For this reason it does not meet the requirements for being an EK9 unary operator.
      It maybe that the ek9 developer actually needs this function to complete a range of actions that are not pure.
      There is nothing wrong in that, but it is not semantically an EK9 UnaryOperator in that case.
    -?>
    CannotBeAUnaryOperator()
      -> arg0 as String
      <- rtn as String: arg0.lowerCase()

    <?-
      Single type in and different type (other than Boolean) in the return, and is marked pure. This is an EK9 Function.
    -?>
    CouldBeAFunction() as pure
      -> arg0 as String
      <- rtn as Integer: length arg0

    <?-
      As above but not pure and hence not an EK9 Function, but is an EK9 Routine
    -?>
    CouldBeARoutine()
      -> arg0 as String
      <- rtn as Integer: length arg0

    <?-
      Single type in and Boolean type in the return, and is marked pure. This is an EK9 Predicate.
    -?>
    CouldBeAPredicate() as pure
      -> arg0 as String
      <- rtn as Boolean: arg0?

    <?-
      As above but not pure and hence not an EK9 Predicate, but it is an assessor.
    -?>
    CouldBeAnAssessor()
      -> arg0 as String
      <- rtn as Boolean: arg0?

    <?-
      Two arguments of same type in, Integer return and marked pure - this is a Comparator.
    -?>
    CouldBeAComparator() as pure
      ->
        arg0 as String
        arg1 as String
      <-
        rtn as Integer: arg0 <=> arg1

    <?-
      As above but not pure and hence not an EK9 Comparator
    -?>
    CannotBeAComparator()
      ->
        arg0 as String
        arg1 as String
      <-
        rtn as Integer: arg0 <=> arg1

    <?-
      Two arguments in, Any type. Return Boolean and marked pure - this is a BiPredicate.
    -?>
    CouldBeABiPredicate() as pure
      ->
        arg0 as String
        arg1 as Integer
      <-
        rtn as Boolean: length arg0 > arg1

    <?-
      As above but not pure and hence not an EK9 BiPredicate, but it is a BiAssessor.
    -?>
    CouldBeABiAssessor()
      ->
        arg0 as String
        arg1 as Integer
      <-
        rtn as Boolean: length arg0 > arg1

    <?-
      Two arguments in, Any type. Return (other than Boolean or Integer) and marked pure - this is a BiFunction.
    -?>
    CouldBeABiFunction() as pure
      ->
        arg0 as String
        arg1 as Integer
      <-
        rtn as String: arg0 + $arg1

    <?-
      As above but not pure and hence not an EK9 BiFunction, but it is a BiRoutine.
    -?>
    CouldBeABiRoutine()
      ->
        arg0 as String
        arg1 as Integer
      <-
        rtn as String: arg0 + $arg1

    <?-
      Now some functions that are used to ensure we have actually
      extended (behind the scenes).
      So these are used later in the driver functions, this checks that the right/wrong types are detected.
    -?>
    CheckSupplierOfString()
      -> arg0 as Supplier of String
      assert arg0?

    CheckProducerOfString()
      -> arg0 as Producer of String
      assert arg0?

    CheckConsumerOfInteger()
      -> arg0 as Consumer of Integer
      assert arg0?

    CheckAcceptorOfInteger()
      -> arg0 as Acceptor of Integer
      assert arg0?

    CheckBiConsumerOfIntegerAndDate()
      -> arg0 as BiConsumer of (Integer, Date)
      assert arg0?

    CheckBiAcceptorOfIntegerAndDate()
      -> arg0 as BiAcceptor of (Integer, Date)
      assert arg0?

    CheckUnaryOperatorOfString()
      -> arg0 as UnaryOperator of String
      assert arg0?

    CheckFunctionOfStringInteger()
      -> arg0 as Function of (String, Integer)
      assert arg0?

    CheckRoutineOfStringInteger()
      -> arg0 as Routine of (String, Integer)
      assert arg0?

    CheckPredicateOfString()
      -> arg0 as Predicate of String
      assert arg0?

    CheckAssessorOfString()
      -> arg0 as Assessor of String
      assert arg0?

    CheckComparatorOfString()
      -> arg0 as Comparator of String
      assert arg0?

    CheckBiFunctionOfStringIntegerString()
      -> arg0 as BiFunction of (String, Integer, String)
      assert arg0?

    CheckBiRoutineOfStringIntegerString()
      -> arg0 as BiRoutine of (String, Integer, String)
      assert arg0?

    CheckBiPredicateOfStringInteger()
      -> arg0 as BiPredicate of (String, Integer)
      assert arg0?

    CheckBiAssessorOfStringInteger()
      -> arg0 as BiAssessor of (String, Integer)
      assert arg0?

    //Now the drivers that use the 'Checker' functions with the various functions.
    //This is to ensure that the right types have been added (or not added as the case maybe)

    <?-
      Checks Supplier, Consumer and BiConsumer.
      Now also check Producers, Acceptors and BiAcceptors
    -?>
    TestSuppliersProducersAndConsumersAcceptors()
      //Check the auto application of super functions being a Supplier/Producer
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckSupplierOfString(CouldBeAProducer)
      CheckSupplierOfString(CouldBeASupplier)

      CheckProducerOfString(CouldBeAProducer)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckProducerOfString(CouldBeASupplier)

      //Specifically check this as it has an abstract super and the super of that should be a Supplier.
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckSupplierOfString(ConcreteProducer)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckConsumerOfInteger(CouldBeAnAcceptor)
      CheckConsumerOfInteger(CouldBeAConsumer)

      CheckAcceptorOfInteger(CouldBeAnAcceptor)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckAcceptorOfInteger(CouldBeAConsumer)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiConsumerOfIntegerAndDate(CouldBeABiAcceptor)
      CheckBiConsumerOfIntegerAndDate(CouldBeABiConsumer)

      CheckBiAcceptorOfIntegerAndDate(CouldBeABiAcceptor)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiAcceptorOfIntegerAndDate(CouldBeABiConsumer)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckSupplierOfString(CouldBeAnAcceptor)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckSupplierOfString(CouldBeAConsumer)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckProducerOfString(CouldBeAnAcceptor)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckProducerOfString(CouldBeAConsumer)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckConsumerOfInteger(CouldBeAProducer)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckConsumerOfInteger(CouldBeASupplier)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckAcceptorOfInteger(CouldBeAProducer)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckAcceptorOfInteger(CouldBeASupplier)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckConsumerOfInteger(CouldBeABiAcceptor)
      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckConsumerOfInteger(CouldBeABiConsumer)

    <?-
      Checks the UnaryOperator, Function, Predicate and Comparator.
      This includes the 'Bi' versions of Predicate and Function.
    -?>
    CheckUnaryFunctionAndPredicate()

      //UnaryOperator checks
      CheckUnaryOperatorOfString(CouldBeAUnaryOperator)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckUnaryOperatorOfString(CannotBeAUnaryOperator)

      //Function checks
      CheckFunctionOfStringInteger(CouldBeAFunction)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckFunctionOfStringInteger(CouldBeARoutine)

      //Predicate checks
      CheckPredicateOfString(CouldBeAPredicate)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckPredicateOfString(CouldBeAnAssessor)

      //Comparator checks
      CheckComparatorOfString(CouldBeAComparator)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckComparatorOfString(CannotBeAComparator)

      //BiFunction checks
      CheckBiFunctionOfStringIntegerString(CouldBeABiFunction)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiFunctionOfStringIntegerString(CouldBeABiRoutine)

      //BiPredicate checks
      CheckBiPredicateOfStringInteger(CouldBeABiPredicate)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiPredicateOfStringInteger(CouldBeABiAssessor)

      //Routine checks - AKA non-pure Functions
      CheckRoutineOfStringInteger(CouldBeARoutine)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckRoutineOfStringInteger(CouldBeAFunction)

      //Assessor checks - AKA non-pure Predicates
      CheckAssessorOfString(CouldBeAnAssessor)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckAssessorOfString(CouldBeAPredicate)

      //BiRoutine checks - AKA non-pure BiFunctions
      CheckBiRoutineOfStringIntegerString(CouldBeABiRoutine)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiRoutineOfStringIntegerString(CouldBeABiFunction)

      //BiAssessor checks - AKA - non-pure BiPredicates
      CheckBiAssessorOfStringInteger(CouldBeABiAssessor)

      @Error: FULL_RESOLUTION: FUNCTION_PARAMETER_MISMATCH
      CheckBiAssessorOfStringInteger(CouldBeABiPredicate)

//EOF

