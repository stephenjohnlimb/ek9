#!ek9
defines module introduction

  defines class
    Example as open
      aField as String?
      bField as String := String()
      cField as String := "Steve"
      dField <- "Stephen"

      Example() as pure
        aField :=? "Now Initialised"

    Example2 extends Example
      //Note I've done this to highlight that fields are private in classes
      //Therefore same variable name can be reused.
      aField <- 6
      zField <- 2025-08-11

      //Also there is no need for me to define a constructor
      //But Ek9 should define an implicit constructor, so we should see that in the IR

<!-
  defines function
    aSimpleFunction()
      -> arg0 as String
      <- rtn as String: String()

      someLocal as String?
      someLocal = "Hi"
      assert someLocal?

      set <- arg0?
      assert set

      claude <- "Hello Claude"
      rtn: claude

  defines program
    HelloWorld()

      //While Stdout is not defined here, it should be resolvable
      @Resolved: SYMBOL_DEFINITION: TYPE: "Stdout"
      stdout <- Stdout()
      toOutput <- "Hello, World"
      stdout.println(toOutput)
-!>
//EOF