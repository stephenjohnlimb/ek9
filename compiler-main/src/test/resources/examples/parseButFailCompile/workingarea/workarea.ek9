#!ek9
<?-
  Reverse engineered from Java package.
  Do not manually edit.
-?>
defines extern module org.company.dept

  defines package

    publicAccess <- true
    version <- 3.2.1-0
    description <- "Example of handy tools"
    license <- "MIT"

    tags <- [
      "general",
      "tools"
      ]

  defines constant

    MyPi <- 3.142
    MyRoot2 <- 1.41421356237309504880
    Mye <- 2.7182818284

  defines type

    EventHandler of StringExample
    IteratorExample of StringExample
    ListExample of StringExample

    CardRank
      Two
      Three
      Four
      Five
      Six
      Seven
      Eight
      Nine
      Ten
      Jack
      Queen
      King
      Ace

    CardSuit
      Hearts
      Diamonds
      Clubs
      Spades

    EmployeeId as Integer constrain
      > 0

  defines text for "de"

    WelcomePageText
      namedWelcome()
        -> name String
        ``


  defines text for "en_GB"

    WelcomePageText
      namedWelcome()
        -> name String
        ``


  defines trait

    CostAssessment
      lowCost() as pure
        <- rtn as Boolean?


    Monitorable
      available() as pure
        <- rtn as Boolean?

      lowCost() as pure
        <- rtn as Boolean?


    Processor with trait of Monitorable, CostAssessment
      override lowCost() as pure
        <- rtn as Boolean?

      process() as pure
        <- rtn as Boolean?


  defines record

    NetworkProperties
      host as StringExample?

      packetSize as Integer?

      port as Integer?

      NetworkProperties() as pure

      operator $ as pure
        <- rtn as String?


  defines function

    EventHandler of type T
      -> event as T

    MathOperation() as pure abstract
      -> value as Float
      <- result as Float?

    Multiplier() as pure
      <- value as Float?

    Multiply() is MathOperation as pure
      -> value as Float
      <- result as Float?

  defines class

    General
      General() as pure

      operator ? as pure
        <- rtn as Boolean?


    IteratorExample of type T as abstract
      IteratorExample() as pure
        -> arg0 as T

      IteratorExample() as pure

      hasNext() as pure abstract
        <- rtn as Boolean?

      next() as abstract
        <- rtn as T?

      operator ? as pure
        <- rtn as Boolean?


    ListExample of type T as open
      ListExample() as pure

      ListExample() as pure
        -> arg0 as T

      iterator() as pure
        <- rtn as IteratorExample of T?


    StringExample
      StringExample() as pure

      upperCase() as pure
        <- rtn as StringExample?


  defines component

    OutputInterface as abstract
      output() as pure
        -> value as String


    StderrInterface is OutputInterface
      override output() as pure
        -> value as String


  defines service

    Site :/site
      index() as GET for :/index.html
        <- response as HTTPResponse?


  defines application

    DemoApp

  defines program

    Program1()

    Program2()
      -> arg1 as String

//EOF

<!-
#!ek9
defines module introduction

  defines program
    HelloWorld()

      stdout <- Stdout()
      stdout.println("Hello, World")
-!>
//EOF

