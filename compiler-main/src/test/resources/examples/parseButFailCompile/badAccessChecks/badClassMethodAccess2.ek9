#!ek9
<?-
  Examples of more complex access to methods on classes.
  But directly accessed via 'this.'
-?>
defines module bad.classmethod.access2

  defines class

    Base as open
      private someDelegate()
        -> arg0 as DateTime
        <- rtn <- 0

      protected someDelegate()
        -> arg0 as Duration
        <- rtn <- 0

    Class1 extends Base as open
      @Error: FULL_RESOLUTION: DELEGATE_AND_METHOD_NAMES_CLASH
      someDelegate as generalFunction?
      someField <- 1

      Class1()
        someDelegate := () is generalFunction as function (rtn: arg0)

      Class1()
        -> arg0 as Class1
        this()
        assert arg0?

      someDelegate()
        -> arg0 as Date
        <- rtn <- 0

      protected someDelegate()
        -> arg0 as String
        <- rtn <- 0

      operator ? as pure
        <- rtn <- true

    Class2 extends Base
      Class2()
        @Error: FULL_RESOLUTION: DELEGATE_AND_METHOD_NAMES_CLASH
        someDelegate <- () is generalFunction as function (rtn: arg0)
        assert someDelegate?

      someDelegate()
        -> arg0 as Date
        <- rtn <- 0

  defines function

    generalFunction as abstract
      -> arg0 as Integer
      <- rtn as Integer?

//EOF
