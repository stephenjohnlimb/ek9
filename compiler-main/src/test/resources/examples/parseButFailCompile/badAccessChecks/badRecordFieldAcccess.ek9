#!ek9
<?-
  Examples of good and bad field access on records.
-?>
defines module bad.recordfield.access

  defines record

    R1 as open
      number <- 1

      operator $ as pure
        //Mistype number
        @Error: FULL_RESOLUTION: NOT_RESOLVED
        <- rtn as String: numbr

      operator $$ as pure
        <- rtn as JSON: JSON()
        //Check that the ek9 developers confusion around inheritance
        @Error: FULL_RESOLUTION: NOT_RESOLVED
        check <- anotherValue

    R2 extends R1
      anotherValue <- 90.7

      override operator $ as pure
        <- rtn as String: String()
        //Now check it is possible to access anotherValue and number
        check1 <- anotherValue
        assert check1?

        check2 <- number
        assert check2?

    R3
      name <- "Steve"
      r2 <- R2()

    R4
      someR3 <- R3()

    R5
      c1 <- C1()

  defines class
    C1
      r2 <- R2()

      someMethod()
        -> arg0 as C1

        check <- arg0.r2.number
        assert check?

      anotherMethod()
        -> arg0 as R5

        checkCanAccess <- arg0.c1.r2.number
        assert checkCanAccess?

  defines function

    checkNoAccessOutsideOfClass()
      c1 <- C1()
      @Error: FULL_RESOLUTION:NOT_ACCESSIBLE
      check <- c1.r2.number
      assert check?

    checkRecordAccess1()
      r1 <- R1()

      //Check it is possible to access the fields on a record as they are public
      num <- r1.number
      assert num?

    checkRecordAccess2()
      r3 <- R3()

      checkChained <- r3.r2.anotherValue
      assert checkChained?

    checkRecordAccess3()
      r4 <- R4()

      longerChain <- r4.someR3.r2.number
      assert longerChain?

    checkNotDefined()
      r3 <- R3()

      @Error: FULL_RESOLUTION: NOT_RESOLVED
      checkChained <- r3.r2.d2.anotherValue

      @Error: FULL_RESOLUTION: TYPE_NOT_RESOLVED
      assert checkChained?

//EOF