#!ek9
<?-

  Just like the if/else initialisation scenario - this deals  with switch statements.

  //The default is optional in the case where there is a returning value (expression).
  (SWITCH|GIVEN) preFlowAndControl NL+ INDENT (NL* returningParam)? caseStatement+ (directive? DEFAULT block NL+)?

  So, if there is a preflow assignment - then that assignment means that the variable (in the preflow) is now initialised for all
  parts of the switch and that the assignment is pushed up to the enclosing scope level. But any other variables may not be
  even if all cases and the default initialise those variables. This is because the preflow may return false and the whole switch
  may not execute.

  As with functions, any returning variable must also be set in every case and the default block if it was declared in
  an un-initialised form.

  There are quite a few tests in here, because this is quite sophisticated a check given the structure and flexibility of 'switch'.

  Also see badSwitchReturns.ek9 for very early checks on default values (so not tested in this phase).

-?>
defines module badswitch.initialisations

  defines type

    <?-
      This is the enumeration that is used in the tests.
      As it is finite in the number of values it can hold, it can be switched on.
    -?>
    LimitedEnum
      A,
      B,
      C,
      D

  defines function

    <?-
      Just a handy utility function.
    -?>
    getValueFunction() as pure
      <- rtn <- 22

    <?-
      Test var not initialised in call cases in this case the default does not set var.
    -?>
    SimpleSwitch1
      conditionalValue <- 40
      var as Integer?

      switch conditionalValue
        case < 24
          var: 21
        default
          blockValue <- 9
          assert blockValue?
          //But don't set var!

      @Error: PRE_IR_CHECKS: USED_BEFORE_INITIALISED
      assert var?

    <?-
      Test var not initialised in call cases in this case - just the case, default does set it.
    -?>
    SimpleSwitch2
      conditionalValue <- 40
      var as Integer?

      switch conditionalValue
        case < 24
          blockValue <- 9
          assert blockValue?
          //But don't set var!
        default
          var: 21

      @Error: PRE_IR_CHECKS: USED_BEFORE_INITIALISED
      assert var?

    <?-
      Test var is initialised in all paths.
    -?>
    SimpleSwitch3
      conditionalValue <- 40
      var as Integer?

      switch conditionalValue
        case < 24
          var: 21
        default
          var: 22

      //But now all paths initialised var. So this is fine.
      assert var?

    <?-
      Test the var is known to have been initialised - due to the 'preflow', even though no case or default set it.
    -?>
    SimpleSwitch4
      conditionalValue <- 40
      var as Integer?

      //Now because this initialises var - there is no need to worry about initialisation in case blocks.
      switch var ?= getValueFunction() with conditionalValue
        case < 24
          blockValue <- 9
          assert blockValue?
          //But don't set var!
        default
          blockValue <- 10
          assert blockValue?
          //But don't set var!

      //Now because of the pre-flow guard, var is initialised.
      assert var?

    <?-
      As above but this time the 'preflow' is just an assignment, rather than a guarded assignment.
    -?>
    SimpleSwitch5
      conditionalValue <- 40
      var as Integer?

      //Now because this initialises var - there is no need to worry about initialisation in case blocks.
      switch var: getValueFunction() with conditionalValue
        case < 24
          blockValue <- 9
          assert blockValue?
          //But don't set var!
        default
          blockValue <- 10
          assert blockValue?
          //But don't set var!

      assert var?

    <?-
      A little like the if/else guard combination, this has a guard on an unrelated variable.
      This makes the whole switch conditional! So even though var does get set in all paths, the
      whole switch may not have executed if initialisedByGuard remains unset
      (i.e. if getValueFunction() returned an unset Integer!).
      ?= means assign the variable to the result of the call (getValueFunction()) and if it is not 'set' i.e. '?' is true
      only then go on to do the switch evaluation.
    -?>
    SwitchButPreFlowOnUnrelatedVariable
      conditionalValue <- 40
      initialisedByGuard as Integer?
      var as Integer?

      switch initialisedByGuard ?= getValueFunction() with conditionalValue
        case < 24
          var: initialisedByGuard
        default
          var: 23

      //This will have been initialised.
      assert initialisedByGuard?

      @Error: PRE_IR_CHECKS: USED_BEFORE_INITIALISED
      assert var?


    <?-
      In this example none of the paths in the switch initialise the return variable.
    -?>
    SwitchExpression1
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn1 as Integer?
        case < 24
          blockValue <- 9
          assert blockValue?
          //But don't set rtn1!
        default
          blockValue <- 10
          assert blockValue?
          //But don't set rtn1!

      assert returningValue?

    <?-
      Only one of the paths initialises the return variable.
    -?>
    SwitchExpression2
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn2 as Integer?
        case < 24
          rtn2: 66
        default
          blockValue <- 10
          assert blockValue?
          //But don't set rtn2!

      assert returningValue?

    <?-
      This time it is the default that initialises the return variable, but not the cases.
    -?>
    SwitchExpression3
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn3 as Integer?
        case < 24
          blockValue <- 10
          assert blockValue?
          //But don't set rtn3!
        default
          rtn3: 66

      assert returningValue?

    <?-
      This time all paths set the return variable.
      So we're all good.
    -?>
    SwitchExpression4
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        <- rtn4 as Integer?
        case < 14
          rtn4: 66
        case < 24
          rtn4: 69
        default
          rtn4: 67

      assert returningValue?

    <!-
      In this example a new variable 'var' is created in the scope of the switch.
      Then it is used to initialise the 'rtn5' value.
      Note that rtn5 and var can be used within these scopes, but then go out of scope.
    -!>
    SwitchExpression5
      conditionalValue <- 40

      returningValue <- switch var <- getValueFunction() with conditionalValue
        <- rtn5 as Integer: var
        case < 24
          blockValue <- 10
          assert blockValue? and rtn5? and var?
        default
          blockValue <- 11
          assert blockValue? and rtn5? and var?

      //Just to demonstrate that both rtn5 and var are enclosed in scopes above that are now ended.
      //This is done be re-declaring variables of the same name.
      rtn5 <- 2009-10-10
      var <- "Steve"
      assert returningValue? and var? and rtn5?

    <?-
      Shows a slightly different scenario, one with a variable declaration,
      a conditional check, then a simple switch expression that uses a specific value by default
      then a couple of simple cases to alter that value.
    -?>
    SwitchExpression6
      conditionalValue <- 40

      returningValue <- switch var <- getValueFunction() with conditionalValue
        <- rtn6 as Integer: var
        case < 24
          rtn6: 99
        case < 30
          rtn6: 101
        default
          rtn6: Integer() //as var is unset this will return unset

      assert returningValue?

    <?-
      Could equally have done this.
    -?>
    SwitchExpression7
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        <- rtn7 as Integer: getValueFunction()
        case < 24
          rtn7: 99
        case < 30
          rtn7: 101
        default
          rtn7: Integer() //as conditionalValue is unset this will return unset

      assert returningValue?

    <?-
      But the pure variant has to be different to stop direct reassignment.
    -?>
    ReturningSwitch8 as pure
      conditionalValue <- 40

      returningValue <- switch conditionalValue
        <- rtn8 as Integer?
        case < 24
          rtn8 :=? 99
        case < 30
          rtn8 :=? 101
        default
          rtn8 :=? getValueFunction()

      assert returningValue?

    EnumerationExpressionSwitchNotInitialisingReturn1()
      -> val as LimitedEnum

      result <- switch val
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn as String?
        case LimitedEnum.A
          rtn: "Just A"
        case LimitedEnum.B
          rtn: "Just B"
        case LimitedEnum.C
          rtn: "Just C"
        case LimitedEnum.D
          rtn: "Just D"
        default
          check <- 22
          assert check?

      assert result?

    EnumerationExpressionSwitchNotInitialisingReturn2()
      -> val as LimitedEnum

      result <- switch val
        @Error: PRE_IR_CHECKS: RETURN_NOT_ALWAYS_INITIALISED
        <- rtn as String?
        case LimitedEnum.A
          rtn: "Just A"
        case LimitedEnum.B
          rtn: "Just B"
        case LimitedEnum.C
          rtn: "Just C"
        case LimitedEnum.D
          check <- 22
          assert check?
        default
          rtn: "Just not set"

      assert result?

//EOF

