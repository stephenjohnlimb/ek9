#!ek9
<?-
  Small subset of operators in a trait construct.
  See the classes for a full set of tests, this is just to check that the rules are employed for traits.
-?>
defines module bad.traits.operators.examples

  defines trait

    //Here are some bad example of the logical operators.
    T1

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: MUST_RETURN_BOOLEAN
      operator < as pure abstract
        -> arg0 as T1
        <- rtn as Integer?

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: MUST_RETURN_BOOLEAN
      operator > as pure
        -> arg0 as T1

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_FEW_ARGUMENTS
      operator > as pure
        <- rtn as Boolean?

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_FEW_ARGUMENTS
      operator == as pure
        <- rtn as Boolean: true

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_MANY_ARGUMENTS
      operator <= as pure
        ->
          arg0 as T1
          arg1 as T1
        <- rtn as Boolean: true

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_FEW_ARGUMENTS
      operator >= as pure
        var <- 1
        assert var?

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: BAD_NOT_EQUAL_OPERATOR
      operator != as pure
        -> arg0 as T1
        <- rtn as Boolean: true

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: BAD_NOT_OPERATOR
      operator not as pure
        -> arg0 as T1
        <- rtn as Boolean: true

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_FEW_ARGUMENTS
      operator <=> as pure
        <- rtn as Integer: 0

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: TOO_MANY_ARGUMENTS
      operator <=> as pure
        ->
          arg0 as T1
          arg1 as Float
        <- rtn as Integer: 0

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: MUST_RETURN_INTEGER
      operator <=> as pure
        -> arg0 as T1
        <- rtn as T1: this

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: MUST_RETURN_INTEGER
      operator <~> as pure
        -> arg0 as T1
        <- rtn as Boolean: true

//EOF