#!ek9
<?-
  Check the types on incoming arguments, they are limited in what can be mapped from
  http requests coming in, this is because ek9 actually maps incoming data into types where possible.
  This also checks the URI duplication based on a per verb basis.
-?>
defines module bad.servicemethod.argumenttypes

  defines service

    S2 for :/site1/place2

      //This is all OK, GET is inferred and the HTTPResponse is a trait but with all default methods
      //These are reasonable implementations like 404 etc. So just use an anonymous dynamic class but dont override anything.
      //Incoming arguments are not mandatory, so this is an working example of that.
      index() :/index.html
        <- response as HTTPResponse: () with trait of HTTPResponse

      //This too, is a valid working example but with valid incoming arguments.
      //So this would use the query parameters and try and find "index-number" parameter and map to integer if possible
      //Note that Float and Money are not supported.
      index2() :/{index-number}/index2.html
        ->
          queryId as Integer :=: PATH "index-number"
          fromDate as Date :=: QUERY "from"
          duration as Duration :=: QUERY "duration"
          timeOut as Millisecond :=: QUERY "time-out"
          coverEnd as DateTime :=: QUERY "end-date-time"
          graceTime as Time :=: QUERY "grace-time"
          content as String :=: CONTENT
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      //As is this, just getting the request directly
      index3() :/index3.html
        ->
          request as HTTPRequest :=: REQUEST
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      //Another valid example
      index4() :/{address-id}
        -> addressId as Integer :=: PATH "address-id" //required because different name from the variable
        <- response as HTTPResponse: () with trait of HTTPResponse

      //Another valid example
      index5() :/{address-id}/{routeId}/someResource.xml
        ->
          addressId as Integer :=: PATH "address-id"
          routeId as String //infer PATH and use same name as argument
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      //Another valid example
      index6() :/{addressId}/{routeId}/someResource.json
        ->
          addressId as Integer :=: PATH //Again infer name as 'addressId' even if just PATH is provided
          routeId as String //infer PATH and use same name 'routeId' as argument
        <-
          response as HTTPResponse: () with trait of HTTPResponse


      invalid1() :/invalid1.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_INCOMPATIBLE_PARAM_TYPE
          arg0 as Float :=: QUERY "some-param"
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      invalid2() :/invalid2.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_INCOMPATIBLE_PARAM_TYPE_REQUEST
          arg0 as String :=: REQUEST
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      invalid3() :/invalid3.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_INCOMPATIBLE_PARAM_TYPE_NON_REQUEST
          arg0 as HTTPRequest :=: QUERY "another-parameter"
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      invalid4() :/invalid4.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_REQUEST_BY_ITSELF
          arg0 as HTTPRequest :=: REQUEST
          arg1 as Integer :=: QUERY "some-query"
        <-
          response as HTTPResponse: () with trait of HTTPResponse


      invalid5() :/{incorrect-name}/invalid5.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_PARAM_INVALID
          arg0 as Integer :=: PATH "no-such-path"
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      invalid6() :/{non-such}/invalid6.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_PARAM_INVALID
          nonSuch as Integer //Assume a PATH variable with name of nonSuch - but missing above i.e. misnamed
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_PARAM_COUNT_INVALID
      invalid7() :/{validationNumber}/{undefined}/invalid7.html
        -> validationNumber as Integer
        <- response as HTTPResponse: () with trait of HTTPResponse

      invalid8() :/invalid8.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PARAM_NEEDS_QUALIFIER
          arg0 as Integer :=: HEADER
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      invalid9() :/invalid9.html
        ->
          @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PARAM_QUALIFIER_NOT_ALLOWED
          arg0 as HTTPRequest :=: REQUEST "not-required"
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      //While not method duplicates as they have different names/signatures - they duplicate on the uri path
      //So the duplicate check is based on the depth of the path and fixed names.
      //The variable names are in effect converted to {} - as it is the structure that is then a duplicate
      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_DUPLICATED
      dup1() :/{validationNumber1}/data.html
        -> validationNumber1 as Integer
        <- response as HTTPResponse: () with trait of HTTPResponse

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_DUPLICATED
      dup2() :/{validationNumber2}/data.html
        -> validationNumber2 as Integer
        <- response as HTTPResponse: () with trait of HTTPResponse

      //But this is not a duplicate, because the verb is different  HEAD not GET
      notDup() as HEAD :/{validationNumber3}/data.html
        -> validationNumber3 as Integer
        <- response as HTTPResponse: () with trait of HTTPResponse

      //But this is not a duplicate, because again the verb is different, this time POST
      update1() as POST :/{validationNumber4}/data.html
        ->
          validationNumber4 as Integer
          payload as String :=: CONTENT
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      //But these do conflict on POST with same number of parameters - even though type/order is different.

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_DUPLICATED
      update2() as POST :/{updateNo1}/{area1}/data.html
        ->
          updateNo1 as Integer
          area1 as String
          payload as String :=: CONTENT
        <-
          response as HTTPResponse: () with trait of HTTPResponse

      @Error: EXPLICIT_TYPE_SYMBOL_DEFINITION: SERVICE_HTTP_PATH_DUPLICATED
      update3() as POST :/{updateNo51}/{area51}/data.html
        ->
          updateNo51 as String
          area51 as Integer
          payload as String :=: CONTENT
        <-
          response as HTTPResponse: () with trait of HTTPResponse

//EOF