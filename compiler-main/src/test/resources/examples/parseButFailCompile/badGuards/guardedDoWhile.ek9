#!ek9
defines module some.bad.dowhileguards

  <!-
    First few records and functions here are the test fixtures.
  -!>
  defines record

    //Note that this has no 'is-set' operator
    UnusableAggregate
      name <- String()

    //But this does have the 'is-set' operator
    UsableAggregate
      name <- String()

      default operator ?

  defines function

    <?-
      Simple function to provide an aggregate (record in this case)
      that does not have the 'is-set' operator.
    -?>
    provideUnusableReturn()
      <- rtn <- UnusableAggregate()

    <?-
      Provide a usable aggregate
    -?>
    provideUsableReturn()
      <- rtn <- UsableAggregate()

    <!-
      These are the demonstrations the prove the positive use and also the negative use.
    -!>

    demonstrateValidDoWhileAssignmentUse1()
      -> conditional as Boolean

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      do toCheck := provideUnusableReturn()
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      while conditional

    demonstrateValidDoWhileAssignmentUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //Just for completeness really
      toCheck <- UsableAggregate()
      do toCheck := provideUsableReturn()
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      while conditional

    demonstrateValidDoWhileExpressionAssignmentUse1()
      -> conditional as Boolean

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      result <- do toCheck := provideUnusableReturn()
        <- rtn as String: toCheck.name
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      while conditional
      assert result?


    demonstrateValidDoWhileExpressionAssignmentUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //Just for completeness really
      toCheck <- UsableAggregate()
      result <- do toCheck := provideUsableReturn()
        <- rtn as String: toCheck.name
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      while conditional
      assert result?

    demonstrateValidDoWhileDeclarationUse()
      -> conditional as Boolean

      stdout <- Stdout()

      do toCheck <- provideUsableReturn()
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      while conditional

    demonstrateValidDoWhileExpressionDeclarationUse()
      -> conditional as Boolean

      stdout <- Stdout()

      result <- do toCheck <- provideUsableReturn()
        <- rtn as String: toCheck.name
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      while conditional
      assert result?

    demonstrateValidDoWhileGuardedAssignmentUse()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the UsableAggregate does have an is-set operator it can be used in the 'guard' statement.
      toCheck <- UsableAggregate()
      do toCheck ?= provideUsableReturn()
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      while conditional

    <!-
      Now the invalid scenarios
    -!>

    demonstrateInvalidDoWhileGuardedAssignmentUse()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the record UnusableAggregate does not have an is-set operator it cannot be used in the 'guard' statement.
      toCheck <- UnusableAggregate()

      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      do toCheck ?= provideUnusableReturn()
        stdout.println(`Do not expect this to even compile ${toCheck.name}`)
      while conditional

    demonstrateInvalidDoWhileDeclarationUse1()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the record UnusableAggregate does not have an is-set operator it cannot be used in the 'declaration guard' statement.
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      do toCheck <- provideUnusableReturn()
        stdout.println(`Do not expect this to even compile ${toCheck.name}`)
      while conditional

    demonstrateInvalidDoWhileDeclarationUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the record UnusableAggregate does not have an is-set operator it cannot be used in the 'declaration guard' statement.
      //This is also a way to declare and initialise a variable in a guarded manner.
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      do toCheck as UnusableAggregate: provideUnusableReturn()
        stdout.println(`Do not expect this to even compile ${toCheck.name}`)
      while conditional

    demonstrateInvalidDoWhileExpressionDeclarationUse1()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the record UnusableAggregate does not have an is-set operator it cannot be used in the 'declaration guard' statement.
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      result <- do toCheck <- provideUnusableReturn()
        <- rtn as String: toCheck.name
        stdout.println(`Do not expect this to even compile ${toCheck.name}`)
      while conditional
      assert result?

    demonstrateInvalidDoWhileExpressionDeclarationUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the record UnusableAggregate does not have an is-set operator it cannot be used in the 'declaration guard' statement.
      //This is also a way to declare and initialise a variable in a guarded manner.
      @Error: FULL_RESOLUTION: OPERATOR_NOT_DEFINED
      result <- do toCheck as UnusableAggregate: provideUnusableReturn()
        <- rtn as String: toCheck.name
        stdout.println(`Do not expect this to even compile ${toCheck.name}`)
      while conditional
      assert result?

//EOF