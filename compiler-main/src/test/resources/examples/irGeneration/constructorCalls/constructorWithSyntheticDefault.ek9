#!ek9
<?-
  Test that classes without explicit constructors get synthetic constructors.
  The synthetic constructor should call i_init but not duplicate super calls.
-?>
defines module constructorCalls

  defines class

    @IR: IR_GENERATION: TYPE: "constructorCalls::NoExplicitConstructor": `
    ConstructDfn: constructorCalls::NoExplicitConstructor
    Field: field, org.ek9.lang::String  // ./constructorWithSyntheticDefault.ek9:30:7
    OperationDfn: constructorCalls::NoExplicitConstructor.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: constructorCalls::NoExplicitConstructor.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    REFERENCE this.field, org.ek9.lang::String  // ./constructorWithSyntheticDefault.ek9:30:7
    _temp1 = LOAD_LITERAL "Auto Init", org.ek9.lang::String  // ./constructorWithSyntheticDefault.ek9:30:26
    RETAIN _temp1  // ./constructorWithSyntheticDefault.ek9:30:26
    SCOPE_REGISTER _temp1, i_init  // ./constructorWithSyntheticDefault.ek9:30:26
    STORE this.field, _temp1  // ./constructorWithSyntheticDefault.ek9:30:26
    RETAIN this.field  // ./constructorWithSyntheticDefault.ek9:30:26
    RETURN
    OperationDfn: constructorCalls::NoExplicitConstructor.NoExplicitConstructor()->constructorCalls::NoExplicitConstructor  // ./constructorWithSyntheticDefault.ek9:29:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (constructorCalls::NoExplicitConstructor)this.i_init() [pure=false, complexity=0]  // ./constructorWithSyntheticDefault.ek9:29:5
    RETURN this  // ./constructorWithSyntheticDefault.ek9:29:5`
    NoExplicitConstructor as open
      field as String := "Auto Init"
      // No explicit constructor - should generate synthetic one with i_init call

//EOF