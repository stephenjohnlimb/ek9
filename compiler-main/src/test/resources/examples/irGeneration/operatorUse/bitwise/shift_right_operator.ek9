#!ek9
<?-
  Test IR generation for shift right operator (>>)
  
  Purpose: Analyze IR generation for Bits._shftr(Integer) method resolution,
  temporary variable management, and Bits return handling.
  
  Expected IR: Method call to Bits._shftr(Integer) returning Bits?
-?>
defines module shiftRight.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "shiftRight.test::testShiftRight": `
    ConstructDfn: shiftRight.test::testShiftRight()->org.ek9.lang::Void
    OperationDfn: shiftRight.test::testShiftRight.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: shiftRight.test::testShiftRight.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: shiftRight.test::testShiftRight.testShiftRight()->shiftRight.test::testShiftRight  // ./shift_right_operator.ek9:94:5
    BasicBlock: _entry_1
    CALL (shiftRight.test::testShiftRight)this.i_init() [pure=false, complexity=0]  // ./shift_right_operator.ek9:94:5
    RETURN this  // ./shift_right_operator.ek9:94:5
    OperationDfn: shiftRight.test::testShiftRight._call()->org.ek9.lang::Void  // ./shift_right_operator.ek9:94:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./shift_right_operator.ek9:95:7
    REFERENCE bits, org.ek9.lang::Bits  // ./shift_right_operator.ek9:95:7
    _temp1 = LOAD_LITERAL 0b11110000, org.ek9.lang::Bits  // ./shift_right_operator.ek9:95:21
    RETAIN _temp1  // ./shift_right_operator.ek9:95:21
    SCOPE_REGISTER _temp1, _scope_1  // ./shift_right_operator.ek9:95:21
    STORE bits, _temp1  // ./shift_right_operator.ek9:95:21
    RETAIN bits  // ./shift_right_operator.ek9:95:21
    SCOPE_REGISTER bits, _scope_1  // ./shift_right_operator.ek9:95:21
    REFERENCE shiftAmount, org.ek9.lang::Integer  // ./shift_right_operator.ek9:96:7
    _temp2 = LOAD_LITERAL 3, org.ek9.lang::Integer  // ./shift_right_operator.ek9:96:31
    RETAIN _temp2  // ./shift_right_operator.ek9:96:31
    SCOPE_REGISTER _temp2, _scope_1  // ./shift_right_operator.ek9:96:31
    STORE shiftAmount, _temp2  // ./shift_right_operator.ek9:96:31
    RETAIN shiftAmount  // ./shift_right_operator.ek9:96:31
    SCOPE_REGISTER shiftAmount, _scope_1  // ./shift_right_operator.ek9:96:31
    REFERENCE result, org.ek9.lang::Bits  // ./shift_right_operator.ek9:97:7
    _temp4 = LOAD bits  // ./shift_right_operator.ek9:97:22
    RETAIN _temp4  // ./shift_right_operator.ek9:97:22
    SCOPE_REGISTER _temp4, _scope_1  // ./shift_right_operator.ek9:97:22
    _temp5 = LOAD shiftAmount  // ./shift_right_operator.ek9:97:22
    RETAIN _temp5  // ./shift_right_operator.ek9:97:22
    SCOPE_REGISTER _temp5, _scope_1  // ./shift_right_operator.ek9:97:22
    _temp3 = CALL (org.ek9.lang::Bits)_temp4._shftr(_temp5) [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./shift_right_operator.ek9:97:22
    RETAIN _temp3  // ./shift_right_operator.ek9:97:22
    SCOPE_REGISTER _temp3, _scope_1  // ./shift_right_operator.ek9:97:22
    STORE result, _temp3  // ./shift_right_operator.ek9:97:22
    RETAIN result  // ./shift_right_operator.ek9:97:22
    SCOPE_REGISTER result, _scope_1  // ./shift_right_operator.ek9:97:22
    _temp6 = CONTROL_FLOW_CHAIN  // ./shift_right_operator.ek9:98:20
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp7 = LOAD result  // ./shift_right_operator.ek9:98:20
    _temp8 = IS_NULL _temp7  // ./shift_right_operator.ek9:98:20
    ]
    primitive_condition: _temp8
    body_evaluation:
    [
    _temp9 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./shift_right_operator.ek9:98:20
    RETAIN _temp9  // ./shift_right_operator.ek9:98:20
    SCOPE_REGISTER _temp9, _scope_1  // ./shift_right_operator.ek9:98:20
    ]
    body_result: _temp9
    ]
    ]
    default_body_evaluation:
    [
    _temp10 = CALL (org.ek9.lang::Boolean)_temp7._isSet() [pure=true, complexity=0]  // ./shift_right_operator.ek9:98:20
    RETAIN _temp10  // ./shift_right_operator.ek9:98:20
    SCOPE_REGISTER _temp10, _scope_1  // ./shift_right_operator.ek9:98:20
    ]
    default_result: _temp10
    scope_id: _scope_1
    ]
    RETAIN _temp6  // ./shift_right_operator.ek9:98:7
    SCOPE_REGISTER _temp6, _scope_1  // ./shift_right_operator.ek9:98:7
    _temp11 = CALL (org.ek9.lang::Boolean)_temp6._true() [pure=true, complexity=0]  // ./shift_right_operator.ek9:98:7
    ASSERT _temp11  // ./shift_right_operator.ek9:98:7
    SCOPE_EXIT _scope_1  // ./shift_right_operator.ek9:95:7
    RETURN  // ./shift_right_operator.ek9:94:5`
    testShiftRight()
      bits as Bits: 0b11110000
      shiftAmount as Integer: 3
      result <- bits >> shiftAmount
      assert result?

//EOF