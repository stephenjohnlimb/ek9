#!ek9
<?-
  Test IR generation for unary negate operator (-)
  
  Purpose: Analyze IR generation for Integer._negate() method resolution,
  literal loading, temporary variable management, and optimization potential.
  
  Expected IR: Method call to Integer._negate() with no parameters
-?>
defines module negate.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "negate.test::testNegate": `
    ConstructDfn: negate.test::testNegate()->org.ek9.lang::Void
    OperationDfn: negate.test::testNegate.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: negate.test::testNegate.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: negate.test::testNegate.testNegate()->negate.test::testNegate  // ./negate_operator.ek9:74:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (negate.test::testNegate)this.i_init()  // ./negate_operator.ek9:74:5
    RETURN this  // ./negate_operator.ek9:74:5
    OperationDfn: negate.test::testNegate._call()->org.ek9.lang::Void  // ./negate_operator.ek9:74:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./negate_operator.ek9:75:7
    REFERENCE z, org.ek9.lang::Integer  // ./negate_operator.ek9:75:7
    _temp1 = LOAD_LITERAL -5, org.ek9.lang::Integer  // ./negate_operator.ek9:75:12
    RETAIN _temp1  // ./negate_operator.ek9:75:12
    SCOPE_REGISTER _temp1, _scope_1  // ./negate_operator.ek9:75:12
    STORE z, _temp1  // ./negate_operator.ek9:75:12
    RETAIN z  // ./negate_operator.ek9:75:12
    SCOPE_REGISTER z, _scope_1  // ./negate_operator.ek9:75:12
    _temp2 = CONTROL_FLOW_CHAIN  // ./negate_operator.ek9:76:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp3 = LOAD z  // ./negate_operator.ek9:76:15
    _temp4 = IS_NULL _temp3  // ./negate_operator.ek9:76:15
    ]
    primitive_condition: _temp4
    body_evaluation:
    [
    _temp5 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse()  // ./negate_operator.ek9:76:15
    RETAIN _temp5  // ./negate_operator.ek9:76:15
    SCOPE_REGISTER _temp5, _scope_1  // ./negate_operator.ek9:76:15
    ]
    body_result: _temp5
    ]
    ]
    default_body_evaluation:
    [
    _temp6 = CALL (org.ek9.lang::Boolean)_temp3._isSet()  // ./negate_operator.ek9:76:15
    RETAIN _temp6  // ./negate_operator.ek9:76:15
    SCOPE_REGISTER _temp6, _scope_1  // ./negate_operator.ek9:76:15
    ]
    default_result: _temp6
    scope_id: _scope_1
    ]
    RETAIN _temp2  // ./negate_operator.ek9:76:7
    SCOPE_REGISTER _temp2, _scope_1  // ./negate_operator.ek9:76:7
    _temp7 = CALL (org.ek9.lang::Boolean)_temp2._true()  // ./negate_operator.ek9:76:7
    ASSERT _temp7  // ./negate_operator.ek9:76:7
    SCOPE_EXIT _scope_1  // ./negate_operator.ek9:75:7
    RETURN  // ./negate_operator.ek9:74:5`
    testNegate()
      z <- -5
      assert z?

//EOF