#!ek9
<?-
  Test IR generation for factorial operator (!)
  
  Purpose: Analyze IR generation for Integer ! operation,
  which should generate method call to Integer._fac().
  This is a non-mutating unary operation returning Integer.
  
  Expected IR: Method call to Integer._fac()
-?>
defines module factorial.test

  defines function
  
    @IR: IR_GENERATION: FUNCTION: "factorial.test::testFactorial": `
    ConstructDfn: factorial.test::testFactorial()->org.ek9.lang::Void
    OperationDfn: factorial.test::testFactorial.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: factorial.test::testFactorial.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: factorial.test::testFactorial.testFactorial()->factorial.test::testFactorial  // ./factorial_operator.ek9:78:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (factorial.test::testFactorial)this.i_init() [pure=false, complexity=0]  // ./factorial_operator.ek9:78:5
    RETURN this  // ./factorial_operator.ek9:78:5
    OperationDfn: factorial.test::testFactorial._call()->org.ek9.lang::Void  // ./factorial_operator.ek9:78:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./factorial_operator.ek9:79:7
    REFERENCE result, org.ek9.lang::Integer  // ./factorial_operator.ek9:79:7
    _temp2 = LOAD_LITERAL 5, org.ek9.lang::Integer  // ./factorial_operator.ek9:79:17
    RETAIN _temp2  // ./factorial_operator.ek9:79:18
    SCOPE_REGISTER _temp2, _scope_1  // ./factorial_operator.ek9:79:18
    _temp1 = CALL (org.ek9.lang::Integer)_temp2._fac() [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./factorial_operator.ek9:79:18
    RETAIN _temp1  // ./factorial_operator.ek9:79:18
    SCOPE_REGISTER _temp1, _scope_1  // ./factorial_operator.ek9:79:18
    STORE result, _temp1  // ./factorial_operator.ek9:79:18
    RETAIN result  // ./factorial_operator.ek9:79:18
    SCOPE_REGISTER result, _scope_1  // ./factorial_operator.ek9:79:18
    _temp3 = CONTROL_FLOW_CHAIN  // ./factorial_operator.ek9:80:20
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp4 = LOAD result  // ./factorial_operator.ek9:80:20
    _temp5 = IS_NULL _temp4  // ./factorial_operator.ek9:80:20
    ]
    primitive_condition: _temp5
    body_evaluation:
    [
    _temp6 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./factorial_operator.ek9:80:20
    RETAIN _temp6  // ./factorial_operator.ek9:80:20
    SCOPE_REGISTER _temp6, _scope_1  // ./factorial_operator.ek9:80:20
    ]
    body_result: _temp6
    ]
    ]
    default_body_evaluation:
    [
    _temp7 = CALL (org.ek9.lang::Boolean)_temp4._isSet() [pure=true, complexity=0]  // ./factorial_operator.ek9:80:20
    RETAIN _temp7  // ./factorial_operator.ek9:80:20
    SCOPE_REGISTER _temp7, _scope_1  // ./factorial_operator.ek9:80:20
    ]
    default_result: _temp7
    scope_id: _scope_1
    ]
    RETAIN _temp3  // ./factorial_operator.ek9:80:7
    SCOPE_REGISTER _temp3, _scope_1  // ./factorial_operator.ek9:80:7
    _temp8 = CALL (org.ek9.lang::Boolean)_temp3._true() [pure=true, complexity=0]  // ./factorial_operator.ek9:80:7
    ASSERT _temp8  // ./factorial_operator.ek9:80:7
    SCOPE_EXIT _scope_1  // ./factorial_operator.ek9:79:7
    RETURN  // ./factorial_operator.ek9:78:5`
    testFactorial()
      result <- 5!
      assert result?

//EOF