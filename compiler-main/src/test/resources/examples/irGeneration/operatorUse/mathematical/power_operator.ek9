#!ek9
<?-
  Test IR generation for power operator (^)
  
  Purpose: Analyze IR generation for Integer ^ operation,
  which should generate method call to Integer._pow(Integer).
  This is a non-mutating operation returning new Integer.
  
  Expected IR: Method call to Integer._pow(Integer)
-?>
defines module power.test

  defines function
  
    @IR: IR_GENERATION: FUNCTION: "power.test::testPower": `
    ConstructDfn: power.test::testPower()->org.ek9.lang::Void
    OperationDfn: power.test::testPower.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: power.test::testPower.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: power.test::testPower.testPower()->power.test::testPower  // ./power_operator.ek9:81:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (power.test::testPower)this.i_init() [pure=false, complexity=0]  // ./power_operator.ek9:81:5
    RETURN this  // ./power_operator.ek9:81:5
    OperationDfn: power.test::testPower._call()->org.ek9.lang::Void  // ./power_operator.ek9:81:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./power_operator.ek9:82:7
    REFERENCE result, org.ek9.lang::Integer  // ./power_operator.ek9:82:7
    _temp2 = LOAD_LITERAL 2, org.ek9.lang::Integer  // ./power_operator.ek9:82:17
    RETAIN _temp2  // ./power_operator.ek9:82:19
    SCOPE_REGISTER _temp2, _scope_1  // ./power_operator.ek9:82:19
    _temp3 = LOAD_LITERAL 3, org.ek9.lang::Integer  // ./power_operator.ek9:82:21
    RETAIN _temp3  // ./power_operator.ek9:82:19
    SCOPE_REGISTER _temp3, _scope_1  // ./power_operator.ek9:82:19
    _temp1 = CALL (org.ek9.lang::Integer)_temp2._pow(_temp3) [pure=true, complexity=2, effects=RETURN_MUTATION]  // ./power_operator.ek9:82:19
    RETAIN _temp1  // ./power_operator.ek9:82:19
    SCOPE_REGISTER _temp1, _scope_1  // ./power_operator.ek9:82:19
    STORE result, _temp1  // ./power_operator.ek9:82:19
    RETAIN result  // ./power_operator.ek9:82:19
    SCOPE_REGISTER result, _scope_1  // ./power_operator.ek9:82:19
    _temp4 = CONTROL_FLOW_CHAIN  // ./power_operator.ek9:83:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD result  // ./power_operator.ek9:83:20
    _temp6 = IS_NULL _temp5  // ./power_operator.ek9:83:20
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=false, complexity=0]  // ./power_operator.ek9:83:20
    RETAIN _temp7  // ./power_operator.ek9:83:20
    SCOPE_REGISTER _temp7, _scope_1  // ./power_operator.ek9:83:20
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet() [pure=false, complexity=0]  // ./power_operator.ek9:83:20
    RETAIN _temp8  // ./power_operator.ek9:83:20
    SCOPE_REGISTER _temp8, _scope_1  // ./power_operator.ek9:83:20
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./power_operator.ek9:83:7
    SCOPE_REGISTER _temp4, _scope_1  // ./power_operator.ek9:83:7
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true() [pure=false, complexity=0]  // ./power_operator.ek9:83:7
    ASSERT _temp9  // ./power_operator.ek9:83:7
    SCOPE_EXIT _scope_1  // ./power_operator.ek9:82:7
    RETURN  // ./power_operator.ek9:81:5`
    testPower()
      result <- 2 ^ 3
      assert result?

//EOF