#!ek9
<?-
  Test IR generation for add assignment operator (+=)
  
  Purpose: Test assignment operator framework preparation.
  This will fail with informative error until full implementation.
  
  Expected behavior: CompilerException with clear message about
  method-based assignment requiring IR generation implementation.
-?>
defines module anaddass.test

  defines function
  
    @IR: IR_GENERATION: FUNCTION: "anaddass.test::testAddAssignment": `
ConstructDfn: anaddass.test::testAddAssignment()->org.ek9.lang::Void
OperationDfn: anaddass.test::testAddAssignment.c_init()->org.ek9.lang::Void  
BasicBlock: _entry_1
RETURN
OperationDfn: anaddass.test::testAddAssignment.i_init()->org.ek9.lang::Void  
BasicBlock: _entry_1
RETURN
OperationDfn: anaddass.test::testAddAssignment.testAddAssignment()->anaddass.test::testAddAssignment  // ./add_assignment_operator.ek9:82:5
BasicBlock: _entry_1
_temp_i_init = CALL (anaddass.test::testAddAssignment)this.i_init() [pure=false, complexity=0]  // ./add_assignment_operator.ek9:82:5
RETURN this  // ./add_assignment_operator.ek9:82:5
OperationDfn: anaddass.test::testAddAssignment._call()->org.ek9.lang::Void  // ./add_assignment_operator.ek9:82:5
BasicBlock: _entry_1
SCOPE_ENTER _scope_1  // ./add_assignment_operator.ek9:83:7
REFERENCE value, org.ek9.lang::Integer  // ./add_assignment_operator.ek9:83:7
_temp1 = LOAD_LITERAL 5, org.ek9.lang::Integer  // ./add_assignment_operator.ek9:83:25
RETAIN _temp1  // ./add_assignment_operator.ek9:83:25
SCOPE_REGISTER _temp1, _scope_1  // ./add_assignment_operator.ek9:83:25
STORE value, _temp1  // ./add_assignment_operator.ek9:83:25
RETAIN value  // ./add_assignment_operator.ek9:83:25
SCOPE_REGISTER value, _scope_1  // ./add_assignment_operator.ek9:83:25
_temp2 = LOAD value  // ./add_assignment_operator.ek9:84:13
RETAIN _temp2  // ./add_assignment_operator.ek9:84:13
SCOPE_REGISTER _temp2, _scope_1  // ./add_assignment_operator.ek9:84:13
_temp3 = LOAD_LITERAL 10, org.ek9.lang::Integer  // ./add_assignment_operator.ek9:84:16
RETAIN _temp3  // ./add_assignment_operator.ek9:84:13
SCOPE_REGISTER _temp3, _scope_1  // ./add_assignment_operator.ek9:84:13
CALL (org.ek9.lang::Integer)_temp2._addAss(_temp3) [pure=false, complexity=0, effects=THIS_MUTATION]  // ./add_assignment_operator.ek9:84:13
_temp4 = CONTROL_FLOW_CHAIN  // ./add_assignment_operator.ek9:85:7
[
chain_type: "QUESTION_OPERATOR"
condition_chain:
[
[
case_scope_id: _scope_1
case_type: "NULL_CHECK"
condition_evaluation:
[
_temp5 = LOAD value  // ./add_assignment_operator.ek9:85:19
_temp6 = IS_NULL _temp5  // ./add_assignment_operator.ek9:85:19
]
primitive_condition: _temp6
body_evaluation:
[
_temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./add_assignment_operator.ek9:85:19
RETAIN _temp7  // ./add_assignment_operator.ek9:85:19
SCOPE_REGISTER _temp7, _scope_1  // ./add_assignment_operator.ek9:85:19
]
body_result: _temp7
]
]
default_body_evaluation:
[
_temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet() [pure=true, complexity=0]  // ./add_assignment_operator.ek9:85:19
RETAIN _temp8  // ./add_assignment_operator.ek9:85:19
SCOPE_REGISTER _temp8, _scope_1  // ./add_assignment_operator.ek9:85:19
]
default_result: _temp8
scope_id: _scope_1
]
RETAIN _temp4  // ./add_assignment_operator.ek9:85:7
SCOPE_REGISTER _temp4, _scope_1  // ./add_assignment_operator.ek9:85:7
_temp9 = CALL (org.ek9.lang::Boolean)_temp4._true() [pure=true, complexity=0]  // ./add_assignment_operator.ek9:85:7
ASSERT _temp9  // ./add_assignment_operator.ek9:85:7
SCOPE_EXIT _scope_1  // ./add_assignment_operator.ek9:83:7
RETURN  // ./add_assignment_operator.ek9:82:5`
    testAddAssignment()
      value as Integer: 5
      value += 10
      assert value?

//EOF