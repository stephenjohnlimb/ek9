#!ek9
<?-
  Test IR generation for hashcode operator (#?)
  
  Purpose: Analyze IR generation for Integer._hashcode() method resolution,
  hashcode calculation for Integer, and return value management.
  
  Expected IR: Method call to Integer._hashcode() returning Integer
-?>
defines module hashcode.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "hashcode.test::testHashcode": `
    ConstructDfn: hashcode.test::testHashcode()->org.ek9.lang::Void
    OperationDfn: hashcode.test::testHashcode.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: hashcode.test::testHashcode.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: hashcode.test::testHashcode.testHashcode()->hashcode.test::testHashcode  // ./hashcode_operator.ek9:84:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (hashcode.test::testHashcode)this.i_init()  // ./hashcode_operator.ek9:84:5
    RETURN this  // ./hashcode_operator.ek9:84:5
    OperationDfn: hashcode.test::testHashcode._call()->org.ek9.lang::Void  // ./hashcode_operator.ek9:84:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./hashcode_operator.ek9:85:7
    REFERENCE x, org.ek9.lang::Integer  // ./hashcode_operator.ek9:85:7
    _temp1 = LOAD_LITERAL 42, org.ek9.lang::Integer  // ./hashcode_operator.ek9:85:21
    RETAIN _temp1  // ./hashcode_operator.ek9:85:21
    SCOPE_REGISTER _temp1, _scope_1  // ./hashcode_operator.ek9:85:21
    STORE x, _temp1  // ./hashcode_operator.ek9:85:21
    RETAIN x  // ./hashcode_operator.ek9:85:21
    SCOPE_REGISTER x, _scope_1  // ./hashcode_operator.ek9:85:21
    REFERENCE result, org.ek9.lang::Integer  // ./hashcode_operator.ek9:86:7
    _temp3 = LOAD x  // ./hashcode_operator.ek9:86:17
    RETAIN _temp3  // ./hashcode_operator.ek9:86:17
    SCOPE_REGISTER _temp3, _scope_1  // ./hashcode_operator.ek9:86:17
    _temp2 = CALL (org.ek9.lang::Integer)_temp3._hashcode()  // ./hashcode_operator.ek9:86:17
    RETAIN _temp2  // ./hashcode_operator.ek9:86:17
    SCOPE_REGISTER _temp2, _scope_1  // ./hashcode_operator.ek9:86:17
    STORE result, _temp2  // ./hashcode_operator.ek9:86:17
    RETAIN result  // ./hashcode_operator.ek9:86:17
    SCOPE_REGISTER result, _scope_1  // ./hashcode_operator.ek9:86:17
    _temp4 = CONTROL_FLOW_CHAIN  // ./hashcode_operator.ek9:87:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD result  // ./hashcode_operator.ek9:87:20
    _temp6 = IS_NULL _temp5  // ./hashcode_operator.ek9:87:20
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse()  // ./hashcode_operator.ek9:87:20
    RETAIN _temp7  // ./hashcode_operator.ek9:87:20
    SCOPE_REGISTER _temp7, _scope_1  // ./hashcode_operator.ek9:87:20
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet()  // ./hashcode_operator.ek9:87:20
    RETAIN _temp8  // ./hashcode_operator.ek9:87:20
    SCOPE_REGISTER _temp8, _scope_1  // ./hashcode_operator.ek9:87:20
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./hashcode_operator.ek9:87:7
    SCOPE_REGISTER _temp4, _scope_1  // ./hashcode_operator.ek9:87:7
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true()  // ./hashcode_operator.ek9:87:7
    ASSERT _temp9  // ./hashcode_operator.ek9:87:7
    SCOPE_EXIT _scope_1  // ./hashcode_operator.ek9:85:7
    RETURN  // ./hashcode_operator.ek9:84:5`
    testHashcode()
      x as Integer: 42
      result <- #?x
      assert result?

//EOF