#!ek9
<?-
  Test IR generation for empty operator (empty)
  
  Purpose: Analyze IR generation for Integer.empty() method resolution,
  zero check logic, and Boolean return handling.
  
  Expected IR: Method call to Integer._empty() returning Boolean
-?>
defines module empty.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "empty.test::testEmpty": `
    ConstructDfn: empty.test::testEmpty()->org.ek9.lang::Void
    OperationDfn: empty.test::testEmpty.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: empty.test::testEmpty.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: empty.test::testEmpty.testEmpty()->empty.test::testEmpty  // ./empty_operator.ek9:84:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (empty.test::testEmpty)this.i_init()  // ./empty_operator.ek9:84:5
    RETURN this  // ./empty_operator.ek9:84:5
    OperationDfn: empty.test::testEmpty._call()->org.ek9.lang::Void  // ./empty_operator.ek9:84:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./empty_operator.ek9:85:7
    REFERENCE x, org.ek9.lang::Integer  // ./empty_operator.ek9:85:7
    _temp1 = LOAD_LITERAL 5, org.ek9.lang::Integer  // ./empty_operator.ek9:85:21
    RETAIN _temp1  // ./empty_operator.ek9:85:21
    SCOPE_REGISTER _temp1, _scope_1  // ./empty_operator.ek9:85:21
    STORE x, _temp1  // ./empty_operator.ek9:85:21
    RETAIN x  // ./empty_operator.ek9:85:21
    SCOPE_REGISTER x, _scope_1  // ./empty_operator.ek9:85:21
    REFERENCE result, org.ek9.lang::Boolean  // ./empty_operator.ek9:86:7
    _temp3 = LOAD x  // ./empty_operator.ek9:86:22
    RETAIN _temp3  // ./empty_operator.ek9:86:22
    SCOPE_REGISTER _temp3, _scope_1  // ./empty_operator.ek9:86:22
    _temp2 = CALL (org.ek9.lang::Integer)_temp3._empty()  // ./empty_operator.ek9:86:22
    RETAIN _temp2  // ./empty_operator.ek9:86:22
    SCOPE_REGISTER _temp2, _scope_1  // ./empty_operator.ek9:86:22
    STORE result, _temp2  // ./empty_operator.ek9:86:22
    RETAIN result  // ./empty_operator.ek9:86:22
    SCOPE_REGISTER result, _scope_1  // ./empty_operator.ek9:86:22
    _temp4 = CONTROL_FLOW_CHAIN  // ./empty_operator.ek9:87:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD result  // ./empty_operator.ek9:87:20
    _temp6 = IS_NULL _temp5  // ./empty_operator.ek9:87:20
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse()  // ./empty_operator.ek9:87:20
    RETAIN _temp7  // ./empty_operator.ek9:87:20
    SCOPE_REGISTER _temp7, _scope_1  // ./empty_operator.ek9:87:20
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet()  // ./empty_operator.ek9:87:20
    RETAIN _temp8  // ./empty_operator.ek9:87:20
    SCOPE_REGISTER _temp8, _scope_1  // ./empty_operator.ek9:87:20
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./empty_operator.ek9:87:7
    SCOPE_REGISTER _temp4, _scope_1  // ./empty_operator.ek9:87:7
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true()  // ./empty_operator.ek9:87:7
    ASSERT _temp9  // ./empty_operator.ek9:87:7
    SCOPE_EXIT _scope_1  // ./empty_operator.ek9:85:7
    RETURN  // ./empty_operator.ek9:84:5`
    testEmpty()
      x as Integer: 5
      result <- x is empty
      assert result?

//EOF