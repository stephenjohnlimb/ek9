#!ek9
<?-
  Test IR generation for length operator (length)
  
  Purpose: Analyze IR generation for String.length() method resolution,
  size calculation logic, and Integer return handling.
  
  Expected IR: Method call to String._len() returning Integer
-?>
defines module length.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "length.test::testLength": `
    ConstructDfn: length.test::testLength()->org.ek9.lang::Void
    OperationDfn: length.test::testLength.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: length.test::testLength.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: length.test::testLength.testLength()->length.test::testLength  // ./length_operator.ek9:84:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (length.test::testLength)this.i_init() [pure=false, complexity=0]  // ./length_operator.ek9:84:5
    RETURN this  // ./length_operator.ek9:84:5
    OperationDfn: length.test::testLength._call()->org.ek9.lang::Void  // ./length_operator.ek9:84:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./length_operator.ek9:85:7
    REFERENCE text, org.ek9.lang::String  // ./length_operator.ek9:85:7
    _temp1 = LOAD_LITERAL "Hello World", org.ek9.lang::String  // ./length_operator.ek9:85:23
    RETAIN _temp1  // ./length_operator.ek9:85:23
    SCOPE_REGISTER _temp1, _scope_1  // ./length_operator.ek9:85:23
    STORE text, _temp1  // ./length_operator.ek9:85:23
    RETAIN text  // ./length_operator.ek9:85:23
    SCOPE_REGISTER text, _scope_1  // ./length_operator.ek9:85:23
    REFERENCE size, org.ek9.lang::Integer  // ./length_operator.ek9:86:7
    _temp3 = LOAD text  // ./length_operator.ek9:86:15
    RETAIN _temp3  // ./length_operator.ek9:86:15
    SCOPE_REGISTER _temp3, _scope_1  // ./length_operator.ek9:86:15
    _temp2 = CALL (org.ek9.lang::String)_temp3._len() [pure=true, complexity=2, effects=RETURN_MUTATION]  // ./length_operator.ek9:86:15
    RETAIN _temp2  // ./length_operator.ek9:86:15
    SCOPE_REGISTER _temp2, _scope_1  // ./length_operator.ek9:86:15
    STORE size, _temp2  // ./length_operator.ek9:86:15
    RETAIN size  // ./length_operator.ek9:86:15
    SCOPE_REGISTER size, _scope_1  // ./length_operator.ek9:86:15
    _temp4 = CONTROL_FLOW_CHAIN  // ./length_operator.ek9:87:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD size  // ./length_operator.ek9:87:18
    _temp6 = IS_NULL _temp5  // ./length_operator.ek9:87:18
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=false, complexity=0]  // ./length_operator.ek9:87:18
    RETAIN _temp7  // ./length_operator.ek9:87:18
    SCOPE_REGISTER _temp7, _scope_1  // ./length_operator.ek9:87:18
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet() [pure=false, complexity=0]  // ./length_operator.ek9:87:18
    RETAIN _temp8  // ./length_operator.ek9:87:18
    SCOPE_REGISTER _temp8, _scope_1  // ./length_operator.ek9:87:18
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./length_operator.ek9:87:7
    SCOPE_REGISTER _temp4, _scope_1  // ./length_operator.ek9:87:7
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true() [pure=false, complexity=0]  // ./length_operator.ek9:87:7
    ASSERT _temp9  // ./length_operator.ek9:87:7
    SCOPE_EXIT _scope_1  // ./length_operator.ek9:85:7
    RETURN  // ./length_operator.ek9:84:5`
    testLength()
      text as String: "Hello World"
      size <- length text
      assert size?

//EOF