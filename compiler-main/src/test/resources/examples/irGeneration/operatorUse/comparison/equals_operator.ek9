#!ek9
<?-
  Test IR generation for equality operator (==)
  
  Purpose: Analyze IR generation for Integer._eq(Integer) method resolution,
  literal loading, temporary variable management, and optimization potential.
  
  Expected IR: Method call to Integer._eq() with Integer parameter
-?>
defines module equals.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "equals.test::testEquals": `
    ConstructDfn: equals.test::testEquals()->org.ek9.lang::Void
    OperationDfn: equals.test::testEquals.c_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: equals.test::testEquals.i_init()->org.ek9.lang::Void  
    BasicBlock: _entry_1
    RETURN
    OperationDfn: equals.test::testEquals.testEquals()->equals.test::testEquals  // ./equals_operator.ek9:80:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (equals.test::testEquals)this.i_init() [pure=false, complexity=0]  // ./equals_operator.ek9:80:5
    RETURN this  // ./equals_operator.ek9:80:5
    OperationDfn: equals.test::testEquals._call()->org.ek9.lang::Void  // ./equals_operator.ek9:80:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./equals_operator.ek9:81:7
    REFERENCE z, org.ek9.lang::Boolean  // ./equals_operator.ek9:81:7
    _temp2 = LOAD_LITERAL 1, org.ek9.lang::Integer  // ./equals_operator.ek9:81:12
    RETAIN _temp2  // ./equals_operator.ek9:81:14
    SCOPE_REGISTER _temp2, _scope_1  // ./equals_operator.ek9:81:14
    _temp3 = LOAD_LITERAL 1, org.ek9.lang::Integer  // ./equals_operator.ek9:81:17
    RETAIN _temp3  // ./equals_operator.ek9:81:14
    SCOPE_REGISTER _temp3, _scope_1  // ./equals_operator.ek9:81:14
    _temp1 = CALL (org.ek9.lang::Integer)_temp2._eq(_temp3) [pure=true, complexity=2, effects=MUTATION]  // ./equals_operator.ek9:81:14
    RETAIN _temp1  // ./equals_operator.ek9:81:14
    SCOPE_REGISTER _temp1, _scope_1  // ./equals_operator.ek9:81:14
    STORE z, _temp1  // ./equals_operator.ek9:81:14
    RETAIN z  // ./equals_operator.ek9:81:14
    SCOPE_REGISTER z, _scope_1  // ./equals_operator.ek9:81:14
    _temp4 = CONTROL_FLOW_CHAIN  // ./equals_operator.ek9:82:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD z  // ./equals_operator.ek9:82:15
    _temp6 = IS_NULL _temp5  // ./equals_operator.ek9:82:15
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=false, complexity=0]  // ./equals_operator.ek9:82:15
    RETAIN _temp7  // ./equals_operator.ek9:82:15
    SCOPE_REGISTER _temp7, _scope_1  // ./equals_operator.ek9:82:15
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet() [pure=false, complexity=0]  // ./equals_operator.ek9:82:15
    RETAIN _temp8  // ./equals_operator.ek9:82:15
    SCOPE_REGISTER _temp8, _scope_1  // ./equals_operator.ek9:82:15
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./equals_operator.ek9:82:7
    SCOPE_REGISTER _temp4, _scope_1  // ./equals_operator.ek9:82:7
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true() [pure=false, complexity=0]  // ./equals_operator.ek9:82:7
    ASSERT _temp9  // ./equals_operator.ek9:82:7
    SCOPE_EXIT _scope_1  // ./equals_operator.ek9:81:7
    RETURN  // ./equals_operator.ek9:80:5`
    testEquals()
      z <- 1 == 1
      assert z?

//EOF