#!ek9
<?-
  Different forms of assignment.
-?>
defines module assignments

  defines function

    @IR: IR_GENERATION: FUNCTION: "assignments::guardedAssignment": `
    ConstructDfn: assignments::guardedAssignment()->org.ek9.lang::Void
    OperationDfn: assignments::guardedAssignment.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: assignments::guardedAssignment.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: assignments::guardedAssignment.guardedAssignment()->assignments::guardedAssignment  // ./guardedAssignment.ek9:107:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (assignments::guardedAssignment)this.i_init()  // ./guardedAssignment.ek9:107:5
    RETURN this  // ./guardedAssignment.ek9:107:5
    OperationDfn: assignments::guardedAssignment._call()->org.ek9.lang::Void  // ./guardedAssignment.ek9:107:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./guardedAssignment.ek9:108:7
    REFERENCE value, org.ek9.lang::Integer  // ./guardedAssignment.ek9:108:7
    _temp7 = GUARDED_ASSIGNMENT_BLOCK  // ./guardedAssignment.ek9:109:17
    [
    condition_evaluation:
    [
    _temp2 = QUESTION_BLOCK  // ./guardedAssignment.ek9:109:17
    [
    operand_evaluation:
    [
    _temp3 = LOAD value  // ./guardedAssignment.ek9:109:17
    RETAIN _temp3  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER _temp3, _scope_1  // ./guardedAssignment.ek9:109:17
    _temp4 = IS_NULL _temp3  // ./guardedAssignment.ek9:109:17
    ]
    operand: _temp3
    null_check_condition: _temp4
    null_case_evaluation:
    [
    _temp5 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse()  // ./guardedAssignment.ek9:109:17
    RETAIN _temp5  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER _temp5, _scope_1  // ./guardedAssignment.ek9:109:17
    ]
    null_result: _temp5
    set_case_evaluation:
    [
    _temp6 = CALL (org.ek9.lang::Integer)_temp3._isSet()  // ./guardedAssignment.ek9:109:17
    RETAIN _temp6  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER _temp6, _scope_1  // ./guardedAssignment.ek9:109:17
    ]
    set_result: _temp6
    scope_id: _scope_1
    ]
    _temp1 = CALL (org.ek9.lang::Boolean)_temp2._not()  // ./guardedAssignment.ek9:109:17
    RETAIN _temp1  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER _temp1, _scope_1  // ./guardedAssignment.ek9:109:17
    ]
    condition_result: _temp1
    assignment_evaluation:
    [
    _temp8 = LOAD_LITERAL 1, org.ek9.lang::Integer  // ./guardedAssignment.ek9:109:17
    RETAIN _temp8  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER _temp8, _scope_1  // ./guardedAssignment.ek9:109:17
    RELEASE value  // ./guardedAssignment.ek9:109:17
    STORE value, _temp8  // ./guardedAssignment.ek9:109:17
    RETAIN value  // ./guardedAssignment.ek9:109:17
    SCOPE_REGISTER value, _scope_1  // ./guardedAssignment.ek9:109:17
    ]
    assignment_result: _temp7
    scope_id: _scope_1
    ]
    _temp9 = QUESTION_BLOCK  // ./guardedAssignment.ek9:110:19
    [
    operand_evaluation:
    [
    _temp10 = LOAD value  // ./guardedAssignment.ek9:110:19
    RETAIN _temp10  // ./guardedAssignment.ek9:110:19
    SCOPE_REGISTER _temp10, _scope_1  // ./guardedAssignment.ek9:110:19
    _temp11 = IS_NULL _temp10  // ./guardedAssignment.ek9:110:19
    ]
    operand: _temp10
    null_check_condition: _temp11
    null_case_evaluation:
    [
    _temp12 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse()  // ./guardedAssignment.ek9:110:19
    RETAIN _temp12  // ./guardedAssignment.ek9:110:19
    SCOPE_REGISTER _temp12, _scope_1  // ./guardedAssignment.ek9:110:19
    ]
    null_result: _temp12
    set_case_evaluation:
    [
    _temp13 = CALL (org.ek9.lang::Boolean)_temp10._isSet()  // ./guardedAssignment.ek9:110:19
    RETAIN _temp13  // ./guardedAssignment.ek9:110:19
    SCOPE_REGISTER _temp13, _scope_1  // ./guardedAssignment.ek9:110:19
    ]
    set_result: _temp13
    scope_id: _scope_1
    ]
    RETAIN _temp9  // ./guardedAssignment.ek9:110:7
    SCOPE_REGISTER _temp9, _scope_1  // ./guardedAssignment.ek9:110:7
    _temp14 = CALL (org.ek9.lang::Boolean)_temp9._true()  // ./guardedAssignment.ek9:110:7
    ASSERT _temp14  // ./guardedAssignment.ek9:110:7
    SCOPE_EXIT _scope_1  // ./guardedAssignment.ek9:108:7
    RETURN  // ./guardedAssignment.ek9:107:5`
    guardedAssignment()
      value as Integer?
      value :=? 1
      assert value?

//EOF