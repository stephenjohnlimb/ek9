#!ek9
<?-
  Test IR generation for Duration for-range loop.
  Verifies type polymorphism: Duration instead of Integer.
-?>
defines module loops

  defines function

    @IR: IR_GENERATION: FUNCTION: "loops::durationForRangeLoop": `
    ConstructDfn: loops::durationForRangeLoop()->org.ek9.lang::Void
    OperationDfn: loops::durationForRangeLoop.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: loops::durationForRangeLoop.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: loops::durationForRangeLoop.durationForRangeLoop()->loops::durationForRangeLoop
    BasicBlock: _entry_1
    CALL (loops::durationForRangeLoop)this.i_init() [pure=false, complexity=0]
    RETURN this
    OperationDfn: loops::durationForRangeLoop._call()->org.ek9.lang::Void
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1
    REFERENCE stdout, org.ek9.lang::Stdout
    _temp1 = CALL (org.ek9.lang::Stdout)org.ek9.lang::Stdout.<init>() [pure=true, complexity=1, effects=IO,RETURN_MUTATION]
    RETAIN _temp1
    SCOPE_REGISTER _temp1, _scope_1
    STORE stdout, _temp1
    RETAIN stdout
    SCOPE_REGISTER stdout, _scope_1
    REFERENCE start, org.ek9.lang::Duration
    _temp2 = LOAD_LITERAL PT0S, org.ek9.lang::Duration
    RETAIN _temp2
    SCOPE_REGISTER _temp2, _scope_1
    STORE start, _temp2
    RETAIN start
    SCOPE_REGISTER start, _scope_1
    REFERENCE end, org.ek9.lang::Duration
    _temp3 = LOAD_LITERAL PT100S, org.ek9.lang::Duration
    RETAIN _temp3
    SCOPE_REGISTER _temp3, _scope_1
    STORE end, _temp3
    RETAIN end
    SCOPE_REGISTER end, _scope_1
    REFERENCE step, org.ek9.lang::Duration
    _temp4 = LOAD_LITERAL PT10S, org.ek9.lang::Duration
    RETAIN _temp4
    SCOPE_REGISTER _temp4, _scope_1
    STORE step, _temp4
    RETAIN step
    SCOPE_REGISTER step, _scope_1
    SCOPE_ENTER _scope_2
    SCOPE_ENTER _scope_3
    REFERENCE d, org.ek9.lang::Duration
    SCOPE_REGISTER d, _scope_3
    FOR_RANGE_POLYMORPHIC
    [
    initialization:
    [
    _temp6 = LOAD start
    RETAIN _temp6
    SCOPE_REGISTER _temp6, _scope_3
    _temp5 = LOAD _temp6
    RETAIN _temp5
    SCOPE_REGISTER _temp5, _scope_3
    _temp8 = LOAD end
    RETAIN _temp8
    SCOPE_REGISTER _temp8, _scope_3
    _temp7 = LOAD _temp8
    RETAIN _temp7
    SCOPE_REGISTER _temp7, _scope_3
    REFERENCE step, org.ek9.lang::Duration
    _temp10 = LOAD step
    RETAIN _temp10
    SCOPE_REGISTER _temp10, _scope_3
    STORE _temp9, _temp10
    RETAIN _temp9
    SCOPE_REGISTER _temp9, _scope_3
    _temp11 = CALL (org.ek9.lang::Duration)_temp5._isSet() [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp11
    SCOPE_REGISTER _temp11, _scope_3
    _temp12 = CALL (org.ek9.lang::Boolean)_temp11._true() [pure=true, complexity=0]
    ASSERT _temp12, For-range 'start' value must be set
    _temp13 = CALL (org.ek9.lang::Duration)_temp7._isSet() [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp13
    SCOPE_REGISTER _temp13, _scope_3
    _temp14 = CALL (org.ek9.lang::Boolean)_temp13._true() [pure=true, complexity=0]
    ASSERT _temp14, For-range 'end' value must be set
    _temp15 = CALL (org.ek9.lang::Duration)_temp9._isSet() [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp15
    SCOPE_REGISTER _temp15, _scope_3
    _temp16 = CALL (org.ek9.lang::Boolean)_temp15._true() [pure=true, complexity=0]
    ASSERT _temp16, For-range 'by' value must be set
    _temp17 = CALL (org.ek9.lang::Duration)_temp5._cmp(_temp7) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp17
    SCOPE_REGISTER _temp17, _scope_3
    _temp18 = LOAD _temp5
    RETAIN _temp18
    SCOPE_REGISTER _temp18, _scope_3
    ]
    dispatch_cases:
    [
    ascending:
    [
    direction_check:
    [
    SCOPE_ENTER _scope_5
    _temp22 = LOAD_LITERAL 0, org.ek9.lang::Integer
    RETAIN _temp22
    SCOPE_REGISTER _temp22, _scope_5
    _temp23 = CALL (org.ek9.lang::Integer)_temp17._lt(_temp22) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp23
    SCOPE_REGISTER _temp23, _scope_5
    _temp24 = CALL (org.ek9.lang::Boolean)_temp23._true() [pure=true, complexity=0]
    SCOPE_EXIT _scope_5
    ]
    direction_primitive: _temp24
    loop_condition_template:
    [
    SCOPE_ENTER _scope_6
    _temp25 = CALL (org.ek9.lang::Duration)_temp18._cmp(_temp7) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp25
    SCOPE_REGISTER _temp25, _scope_6
    _temp26 = LOAD_LITERAL 0, org.ek9.lang::Integer
    RETAIN _temp26
    SCOPE_REGISTER _temp26, _scope_6
    _temp27 = CALL (org.ek9.lang::Integer)_temp25._lteq(_temp26) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp27
    SCOPE_REGISTER _temp27, _scope_6
    _temp28 = CALL (org.ek9.lang::Boolean)_temp27._true() [pure=true, complexity=0]
    SCOPE_EXIT _scope_6
    ]
    loop_condition_primitive: _temp28
    loop_body_setup:
    [
    RELEASE d
    STORE d, _temp18
    RETAIN d
    ]
    loop_increment:
    [
    SCOPE_ENTER _scope_7
    _temp29 = CALL (org.ek9.lang::Duration)_temp18._addAss(_temp9) [pure=false, complexity=0, effects=THIS_MUTATION]
    RETAIN _temp29
    SCOPE_REGISTER _temp29, _scope_7
    STORE _temp18, _temp29
    SCOPE_EXIT _scope_7
    ]
    ]
    descending:
    [
    direction_check:
    [
    SCOPE_ENTER _scope_8
    _temp30 = LOAD_LITERAL 0, org.ek9.lang::Integer
    RETAIN _temp30
    SCOPE_REGISTER _temp30, _scope_8
    _temp31 = CALL (org.ek9.lang::Integer)_temp17._gt(_temp30) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp31
    SCOPE_REGISTER _temp31, _scope_8
    _temp32 = CALL (org.ek9.lang::Boolean)_temp31._true() [pure=true, complexity=0]
    SCOPE_EXIT _scope_8
    ]
    direction_primitive: _temp32
    loop_condition_template:
    [
    SCOPE_ENTER _scope_9
    _temp33 = CALL (org.ek9.lang::Duration)_temp18._cmp(_temp7) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp33
    SCOPE_REGISTER _temp33, _scope_9
    _temp34 = LOAD_LITERAL 0, org.ek9.lang::Integer
    RETAIN _temp34
    SCOPE_REGISTER _temp34, _scope_9
    _temp35 = CALL (org.ek9.lang::Integer)_temp33._gteq(_temp34) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp35
    SCOPE_REGISTER _temp35, _scope_9
    _temp36 = CALL (org.ek9.lang::Boolean)_temp35._true() [pure=true, complexity=0]
    SCOPE_EXIT _scope_9
    ]
    loop_condition_primitive: _temp36
    loop_body_setup:
    [
    RELEASE d
    STORE d, _temp18
    RETAIN d
    ]
    loop_increment:
    [
    SCOPE_ENTER _scope_10
    _temp37 = CALL (org.ek9.lang::Duration)_temp18._addAss(_temp9) [pure=false, complexity=0, effects=THIS_MUTATION]
    RETAIN _temp37
    SCOPE_REGISTER _temp37, _scope_10
    STORE _temp18, _temp37
    SCOPE_EXIT _scope_10
    ]
    ]
    equal:
    [
    loop_body_setup:
    [
    RELEASE d
    STORE d, _temp18
    RETAIN d
    ]
    single_iteration: true
    ]
    ]
    body:
    [
    SCOPE_ENTER _scope_4
    _temp20 = LOAD stdout
    RETAIN _temp20
    SCOPE_REGISTER _temp20, _scope_4
    _temp21 = LOAD d
    RETAIN _temp21
    SCOPE_REGISTER _temp21, _scope_4
    CALL (org.ek9.lang::StringOutput)_temp20.println(_temp21) [pure=true, complexity=1, trait=true]
    SCOPE_EXIT _scope_4
    ]
    metadata:
    [
    direction_variable: "_temp17"
    current_variable: "_temp18"
    loop_variable: "d"
    end_variable: "_temp7"
    range_type: "org.ek9.lang::Duration"
    by_variable: "_temp9"
    by_type: "org.ek9.lang::Duration"
    ]
    scope_metadata:
    [
    outer_scope: "_scope_2"
    loop_scope: "_scope_3"
    body_scope: "_scope_4"
    ]
    ]
    SCOPE_EXIT _scope_3
    SCOPE_EXIT _scope_2
    SCOPE_EXIT _scope_1
    RETURN`
    durationForRangeLoop()
      stdout <- Stdout()

      start <- PT0S
      end <- PT100S
      step <- PT10S

      for d in start ... end by step
        stdout.println(d)
//EOF
