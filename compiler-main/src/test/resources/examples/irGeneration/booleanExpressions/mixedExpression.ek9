#!ek9
defines module booleanExpressions


  defines function

    @IR: IR_GENERATION: FUNCTION: "booleanExpressions::mixedBooleanExpression": `
    ConstructDfn: booleanExpressions::mixedBooleanExpression(org.ek9.lang::Boolean,org.ek9.lang::Boolean,org.ek9.lang::Boolean)->org.ek9.lang::Boolean
    OperationDfn: booleanExpressions::mixedBooleanExpression.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: booleanExpressions::mixedBooleanExpression.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: booleanExpressions::mixedBooleanExpression.mixedBooleanExpression()->booleanExpressions::mixedBooleanExpression  // ./mixedExpression.ek9:92:5
    BasicBlock: _entry_1
    CALL (booleanExpressions::mixedBooleanExpression)this.i_init() [pure=false, complexity=0]  // ./mixedExpression.ek9:92:5
    RETURN this  // ./mixedExpression.ek9:92:5
    OperationDfn: booleanExpressions::mixedBooleanExpression._call(org.ek9.lang::Boolean,org.ek9.lang::Boolean,org.ek9.lang::Boolean)->org.ek9.lang::Boolean  // ./mixedExpression.ek9:92:5
    BasicBlock: _entry_1
    REFERENCE arg0, org.ek9.lang::Boolean  // ./mixedExpression.ek9:94:9
    REFERENCE arg1, org.ek9.lang::Boolean  // ./mixedExpression.ek9:95:9
    REFERENCE arg2, org.ek9.lang::Boolean  // ./mixedExpression.ek9:96:9
    REFERENCE rtn, org.ek9.lang::Boolean  // ./mixedExpression.ek9:98:9
    _temp1 = CALL (org.ek9.lang::Boolean)org.ek9.lang::Boolean.<init>() [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./mixedExpression.ek9:98:25
    RETAIN _temp1  // ./mixedExpression.ek9:98:25
    SCOPE_REGISTER _temp1, _call  // ./mixedExpression.ek9:98:25
    STORE rtn, _temp1  // ./mixedExpression.ek9:98:25
    RETAIN rtn  // ./mixedExpression.ek9:98:25
    SCOPE_REGISTER rtn, _call  // ./mixedExpression.ek9:98:25
    SCOPE_ENTER _scope_1  // ./mixedExpression.ek9:100:7
    _temp2 = LOGICAL_AND_BLOCK  // ./mixedExpression.ek9:100:17
    [
    left_evaluation:
    [
    _temp3 = LOAD arg0  // ./mixedExpression.ek9:100:17
    RETAIN _temp3  // ./mixedExpression.ek9:100:17
    SCOPE_REGISTER _temp3, _scope_1  // ./mixedExpression.ek9:100:17
    _temp4 = CALL (org.ek9.lang::Boolean)_temp3._true() [pure=true, complexity=0]  // ./mixedExpression.ek9:100:17
    ]
    left_operand: _temp3
    left_condition: _temp4
    right_evaluation:
    [
    _temp5 = LOGICAL_OR_BLOCK  // ./mixedExpression.ek9:100:27
    [
    left_evaluation:
    [
    _temp6 = LOAD arg1  // ./mixedExpression.ek9:100:27
    RETAIN _temp6  // ./mixedExpression.ek9:100:27
    SCOPE_REGISTER _temp6, _scope_1  // ./mixedExpression.ek9:100:27
    _temp7 = CALL (org.ek9.lang::Boolean)_temp6._true() [pure=true, complexity=0]  // ./mixedExpression.ek9:100:27
    ]
    left_operand: _temp6
    left_condition: _temp7
    right_evaluation:
    [
    _temp8 = LOAD arg2  // ./mixedExpression.ek9:100:27
    RETAIN _temp8  // ./mixedExpression.ek9:100:27
    SCOPE_REGISTER _temp8, _scope_1  // ./mixedExpression.ek9:100:27
    ]
    right_operand: _temp8
    result_computation:
    [
    _temp9 = CALL (org.ek9.lang::Boolean)_temp6._or(_temp8) [pure=true, complexity=0]  // ./mixedExpression.ek9:100:27
    RETAIN _temp9  // ./mixedExpression.ek9:100:27
    SCOPE_REGISTER _temp9, _scope_1  // ./mixedExpression.ek9:100:27
    ]
    logical_result: _temp9
    scope_id: _scope_1
    ]
    RETAIN _temp5  // ./mixedExpression.ek9:100:17
    SCOPE_REGISTER _temp5, _scope_1  // ./mixedExpression.ek9:100:17
    ]
    right_operand: _temp5
    result_computation:
    [
    _temp10 = CALL (org.ek9.lang::Boolean)_temp3._and(_temp5) [pure=true, complexity=0]  // ./mixedExpression.ek9:100:17
    RETAIN _temp10  // ./mixedExpression.ek9:100:17
    SCOPE_REGISTER _temp10, _scope_1  // ./mixedExpression.ek9:100:17
    ]
    logical_result: _temp10
    scope_id: _scope_1
    ]
    RETAIN _temp2  // ./mixedExpression.ek9:100:17
    SCOPE_REGISTER _temp2, _scope_1  // ./mixedExpression.ek9:100:17
    RELEASE rtn  // ./mixedExpression.ek9:100:17
    STORE rtn, _temp2  // ./mixedExpression.ek9:100:17
    RETAIN rtn  // ./mixedExpression.ek9:100:17
    SCOPE_EXIT _scope_1  // ./mixedExpression.ek9:100:7
    RETURN rtn  // ./mixedExpression.ek9:98:9`
    mixedBooleanExpression()
      ->
        arg0 as Boolean
        arg1 as Boolean
        arg2 as Boolean
      <-
        rtn as Boolean: Boolean()

      rtn: arg0 and (arg1 or arg2)

//EOF