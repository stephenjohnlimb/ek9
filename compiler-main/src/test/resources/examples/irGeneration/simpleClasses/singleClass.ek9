#!ek9
<?-
  The expected IR that should be generated for the ek9 construct is defined in
  a directive. The unit tests, then compile the ek9 source and generate the IR.
  The unit test then checks the generated IR against the expected IR.
-?>
defines module simpleClasses

  defines class

    @IR: IR_GENERATION: TYPE: "simpleClasses::Example": `
    ConstructDfn: simpleClasses::Example
    Field: aField, org.ek9.lang::String  // ./singleClass.ek9:105:7
    Field: bField, org.ek9.lang::String  // ./singleClass.ek9:106:7
    Field: cField, org.ek9.lang::String  // ./singleClass.ek9:107:7
    Field: dField, org.ek9.lang::String  // ./singleClass.ek9:108:7
    OperationDfn: simpleClasses::Example.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: simpleClasses::Example.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    REFERENCE this.aField, org.ek9.lang::String  // ./singleClass.ek9:105:7
    REFERENCE this.bField, org.ek9.lang::String  // ./singleClass.ek9:106:7
    _temp1 = CALL (org.ek9.lang::String)org.ek9.lang::String.<init>() [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./singleClass.ek9:106:27
    RETAIN _temp1  // ./singleClass.ek9:106:27
    SCOPE_REGISTER _temp1, i_init  // ./singleClass.ek9:106:27
    STORE this.bField, _temp1  // ./singleClass.ek9:106:27
    RETAIN this.bField  // ./singleClass.ek9:106:27
    REFERENCE this.cField, org.ek9.lang::String  // ./singleClass.ek9:107:7
    _temp2 = LOAD_LITERAL "Steve", org.ek9.lang::String  // ./singleClass.ek9:107:27
    RETAIN _temp2  // ./singleClass.ek9:107:27
    SCOPE_REGISTER _temp2, i_init  // ./singleClass.ek9:107:27
    STORE this.cField, _temp2  // ./singleClass.ek9:107:27
    RETAIN this.cField  // ./singleClass.ek9:107:27
    REFERENCE this.dField, org.ek9.lang::String  // ./singleClass.ek9:108:7
    _temp3 = LOAD_LITERAL "Stephen", org.ek9.lang::String  // ./singleClass.ek9:108:17
    RETAIN _temp3  // ./singleClass.ek9:108:17
    SCOPE_REGISTER _temp3, i_init  // ./singleClass.ek9:108:17
    STORE this.dField, _temp3  // ./singleClass.ek9:108:17
    RETAIN this.dField  // ./singleClass.ek9:108:17
    RETURN
    OperationDfn: simpleClasses::Example.Example()->simpleClasses::Example  // ./singleClass.ek9:110:7
    BasicBlock: _entry_1
    _temp_i_init = CALL (simpleClasses::Example)this.i_init() [pure=false, complexity=0]  // ./singleClass.ek9:110:7
    SCOPE_ENTER _scope_1  // ./singleClass.ek9:111:9
    _temp1 = LOAD_LITERAL "Now Initialised", org.ek9.lang::String  // ./singleClass.ek9:111:17
    RETAIN _temp1  // ./singleClass.ek9:111:17
    SCOPE_REGISTER _temp1, _scope_1  // ./singleClass.ek9:111:17
    RELEASE this.aField  // ./singleClass.ek9:111:17
    STORE this.aField, _temp1  // ./singleClass.ek9:111:17
    RETAIN this.aField  // ./singleClass.ek9:111:17
    REFERENCE local1, org.ek9.lang::Integer  // ./singleClass.ek9:113:9
    _temp2 = LOAD_LITERAL 1, org.ek9.lang::Integer  // ./singleClass.ek9:113:19
    RETAIN _temp2  // ./singleClass.ek9:113:19
    SCOPE_REGISTER _temp2, _scope_1  // ./singleClass.ek9:113:19
    STORE local1, _temp2  // ./singleClass.ek9:113:19
    RETAIN local1  // ./singleClass.ek9:113:19
    SCOPE_REGISTER local1, _scope_1  // ./singleClass.ek9:113:19
    _temp3 = LOAD_LITERAL 2, org.ek9.lang::Integer  // ./singleClass.ek9:114:17
    RETAIN _temp3  // ./singleClass.ek9:114:17
    SCOPE_REGISTER _temp3, _scope_1  // ./singleClass.ek9:114:17
    RELEASE local1  // ./singleClass.ek9:114:17
    STORE local1, _temp3  // ./singleClass.ek9:114:17
    RETAIN local1  // ./singleClass.ek9:114:17
    SCOPE_REGISTER local1, _scope_1  // ./singleClass.ek9:114:17
    _temp4 = CONTROL_FLOW_CHAIN  // ./singleClass.ek9:115:22
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp5 = LOAD local1  // ./singleClass.ek9:115:22
    _temp6 = IS_NULL _temp5  // ./singleClass.ek9:115:22
    ]
    primitive_condition: _temp6
    body_evaluation:
    [
    _temp7 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./singleClass.ek9:115:22
    RETAIN _temp7  // ./singleClass.ek9:115:22
    SCOPE_REGISTER _temp7, _scope_1  // ./singleClass.ek9:115:22
    ]
    body_result: _temp7
    ]
    ]
    default_body_evaluation:
    [
    _temp8 = CALL (org.ek9.lang::Boolean)_temp5._isSet() [pure=true, complexity=0]  // ./singleClass.ek9:115:22
    RETAIN _temp8  // ./singleClass.ek9:115:22
    SCOPE_REGISTER _temp8, _scope_1  // ./singleClass.ek9:115:22
    ]
    default_result: _temp8
    scope_id: _scope_1
    ]
    RETAIN _temp4  // ./singleClass.ek9:115:9
    SCOPE_REGISTER _temp4, _scope_1  // ./singleClass.ek9:115:9
    _temp9 = CALL (org.ek9.lang::Boolean)_temp4._true() [pure=true, complexity=0]  // ./singleClass.ek9:115:9
    ASSERT _temp9  // ./singleClass.ek9:115:9
    SCOPE_EXIT _scope_1  // ./singleClass.ek9:111:9
    RETURN  // ./singleClass.ek9:110:7`
    Example as open
      aField as String?
      bField as String := String()
      cField as String := "Steve"
      dField <- "Stephen"

      Example()
        aField: "Now Initialised"

        local1 <- 1
        local1: 2
        assert local1?

//EOF