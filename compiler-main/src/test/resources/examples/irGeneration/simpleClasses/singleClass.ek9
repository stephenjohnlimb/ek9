#!ek9
<?-
  The expected IR that should be generated for the ek9 construct is defined in
  a directive. The unit tests, then compile the ek9 source and generate the IR.
  The unit test then checks the generated IR against the expected IR.
  TODO this IR is not correct.
-?>
defines module simpleClasses

  defines class

    @IR: IR_GENERATION: TYPE: "simpleClasses::Example": `
    ConstructDfn: simpleClasses::Example
    Field: aField, org.ek9.lang::String  // ./singleClass.ek9:78:7
    Field: bField, org.ek9.lang::String  // ./singleClass.ek9:79:7
    Field: cField, org.ek9.lang::String  // ./singleClass.ek9:80:7
    Field: dField, org.ek9.lang::String  // ./singleClass.ek9:81:7
    OperationDfn: simpleClasses::Example.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: simpleClasses::Example.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    REFERENCE this.aField, org.ek9.lang::String  // ./singleClass.ek9:78:7
    REFERENCE this.bField, org.ek9.lang::String  // ./singleClass.ek9:79:7
    _temp1 = CALL (org.ek9.lang::String)org.ek9.lang::String.<init>()  // ./singleClass.ek9:79:27
    RETAIN _temp1  // ./singleClass.ek9:79:27
    SCOPE_REGISTER _temp1, _i_init_1  // ./singleClass.ek9:79:27
    STORE this.bField, _temp1  // ./singleClass.ek9:79:27
    RETAIN this.bField  // ./singleClass.ek9:79:27
    REFERENCE this.cField, org.ek9.lang::String  // ./singleClass.ek9:80:7
    _temp2 = LOAD_LITERAL "Steve", org.ek9.lang::String  // ./singleClass.ek9:80:27
    RETAIN _temp2  // ./singleClass.ek9:80:27
    SCOPE_REGISTER _temp2, _i_init_1  // ./singleClass.ek9:80:27
    STORE this.cField, _temp2  // ./singleClass.ek9:80:27
    RETAIN this.cField  // ./singleClass.ek9:80:27
    REFERENCE this.dField, org.ek9.lang::String  // ./singleClass.ek9:81:7
    _temp3 = LOAD_LITERAL "Stephen", org.ek9.lang::String  // ./singleClass.ek9:81:17
    RETAIN _temp3  // ./singleClass.ek9:81:17
    SCOPE_REGISTER _temp3, _i_init_1  // ./singleClass.ek9:81:17
    STORE this.dField, _temp3  // ./singleClass.ek9:81:17
    RETAIN this.dField  // ./singleClass.ek9:81:17
    RETURN
    OperationDfn: simpleClasses::Example.Example()->simpleClasses::Example  // ./singleClass.ek9:83:7
    BasicBlock: _entry_1
    _temp_i_init = CALL (simpleClasses::Example)this.i_init()  // ./singleClass.ek9:83:7
    SCOPE_ENTER _scope_1
    _temp1 = LOAD_LITERAL "Now Initialised", org.ek9.lang::String  // ./singleClass.ek9:84:17
    RETAIN _temp1  // ./singleClass.ek9:84:17
    SCOPE_REGISTER _temp1, _scope_1  // ./singleClass.ek9:84:17
    RELEASE this.aField  // ./singleClass.ek9:84:17
    STORE this.aField, _temp1  // ./singleClass.ek9:84:17
    RETAIN this.aField  // ./singleClass.ek9:84:17
    REFERENCE local1, org.ek9.lang::Integer  // ./singleClass.ek9:86:9
    _temp2 = LOAD_LITERAL 1, org.ek9.lang::Integer  // ./singleClass.ek9:86:19
    RETAIN _temp2  // ./singleClass.ek9:86:19
    SCOPE_REGISTER _temp2, _scope_1  // ./singleClass.ek9:86:19
    STORE local1, _temp2  // ./singleClass.ek9:86:19
    RETAIN local1  // ./singleClass.ek9:86:19
    SCOPE_REGISTER local1, _scope_1  // ./singleClass.ek9:86:19
    _temp3 = LOAD_LITERAL 2, org.ek9.lang::Integer  // ./singleClass.ek9:87:17
    RETAIN _temp3  // ./singleClass.ek9:87:17
    SCOPE_REGISTER _temp3, _scope_1  // ./singleClass.ek9:87:17
    RELEASE local1  // ./singleClass.ek9:87:17
    STORE local1, _temp3  // ./singleClass.ek9:87:17
    RETAIN local1  // ./singleClass.ek9:87:17
    SCOPE_REGISTER local1, _scope_1  // ./singleClass.ek9:87:17
    _temp5 = LOAD local1  // ./singleClass.ek9:88:22
    RETAIN _temp5  // ./singleClass.ek9:88:22
    SCOPE_REGISTER _temp5, _scope_1  // ./singleClass.ek9:88:22
    _temp4 = CALL (org.ek9.lang::Boolean)_temp5._isSet()  // ./singleClass.ek9:88:22
    RETAIN _temp4  // ./singleClass.ek9:88:9
    SCOPE_REGISTER _temp4, _scope_1  // ./singleClass.ek9:88:9
    _temp6 = CALL (org.ek9.lang::Boolean)_temp4._true()  // ./singleClass.ek9:88:9
    ASSERT _temp6  // ./singleClass.ek9:88:9
    SCOPE_EXIT _scope_1
    RETURN`
    Example as open
      aField as String?
      bField as String := String()
      cField as String := "Steve"
      dField <- "Stephen"

      Example()
        aField: "Now Initialised"

        local1 <- 1
        local1: 2
        assert local1?

//EOF