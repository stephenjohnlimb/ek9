#!ek9
<?-
  Test IR generation for if/else statement.
-?>
defines module controlFlow

  defines function

    @IR: IR_GENERATION: FUNCTION: "controlFlow::ifElse": `
    ConstructDfn: controlFlow::ifElse(org.ek9.lang::Integer)->org.ek9.lang::String
    OperationDfn: controlFlow::ifElse.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: controlFlow::ifElse.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: controlFlow::ifElse.ifElse()->controlFlow::ifElse
    BasicBlock: _entry_1
    CALL (controlFlow::ifElse)this.i_init() [pure=false, complexity=0]
    RETURN this
    OperationDfn: controlFlow::ifElse._call(org.ek9.lang::Integer)->org.ek9.lang::String
    BasicBlock: _entry_1
    REFERENCE value, org.ek9.lang::Integer
    REFERENCE result, org.ek9.lang::String
    _temp1 = CALL (org.ek9.lang::String)org.ek9.lang::String.<init>() [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp1
    SCOPE_REGISTER _temp1, _call
    STORE result, _temp1
    RETAIN result
    SCOPE_REGISTER result, _call
    SCOPE_ENTER _scope_1
    SCOPE_ENTER _scope_2
    CONTROL_FLOW_CHAIN
    [
    chain_type: "IF_ELSE_IF"
    condition_chain:
    [
    [
    case_scope_id: _scope_4
    case_type: "EXPRESSION"
    condition_evaluation:
    [
    SCOPE_ENTER _scope_3
    _temp3 = LOAD value
    RETAIN _temp3
    SCOPE_REGISTER _temp3, _scope_3
    _temp4 = LOAD_LITERAL 10, org.ek9.lang::Integer
    RETAIN _temp4
    SCOPE_REGISTER _temp4, _scope_3
    _temp2 = CALL (org.ek9.lang::Integer)_temp3._gt(_temp4) [pure=true, complexity=1, effects=RETURN_MUTATION]
    RETAIN _temp2
    SCOPE_REGISTER _temp2, _scope_3
    _temp5 = CALL (org.ek9.lang::Boolean)_temp2._true() [pure=true, complexity=0]
    SCOPE_EXIT _scope_3
    ]
    condition_result: _temp2
    primitive_condition: _temp5
    body_evaluation:
    [
    SCOPE_ENTER _scope_4
    _temp6 = LOAD_LITERAL High, org.ek9.lang::String
    RETAIN _temp6
    SCOPE_REGISTER _temp6, _scope_4
    RELEASE result
    STORE result, _temp6
    RETAIN result
    SCOPE_EXIT _scope_4
    ]
    ]
    ]
    default_body_evaluation:
    [
    SCOPE_ENTER _scope_5
    _temp7 = LOAD_LITERAL Low, org.ek9.lang::String
    RETAIN _temp7
    SCOPE_REGISTER _temp7, _scope_5
    RELEASE result
    STORE result, _temp7
    RETAIN result
    SCOPE_EXIT _scope_5
    ]
    scope_id: _scope_2
    ]
    SCOPE_EXIT _scope_2
    SCOPE_EXIT _scope_1
    RETURN result`
    ifElse()
      -> value as Integer
      <-
        result <- String()

      if value > 10
        result: "High"
      else
        result: "Low"

//EOF