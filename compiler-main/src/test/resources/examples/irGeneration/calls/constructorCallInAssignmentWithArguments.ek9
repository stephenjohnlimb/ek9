#!ek9
<?-
  Constructor call with arguments in assignment statement context.
  This tests assignment (not declaration) with constructor arguments.
  Key difference from declaration: RELEASE instruction before assignment.
-?>
defines module constructorassignmentwithargscalls.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs": `
    ConstructDfn: constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs()->org.ek9.lang::Void
    OperationDfn: constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs.checkStringConstructionWithAssignmentAndArgs()->constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs  // ./constructorCallInAssignmentWithArguments.ek9:73:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs)this.i_init() [pure=false, complexity=0]  // ./constructorCallInAssignmentWithArguments.ek9:73:5
    RETURN this  // ./constructorCallInAssignmentWithArguments.ek9:73:5
    OperationDfn: constructorassignmentwithargscalls.test::checkStringConstructionWithAssignmentAndArgs._call()->org.ek9.lang::Void  // ./constructorCallInAssignmentWithArguments.ek9:73:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:74:7
    REFERENCE aString, org.ek9.lang::String  // ./constructorCallInAssignmentWithArguments.ek9:74:7
    _temp2 = LOAD_LITERAL "World", org.ek9.lang::String  // ./constructorCallInAssignmentWithArguments.ek9:75:23
    _temp1 = CALL (org.ek9.lang::String)org.ek9.lang::String.<init>(_temp2) [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    RETAIN _temp1  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    SCOPE_REGISTER _temp1, _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    RELEASE aString  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    STORE aString, _temp1  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    RETAIN aString  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    SCOPE_REGISTER aString, _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:75:16
    _temp3 = CONTROL_FLOW_CHAIN  // ./constructorCallInAssignmentWithArguments.ek9:76:7
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp4 = LOAD aString  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    _temp5 = IS_NULL _temp4  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    ]
    primitive_condition: _temp5
    body_evaluation:
    [
    _temp6 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    RETAIN _temp6  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    SCOPE_REGISTER _temp6, _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    ]
    body_result: _temp6
    ]
    ]
    default_body_evaluation:
    [
    _temp7 = CALL (org.ek9.lang::Boolean)_temp4._isSet() [pure=true, complexity=0]  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    RETAIN _temp7  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    SCOPE_REGISTER _temp7, _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:76:21
    ]
    default_result: _temp7
    scope_id: _scope_1
    ]
    RETAIN _temp3  // ./constructorCallInAssignmentWithArguments.ek9:76:7
    SCOPE_REGISTER _temp3, _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:76:7
    _temp8 = CALL (org.ek9.lang::Boolean)_temp3._true() [pure=true, complexity=0]  // ./constructorCallInAssignmentWithArguments.ek9:76:7
    ASSERT _temp8  // ./constructorCallInAssignmentWithArguments.ek9:76:7
    SCOPE_EXIT _scope_1  // ./constructorCallInAssignmentWithArguments.ek9:74:7
    RETURN  // ./constructorCallInAssignmentWithArguments.ek9:73:5`
    checkStringConstructionWithAssignmentAndArgs()
      aString as String?
      aString: String("World")
      assert aString?

//EOF