#!ek9
<?-
  Just demonstrates the IR generated for a constructor call.
  So we are only interested in 'checkStringConstruction' here. We already have tests
  for the String constructor itself.
-?>
defines module constructorcalls.test

  defines function

    @IR: IR_GENERATION: FUNCTION: "constructorcalls.test::checkStringConstruction": `
    ConstructDfn: constructorcalls.test::checkStringConstruction()->org.ek9.lang::Void
    OperationDfn: constructorcalls.test::checkStringConstruction.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: constructorcalls.test::checkStringConstruction.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: constructorcalls.test::checkStringConstruction.checkStringConstruction()->constructorcalls.test::checkStringConstruction  // ./constructorCall.ek9:71:5
    BasicBlock: _entry_1
    CALL (constructorcalls.test::checkStringConstruction)this.i_init() [pure=false, complexity=0]  // ./constructorCall.ek9:71:5
    RETURN this  // ./constructorCall.ek9:71:5
    OperationDfn: constructorcalls.test::checkStringConstruction._call()->org.ek9.lang::Void  // ./constructorCall.ek9:71:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./constructorCall.ek9:72:7
    REFERENCE aString, org.ek9.lang::String  // ./constructorCall.ek9:72:7
    _temp1 = CALL (org.ek9.lang::String)org.ek9.lang::String.<init>() [pure=true, complexity=1, effects=RETURN_MUTATION]  // ./constructorCall.ek9:72:18
    RETAIN _temp1  // ./constructorCall.ek9:72:18
    SCOPE_REGISTER _temp1, _scope_1  // ./constructorCall.ek9:72:18
    STORE aString, _temp1  // ./constructorCall.ek9:72:18
    RETAIN aString  // ./constructorCall.ek9:72:18
    SCOPE_REGISTER aString, _scope_1  // ./constructorCall.ek9:72:18
    _temp2 = CONTROL_FLOW_CHAIN  // ./constructorCall.ek9:73:21
    [
    chain_type: "QUESTION_OPERATOR"
    condition_chain:
    [
    [
    case_scope_id: _scope_1
    case_type: "NULL_CHECK"
    condition_evaluation:
    [
    _temp3 = LOAD aString  // ./constructorCall.ek9:73:21
    _temp4 = IS_NULL _temp3  // ./constructorCall.ek9:73:21
    ]
    primitive_condition: _temp4
    body_evaluation:
    [
    _temp5 = CALL_STATIC (org.ek9.lang::Boolean)org.ek9.lang::Boolean._ofFalse() [pure=true, complexity=0]  // ./constructorCall.ek9:73:21
    RETAIN _temp5  // ./constructorCall.ek9:73:21
    SCOPE_REGISTER _temp5, _scope_1  // ./constructorCall.ek9:73:21
    ]
    body_result: _temp5
    ]
    ]
    default_body_evaluation:
    [
    _temp6 = CALL (org.ek9.lang::String)_temp3._isSet() [pure=true, complexity=0]  // ./constructorCall.ek9:73:21
    RETAIN _temp6  // ./constructorCall.ek9:73:21
    SCOPE_REGISTER _temp6, _scope_1  // ./constructorCall.ek9:73:21
    ]
    default_result: _temp6
    scope_id: _scope_1
    ]
    RETAIN _temp2  // ./constructorCall.ek9:73:7
    SCOPE_REGISTER _temp2, _scope_1  // ./constructorCall.ek9:73:7
    _temp7 = CALL (org.ek9.lang::Boolean)_temp2._true() [pure=true, complexity=0]  // ./constructorCall.ek9:73:7
    ASSERT _temp7  // ./constructorCall.ek9:73:7
    SCOPE_EXIT _scope_1  // ./constructorCall.ek9:72:7
    RETURN  // ./constructorCall.ek9:71:5`
    checkStringConstruction()
      aString <- String()
      assert aString?

//EOF