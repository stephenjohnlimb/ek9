#!ek9
<?-
  Test IR generation for automatic parameter promotion in function calls
  
  Purpose: Demonstrate that when calling a function with a Float parameter
  but passing an Integer argument, the IR generation automatically includes
  a call to Integer._promote() to convert the Integer to Float.
  
  Expected IR: 
  1. Load Integer literal 42
  2. Call Integer._promote() to get promoted Float value  
  3. Pass promoted Float result as argument to acceptsFloat function
-?>
defines module functionparameterpromotion.test

  defines function
  
    acceptsFloat() as pure
      -> value as Float
      assert value?
    
    @IR: IR_GENERATION: FUNCTION: "functionparameterpromotion.test::testPromotion": `
    ConstructDfn: functionparameterpromotion.test::testPromotion()->org.ek9.lang::Void
    OperationDfn: functionparameterpromotion.test::testPromotion.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: functionparameterpromotion.test::testPromotion.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: functionparameterpromotion.test::testPromotion.testPromotion()->functionparameterpromotion.test::testPromotion  // ./functionParameterPromotion.ek9:48:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (functionparameterpromotion.test::testPromotion)this.i_init() [pure=false, complexity=0]  // ./functionParameterPromotion.ek9:48:5
    RETURN this  // ./functionParameterPromotion.ek9:48:5
    OperationDfn: functionparameterpromotion.test::testPromotion._call()->org.ek9.lang::Void  // ./functionParameterPromotion.ek9:48:5
    BasicBlock: _entry_1
    SCOPE_ENTER _scope_1  // ./functionParameterPromotion.ek9:49:7
    _temp2 = LOAD_LITERAL 42, org.ek9.lang::Integer  // ./functionParameterPromotion.ek9:49:20
    RETAIN _temp2
    SCOPE_REGISTER _temp2, _scope_1
    _temp3 = FUNCTION_INSTANCE functionparameterpromotion.test::acceptsFloat  // ./functionParameterPromotion.ek9:49:7
    _temp4 = CALL (org.ek9.lang::Integer)_temp2._promote() [pure=true, complexity=0, effects=RETURN_MUTATION]  // ./functionParameterPromotion.ek9:49:7
    RETAIN _temp4  // ./functionParameterPromotion.ek9:49:7
    SCOPE_REGISTER _temp4, _scope_1  // ./functionParameterPromotion.ek9:49:7
    CALL (functionparameterpromotion.test::acceptsFloat)_temp3._call(_temp4) [pure=true, complexity=2]  // ./functionParameterPromotion.ek9:49:7
    SCOPE_EXIT _scope_1  // ./functionParameterPromotion.ek9:49:7
    RETURN  // ./functionParameterPromotion.ek9:48:5`
    
    testPromotion()
      acceptsFloat(42)

//EOF