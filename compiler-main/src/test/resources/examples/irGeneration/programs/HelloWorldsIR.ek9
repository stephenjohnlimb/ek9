#!ek9
defines module introduction2

  defines constant
    //While it is a constant internally we model as a VARIABLE
    @Resolved: SYMBOL_DEFINITION: VARIABLE: "worldMessage"
    worldMessage <- "Hello, Earth"

  defines program

    @IR: IR_GENERATION: TYPE: "introduction2::HelloEarth": `
    ConstructDfn: introduction2::HelloEarth
    PROGRAM_ENTRY_POINT_BLOCK
    [
    programs_count: 4
    available_programs:
    [
    introduction1::HelloMessage
    [
    0:message:org.ek9.lang::String
    ]
    introduction1::HelloWorld
    introduction2::HelloEarth
    introduction2::HelloMars
    ]
    ]
    OperationDfn: introduction2::HelloEarth.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: introduction2::HelloEarth.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: introduction2::HelloEarth.HelloEarth()->introduction2::HelloEarth  // ./HelloWorldsIR.ek9:56:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (introduction2::HelloEarth)this.i_init() [pure=false, complexity=0]  // ./HelloWorldsIR.ek9:56:5
    RETURN this  // ./HelloWorldsIR.ek9:56:5
    OperationDfn: introduction2::HelloEarth._main()->org.ek9.lang::Void  // ./HelloWorldsIR.ek9:56:5
    BasicBlock: _entry_2
    SCOPE_ENTER _scope_1  // ./HelloWorldsIR.ek9:57:7
    REFERENCE stdout, org.ek9.lang::Stdout  // ./HelloWorldsIR.ek9:57:7
    _temp1 = CALL (org.ek9.lang::Stdout)org.ek9.lang::Stdout.<init>() [pure=true, complexity=1, effects=IO,RETURN_MUTATION]  // ./HelloWorldsIR.ek9:57:17
    RETAIN _temp1  // ./HelloWorldsIR.ek9:57:17
    SCOPE_REGISTER _temp1, _scope_1  // ./HelloWorldsIR.ek9:57:17
    STORE stdout, _temp1  // ./HelloWorldsIR.ek9:57:17
    RETAIN stdout  // ./HelloWorldsIR.ek9:57:17
    SCOPE_REGISTER stdout, _scope_1  // ./HelloWorldsIR.ek9:57:17
    _temp3 = LOAD stdout  // ./HelloWorldsIR.ek9:58:7
    RETAIN _temp3  // ./HelloWorldsIR.ek9:58:7
    SCOPE_REGISTER _temp3, _scope_1  // ./HelloWorldsIR.ek9:58:7
    _temp4 = LOAD worldMessage  // ./HelloWorldsIR.ek9:58:22
    RETAIN _temp4  // ./HelloWorldsIR.ek9:58:22
    SCOPE_REGISTER _temp4, _scope_1  // ./HelloWorldsIR.ek9:58:22
    _temp2 = CALL (org.ek9.lang::Stdout)_temp3.println(_temp4) [pure=false, complexity=0]  // ./HelloWorldsIR.ek9:58:14
    SCOPE_EXIT _scope_1  // ./HelloWorldsIR.ek9:57:7
    RETURN  // ./HelloWorldsIR.ek9:56:5`
    HelloEarth()
      stdout <- Stdout()
      stdout.println(worldMessage)

    @IR: IR_GENERATION: TYPE: "introduction2::HelloMars": `
    ConstructDfn: introduction2::HelloMars
    PROGRAM_ENTRY_POINT_BLOCK
    [
    programs_count: 4
    available_programs:
    [
    introduction1::HelloMessage
    [
    0:message:org.ek9.lang::String
    ]
    introduction1::HelloWorld
    introduction2::HelloEarth
    introduction2::HelloMars
    ]
    ]
    OperationDfn: introduction2::HelloMars.c_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: introduction2::HelloMars.i_init()->org.ek9.lang::Void
    BasicBlock: _entry_1
    RETURN
    OperationDfn: introduction2::HelloMars.HelloMars()->introduction2::HelloMars  // ./HelloWorldsIR.ek9:105:5
    BasicBlock: _entry_1
    _temp_i_init = CALL (introduction2::HelloMars)this.i_init() [pure=false, complexity=0]  // ./HelloWorldsIR.ek9:105:5
    RETURN this  // ./HelloWorldsIR.ek9:105:5
    OperationDfn: introduction2::HelloMars._main()->org.ek9.lang::Void  // ./HelloWorldsIR.ek9:105:5
    BasicBlock: _entry_2
    SCOPE_ENTER _scope_1  // ./HelloWorldsIR.ek9:106:7
    REFERENCE stdout, org.ek9.lang::Stdout  // ./HelloWorldsIR.ek9:106:7
    _temp1 = CALL (org.ek9.lang::Stdout)org.ek9.lang::Stdout.<init>() [pure=true, complexity=1, effects=IO,RETURN_MUTATION]  // ./HelloWorldsIR.ek9:106:17
    RETAIN _temp1  // ./HelloWorldsIR.ek9:106:17
    SCOPE_REGISTER _temp1, _scope_1  // ./HelloWorldsIR.ek9:106:17
    STORE stdout, _temp1  // ./HelloWorldsIR.ek9:106:17
    RETAIN stdout  // ./HelloWorldsIR.ek9:106:17
    SCOPE_REGISTER stdout, _scope_1  // ./HelloWorldsIR.ek9:106:17
    _temp3 = LOAD stdout  // ./HelloWorldsIR.ek9:107:7
    RETAIN _temp3  // ./HelloWorldsIR.ek9:107:7
    SCOPE_REGISTER _temp3, _scope_1  // ./HelloWorldsIR.ek9:107:7
    _temp4 = LOAD_LITERAL "Hello, Mars", org.ek9.lang::String  // ./HelloWorldsIR.ek9:107:22
    RETAIN _temp4  // ./HelloWorldsIR.ek9:107:22
    SCOPE_REGISTER _temp4, _scope_1  // ./HelloWorldsIR.ek9:107:22
    _temp2 = CALL (org.ek9.lang::Stdout)_temp3.println(_temp4) [pure=false, complexity=0]  // ./HelloWorldsIR.ek9:107:14
    SCOPE_EXIT _scope_1  // ./HelloWorldsIR.ek9:106:7
    RETURN  // ./HelloWorldsIR.ek9:105:5`
    HelloMars()
      stdout <- Stdout()
      stdout.println("Hello, Mars")
//EOF