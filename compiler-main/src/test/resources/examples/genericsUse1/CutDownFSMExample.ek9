#!ek9
<?-
 A cut down version of a finite state machine in generic form.
 Just seeing how much of this can be resolved in the definition phase of the compiler.
 So the order will be important here, but as we will trigger resolution just after references phase
 We should find that most generics will resolve (but not all because we also need to expand generics of generics.
-?>
defines module com.utils.fsm.example

  defines type
    <?-
      Lets just define a simple enumerated type and use the finite state machine with that.
    -?>
    //Symbol 1
    @Resolved: SYMBOL_DEFINITION: TYPE: "CardSuit"
    CardSuit as
      Hearts
      Diamonds
      Clubs
      Spades

  defines function

    <?-
      Basic function that can be called by the FSM on changes
      Has a default implementation - but now you can override
      Do this by creating a dynamic function and provide the implementation you want
    -?>
    //Symbol 2
    @Resolved: SYMBOL_DEFINITION: TEMPLATE_FUNCTION: "FSMListener"
    FSMListener() of type T as open
      ->
        fromState as T
        toState as T
      assert fromState? and toState?


  defines class

    <?-
      Outline of a finite state machine idea.
    -?>
    //Symbol 3
    @Resolved: SYMBOL_DEFINITION: TEMPLATE_TYPE: "FSM"
    FSM of type T

      //Couple of properties to hang on to
      currentState as T?
      listener as FSMListener of T?

      <?-
        Must provide this for unset style construction.
      -?>
      default FSM()

      <?-
        Simple constructor so we can infer generic type when used.
      -?>
      FSM()
        -> initialState as T

        assert initialState?
        currentState := initialState
        //Also initialise the listener to a basic function just in case setListener is never called.
        listener: () is FSMListener of T as function (assert fromState? and toState?)

      setState()
        -> newState as T
        assert newState?
        if listener?
          listener(currentState, newState)
        currentState := newState
      getState()
        <- rtn as T := currentState

      setListener()
        -> listenerToAdd as FSMListener of T
        assert listenerToAdd?
        listener := listenerToAdd

      override operator ? as pure
        <- rtn as Boolean: currentState? and listener?

  defines program

    <?-
      A Simple driver program to be used to check out the use of FSM and the listener
    -?>
    //Symbol 4
    @Resolved: SYMBOL_DEFINITION: TYPE: "Driver"
    Driver as

      //Used as a capture variable into the dynamic functions
      stdout <- Stdout()

      //Need to use long hand to check definition phase via type defs.
      //Later on we will check the interference mechanism one resolve phase is implemented.
      //Symbol 5 and Symbol 6
      @Resolved: SYMBOL_DEFINITION: FUNCTION: "FSMListener of (Integer)"
      myListener as FSMListener of Integer: (stdout) is FSMListener of Integer as function
        assert fromState? and toState?
        stdout.println(`Changing from ${fromState} to ${toState}`)

      //Again in this example, use long hand to declare the type.
      //Symbol 7 - eventually we'll get to 'myMachine <- FSM(2)'
      @Resolved: SYMBOL_DEFINITION: TYPE: "FSM of (Integer)"
      myMachine as FSM of Integer: FSM(2)
      //Now a couple of interactions
      myMachine.setListener(myListener)
      myMachine.setState(5)

      //Lets try it with the Cards, long hand again
      //Symbol 8 and Symbol 9
      @Resolved: SYMBOL_DEFINITION: FUNCTION: "FSMListener of (CardSuit)"
      cardListener as FSMListener of CardSuit: (stdout) is FSMListener of CardSuit as function
        assert fromState? and toState?
        stdout.println(`Changing from ${fromState} to ${toState}`)

      assert cardListener?

      //Symbol 10 - eventually we'll get to 'cardMachine <- FSM(CardSuit.Clubs)'
      @Resolved: SYMBOL_DEFINITION: TYPE: "FSM of (CardSuit)"
      cardMachine as FSM of CardSuit: FSM(CardSuit.Clubs)
      //Again a few interactions
      cardMachine.setListener(cardListener)
      cardMachine.setState(CardSuit.Hearts)

//EOF
