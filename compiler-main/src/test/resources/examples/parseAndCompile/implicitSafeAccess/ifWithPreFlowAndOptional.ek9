#!ek9
<?-
  Optional use with if statement in the preflow - declaration/assignment.
  The trick here, is that the preflow is ALWAYS checked for being non-null and _isSet true.
  This means that in effect - you get the declaration/assignment AND the ? operation all in one.
  So this means that to go into the 'if' block not only is the Optional 'o' assigned to it has already
  been checked to see if it 'isSet'.
  This means that the block following is now 'safe' for the 'o' 'get()' method to be called without any further
  need to call '?' or 'isOk'.
-?>
defines module preflow.withif.optional

  defines function

    <?-
      Just a test fixture.
    -?>
    getExplicitOptional()
      <- rtn <- Optional("Steve")

    <?-
      This is the specific example we are showing.
      The declaration of o and its use in the guard means that the '?'
      Has been applied implicitly. Hence we can then use '.get()' without
      any further checks.
    -?>
    ifWithDeclarationWithOptionalTest()

      if o <- getExplicitOptional()
        value <- o.get()
        assert value?

    <?-
      This is the equivalent of the above.
    -?>
    isSetIfTest()
      o1 <- getExplicitOptional()

      if o1?
        val <- o1.get()
        assert val?

    <?-
      This is also the equivalent.
    -?>
    declarationAndIsSetIfTest()

      if o1 <- getExplicitOptional() then o1?
        val <- o1.get()
        assert val?

//EOF