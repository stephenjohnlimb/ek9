#!ek9
defines module some.ok.trycatchfinallyguards

  <!-
    First few records and functions here are the test fixtures.
  -!>
  defines record

    //Note that this has no 'is-set' operator
    UnusableAggregate
      name <- String()

    //But this does have the 'is-set' operator
    UsableAggregate
      name <- String()

      default operator ?

  defines function

    <?-
      Simple function to provide an aggregate (record in this case)
      that does not have the 'is-set' operator.
    -?>
    provideUnusableReturn()
      <- rtn <- UnusableAggregate()

    <?-
      Provide a usable aggregate
    -?>
    provideUsableReturn()
      <- rtn <- UsableAggregate()

    <!-
      These are the demonstrations the prove the positive use and also the negative use.
      'Try' has two forms, as a statement but also as an expression, these are shown below.
    -!>

    demonstrateValidTryStatementAssignmentUse1()

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      try toCheck := provideUnusableReturn()
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryExpressionAssignmentUse1()

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      name <- try toCheck := provideUnusableReturn()
          <- rtn as String: toCheck.name
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

      stdout.println(`But this is just a return from a blind assignment ${name}`)

    demonstrateValidTryStatementAssignmentUse2()

      stdout <- Stdout()

      //Just for completeness really
      toCheck <- UsableAggregate()
      try toCheck := provideUsableReturn()
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryExpressionAssignmentUse2()

      stdout <- Stdout()
      //Again for completeness using a 'usable' aggregate.
      toCheck <- UsableAggregate()
      name <- try toCheck := provideUsableReturn()
          <- rtn as String: toCheck.name
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

      stdout.println(`But this is just a return from a blind assignment ${name}`)

    demonstrateValidTryStatementDeclarationUse()

      stdout <- Stdout()

      //As the UnusableAggregate does have an is-set operator it can be used in the 'guard' statement.
      //Here the declaration 'guard' functionality is triggers, a declaration and the check that what was declared
      //does actually report to have a meaningful value, so in this case only if the UsableReturn 'isSet' and conditional is 'true'
      //Will the while loop be processed.
      try toCheck <- provideUsableReturn()
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryExpressionDeclarationUse()

      stdout <- Stdout()

      //As the UnusableAggregate does have an is-set operator it can be used in the 'guard' statement.
      //Here the declaration 'guard' functionality is triggers, a declaration and the check that what was declared
      //does actually report to have a meaningful value, so in this case only if the UsableReturn 'isSet' and conditional is 'true'
      //Will the while loop be processed.
      name <- try toCheck <- provideUsableReturn()
        <- rtn as String: toCheck.name
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

      stdout.println(`But this is just a return from a blind assignment ${name}`)

    demonstrateValidTryStatementGuardedAssignmentUse()

      stdout <- Stdout()

      //As the UsableAggregate does have an is-set operator it can be used in the 'guard' statement.
      toCheck <- UsableAggregate()
      try toCheck ?= provideUsableReturn()
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    <!-
      Now the invalid scenarios
    -!>

    demonstrateValidTryStatementGuardedAssignmentUseViaAny()

      stdout <- Stdout()

      toCheck <- UnusableAggregate()

      try toCheck ?= provideUnusableReturn()
        stdout.println(`Will compile by using Any ? ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryStatementDeclarationUseViaAny1()

      stdout <- Stdout()


      try toCheck <- provideUnusableReturn()
        stdout.println(`Will compile by using Any ? ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryExpressionDeclarationUseViaAny1()

      stdout <- Stdout()

      name <- try toCheck <- provideUnusableReturn()
        <- rtn as String: toCheck.name
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

      stdout.println(`Do expect this to compile and maybe see ${name}`)

    demonstrateValidTryStatementDeclarationUseViaAny2()

      stdout <- Stdout()

      try toCheck as UnusableAggregate: provideUnusableReturn()
        stdout.println(`Will compile by using Any ? ${toCheck.name}`)
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

    demonstrateValidTryExpressionDeclarationUseViaAny2()

      stdout <- Stdout()


      name <- try toCheck as UnusableAggregate: provideUnusableReturn()
        <- rtn as String: toCheck.name
      catch
        -> ex as Exception
        stdout.println(`Exception triggered ${ex}`)

      stdout.println(`Will compile by using Any ? ${name}`)

//EOF