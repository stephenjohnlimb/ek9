#!ek9
defines module com.customer.just

  defines function

    suitableLength
      -> value as String
      <- rtn as Boolean: length of value > 5

  defines program

    ShowPriorityQueue()
      stdout <- Stdout()


      //Note how t1, t2 and r - are picked up from the definition of Comparator (ek9 built-in)
      comparator <- () extends Comparator of String as pure function (r:=? t1 <=> t2)

      qOne <- PriorityQueue("Bill").withComparator(comparator)

      qOne += "And"
      qOne += "Ted"
      qOne += "Excellent"
      qOne += "Adventure"
      qOne += "Outrageous"
      qOne += "Bogus"

      allEntries <- cat qOne | collect as List of String
      stdout.println($allEntries)
      assert $allEntries == "[Ted, Outrageous, Excellent, Bogus, Bill, And, Adventure]"

      qTwo <- qOne.withSize(3)

      limitedEntries <- qTwo.list()
      assert $limitedEntries == "[Ted, Outrageous, Excellent]"
      stdout.println($limitedEntries)

      qTwo += "Missy"
      iter <- qTwo.iterator()
      while iter?
        stdout.println($iter.next())

      //Alternative way to get the list - but in reverse order.
      //Also see the ~ operator for reverse.
      asList <- qOne.list().reverse()
      stdout.println($asList)

      q <- PriorityQueue() of String
      bestTwo <- q.withSize(2).withComparator(comparator)
      cat allEntries | filter by suitableLength > bestTwo
      stdout.println($~bestTwo.list())


//EOF