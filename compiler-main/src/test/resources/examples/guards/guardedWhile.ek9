#!ek9
defines module some.ok.whileguards

  <!-
    First few records and functions here are the test fixtures.
  -!>
  defines record

    //Note that this has no 'is-set' operator
    UnusableAggregate
      name <- String()

    //But this does have the 'is-set' operator
    UsableAggregate
      name <- String()

      default operator ?

  defines function

    <?-
      Simple function to provide an aggregate (record in this case)
      that does not have the 'is-set' operator.
    -?>
    provideUnusableReturn()
      <- rtn <- UnusableAggregate()

    <?-
      Provide a usable aggregate
    -?>
    provideUsableReturn()
      <- rtn <- UsableAggregate()

    <!-
      These are the demonstrations the prove the positive use and also the negative use.
    -!>

    demonstrateValidWhileAssignmentUse1()
      -> conditional as Boolean

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      while toCheck := provideUnusableReturn() with conditional
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)

    demonstrateValidWhileAssignmentUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //Just for completeness really
      toCheck <- UsableAggregate()
      while toCheck := provideUsableReturn() with conditional
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)

    demonstrateValidWhileExpressionAssignmentUse1()
      -> conditional as Boolean

      stdout <- Stdout()
      //Note still use UnusableAggregate without an 'is-set' operator, to show it can be used like this.
      //So this does not use the 'guard' functionality - i.e. there is no is-set functionality triggered.
      toCheck <- UnusableAggregate()
      result <- while toCheck := provideUnusableReturn() with conditional
        <- rtn as String: toCheck.name
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      assert result?

    demonstrateValidWhileExpressionAssignmentUse2()
      -> conditional as Boolean

      stdout <- Stdout()

      //Just for completeness really
      toCheck <- UsableAggregate()
      result <- while toCheck := provideUsableReturn() with conditional
        <- rtn as String: toCheck.name
        stdout.println(`But this is just a blind assignment ${toCheck.name}`)
      assert result?

    demonstrateValidWhileDeclarationUse()
      -> conditional as Boolean

      stdout <- Stdout()

      while toCheck <- provideUsableReturn() with conditional
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)

    demonstrateValidWhileExpressionDeclarationUse()
      -> conditional as Boolean

      stdout <- Stdout()

      result <- while toCheck <- provideUsableReturn() with conditional
        <- rtn as String: toCheck.name
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)
      assert result?

    demonstrateValidWhileGuardedAssignmentUse()
      -> conditional as Boolean

      stdout <- Stdout()

      //As the UsableAggregate does have an is-set operator it can be used in the 'guard' statement.
      toCheck <- UsableAggregate()
      while toCheck ?= provideUsableReturn() with conditional
        stdout.println(`Do expect this to compile and maybe see ${toCheck.name}`)

    <!-
      Now the invalid scenarios
    -!>

    demonstrateValidWhileGuardedAssignmentUseViaAny()
      -> conditional as Boolean

      stdout <- Stdout()
      toCheck <- UnusableAggregate()

      while toCheck ?= provideUnusableReturn() with conditional
        stdout.println(`Uses Any ? ${toCheck.name}`)

    demonstrateValidWhileGuardedDeclarationUseViaAny1()
      -> conditional as Boolean

      stdout <- Stdout()

      while toCheck <- provideUnusableReturn() with conditional
        stdout.println(`Uses Any ? ${toCheck.name}`)

    demonstrateValidWhileDeclarationUseViaAny2()
      -> conditional as Boolean

      stdout <- Stdout()


      while toCheck as UnusableAggregate: provideUnusableReturn() with conditional
        stdout.println(`Uses Any ? ${toCheck.name}`)


//EOF